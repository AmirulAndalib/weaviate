//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package protocol

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockWeaviateServer is an autogenerated mock type for the WeaviateServer type
type MockWeaviateServer struct {
	mock.Mock
}

type MockWeaviateServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeaviateServer) EXPECT() *MockWeaviateServer_Expecter {
	return &MockWeaviateServer_Expecter{mock: &_m.Mock}
}

// BatchDelete provides a mock function with given fields: _a0, _a1
func (_m *MockWeaviateServer) BatchDelete(_a0 context.Context, _a1 *BatchDeleteRequest) (*BatchDeleteReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for BatchDelete")
	}

	var r0 *BatchDeleteReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *BatchDeleteRequest) (*BatchDeleteReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *BatchDeleteRequest) *BatchDeleteReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchDeleteReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *BatchDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeaviateServer_BatchDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchDelete'
type MockWeaviateServer_BatchDelete_Call struct {
	*mock.Call
}

// BatchDelete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *BatchDeleteRequest
func (_e *MockWeaviateServer_Expecter) BatchDelete(_a0 interface{}, _a1 interface{}) *MockWeaviateServer_BatchDelete_Call {
	return &MockWeaviateServer_BatchDelete_Call{Call: _e.mock.On("BatchDelete", _a0, _a1)}
}

func (_c *MockWeaviateServer_BatchDelete_Call) Run(run func(_a0 context.Context, _a1 *BatchDeleteRequest)) *MockWeaviateServer_BatchDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*BatchDeleteRequest))
	})
	return _c
}

func (_c *MockWeaviateServer_BatchDelete_Call) Return(_a0 *BatchDeleteReply, _a1 error) *MockWeaviateServer_BatchDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeaviateServer_BatchDelete_Call) RunAndReturn(run func(context.Context, *BatchDeleteRequest) (*BatchDeleteReply, error)) *MockWeaviateServer_BatchDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BatchObjects provides a mock function with given fields: _a0, _a1
func (_m *MockWeaviateServer) BatchObjects(_a0 context.Context, _a1 *BatchObjectsRequest) (*BatchObjectsReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for BatchObjects")
	}

	var r0 *BatchObjectsReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *BatchObjectsRequest) (*BatchObjectsReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *BatchObjectsRequest) *BatchObjectsReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchObjectsReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *BatchObjectsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeaviateServer_BatchObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchObjects'
type MockWeaviateServer_BatchObjects_Call struct {
	*mock.Call
}

// BatchObjects is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *BatchObjectsRequest
func (_e *MockWeaviateServer_Expecter) BatchObjects(_a0 interface{}, _a1 interface{}) *MockWeaviateServer_BatchObjects_Call {
	return &MockWeaviateServer_BatchObjects_Call{Call: _e.mock.On("BatchObjects", _a0, _a1)}
}

func (_c *MockWeaviateServer_BatchObjects_Call) Run(run func(_a0 context.Context, _a1 *BatchObjectsRequest)) *MockWeaviateServer_BatchObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*BatchObjectsRequest))
	})
	return _c
}

func (_c *MockWeaviateServer_BatchObjects_Call) Return(_a0 *BatchObjectsReply, _a1 error) *MockWeaviateServer_BatchObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeaviateServer_BatchObjects_Call) RunAndReturn(run func(context.Context, *BatchObjectsRequest) (*BatchObjectsReply, error)) *MockWeaviateServer_BatchObjects_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: _a0, _a1
func (_m *MockWeaviateServer) Search(_a0 context.Context, _a1 *SearchRequest) (*SearchReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *SearchReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *SearchRequest) (*SearchReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *SearchRequest) *SearchReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *SearchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeaviateServer_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockWeaviateServer_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *SearchRequest
func (_e *MockWeaviateServer_Expecter) Search(_a0 interface{}, _a1 interface{}) *MockWeaviateServer_Search_Call {
	return &MockWeaviateServer_Search_Call{Call: _e.mock.On("Search", _a0, _a1)}
}

func (_c *MockWeaviateServer_Search_Call) Run(run func(_a0 context.Context, _a1 *SearchRequest)) *MockWeaviateServer_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*SearchRequest))
	})
	return _c
}

func (_c *MockWeaviateServer_Search_Call) Return(_a0 *SearchReply, _a1 error) *MockWeaviateServer_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeaviateServer_Search_Call) RunAndReturn(run func(context.Context, *SearchRequest) (*SearchReply, error)) *MockWeaviateServer_Search_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedWeaviateServer provides a mock function with given fields:
func (_m *MockWeaviateServer) mustEmbedUnimplementedWeaviateServer() {
	_m.Called()
}

// MockWeaviateServer_mustEmbedUnimplementedWeaviateServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedWeaviateServer'
type MockWeaviateServer_mustEmbedUnimplementedWeaviateServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedWeaviateServer is a helper method to define mock.On call
func (_e *MockWeaviateServer_Expecter) mustEmbedUnimplementedWeaviateServer() *MockWeaviateServer_mustEmbedUnimplementedWeaviateServer_Call {
	return &MockWeaviateServer_mustEmbedUnimplementedWeaviateServer_Call{Call: _e.mock.On("mustEmbedUnimplementedWeaviateServer")}
}

func (_c *MockWeaviateServer_mustEmbedUnimplementedWeaviateServer_Call) Run(run func()) *MockWeaviateServer_mustEmbedUnimplementedWeaviateServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWeaviateServer_mustEmbedUnimplementedWeaviateServer_Call) Return() *MockWeaviateServer_mustEmbedUnimplementedWeaviateServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWeaviateServer_mustEmbedUnimplementedWeaviateServer_Call) RunAndReturn(run func()) *MockWeaviateServer_mustEmbedUnimplementedWeaviateServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWeaviateServer creates a new instance of MockWeaviateServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeaviateServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeaviateServer {
	mock := &MockWeaviateServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
