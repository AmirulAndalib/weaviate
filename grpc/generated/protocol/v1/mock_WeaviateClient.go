//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package protocol

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockWeaviateClient is an autogenerated mock type for the WeaviateClient type
type MockWeaviateClient struct {
	mock.Mock
}

type MockWeaviateClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeaviateClient) EXPECT() *MockWeaviateClient_Expecter {
	return &MockWeaviateClient_Expecter{mock: &_m.Mock}
}

// BatchDelete provides a mock function with given fields: ctx, in, opts
func (_m *MockWeaviateClient) BatchDelete(ctx context.Context, in *BatchDeleteRequest, opts ...grpc.CallOption) (*BatchDeleteReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDelete")
	}

	var r0 *BatchDeleteReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *BatchDeleteRequest, ...grpc.CallOption) (*BatchDeleteReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *BatchDeleteRequest, ...grpc.CallOption) *BatchDeleteReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchDeleteReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *BatchDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeaviateClient_BatchDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchDelete'
type MockWeaviateClient_BatchDelete_Call struct {
	*mock.Call
}

// BatchDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - in *BatchDeleteRequest
//   - opts ...grpc.CallOption
func (_e *MockWeaviateClient_Expecter) BatchDelete(ctx interface{}, in interface{}, opts ...interface{}) *MockWeaviateClient_BatchDelete_Call {
	return &MockWeaviateClient_BatchDelete_Call{Call: _e.mock.On("BatchDelete",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWeaviateClient_BatchDelete_Call) Run(run func(ctx context.Context, in *BatchDeleteRequest, opts ...grpc.CallOption)) *MockWeaviateClient_BatchDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*BatchDeleteRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWeaviateClient_BatchDelete_Call) Return(_a0 *BatchDeleteReply, _a1 error) *MockWeaviateClient_BatchDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeaviateClient_BatchDelete_Call) RunAndReturn(run func(context.Context, *BatchDeleteRequest, ...grpc.CallOption) (*BatchDeleteReply, error)) *MockWeaviateClient_BatchDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BatchObjects provides a mock function with given fields: ctx, in, opts
func (_m *MockWeaviateClient) BatchObjects(ctx context.Context, in *BatchObjectsRequest, opts ...grpc.CallOption) (*BatchObjectsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchObjects")
	}

	var r0 *BatchObjectsReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *BatchObjectsRequest, ...grpc.CallOption) (*BatchObjectsReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *BatchObjectsRequest, ...grpc.CallOption) *BatchObjectsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchObjectsReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *BatchObjectsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeaviateClient_BatchObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchObjects'
type MockWeaviateClient_BatchObjects_Call struct {
	*mock.Call
}

// BatchObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - in *BatchObjectsRequest
//   - opts ...grpc.CallOption
func (_e *MockWeaviateClient_Expecter) BatchObjects(ctx interface{}, in interface{}, opts ...interface{}) *MockWeaviateClient_BatchObjects_Call {
	return &MockWeaviateClient_BatchObjects_Call{Call: _e.mock.On("BatchObjects",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWeaviateClient_BatchObjects_Call) Run(run func(ctx context.Context, in *BatchObjectsRequest, opts ...grpc.CallOption)) *MockWeaviateClient_BatchObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*BatchObjectsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWeaviateClient_BatchObjects_Call) Return(_a0 *BatchObjectsReply, _a1 error) *MockWeaviateClient_BatchObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeaviateClient_BatchObjects_Call) RunAndReturn(run func(context.Context, *BatchObjectsRequest, ...grpc.CallOption) (*BatchObjectsReply, error)) *MockWeaviateClient_BatchObjects_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, in, opts
func (_m *MockWeaviateClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *SearchReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *SearchRequest, ...grpc.CallOption) (*SearchReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *SearchRequest, ...grpc.CallOption) *SearchReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *SearchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWeaviateClient_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockWeaviateClient_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - in *SearchRequest
//   - opts ...grpc.CallOption
func (_e *MockWeaviateClient_Expecter) Search(ctx interface{}, in interface{}, opts ...interface{}) *MockWeaviateClient_Search_Call {
	return &MockWeaviateClient_Search_Call{Call: _e.mock.On("Search",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWeaviateClient_Search_Call) Run(run func(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption)) *MockWeaviateClient_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*SearchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWeaviateClient_Search_Call) Return(_a0 *SearchReply, _a1 error) *MockWeaviateClient_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWeaviateClient_Search_Call) RunAndReturn(run func(context.Context, *SearchRequest, ...grpc.CallOption) (*SearchReply, error)) *MockWeaviateClient_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWeaviateClient creates a new instance of MockWeaviateClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeaviateClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeaviateClient {
	mock := &MockWeaviateClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
