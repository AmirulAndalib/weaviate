//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package txstore

import (
	json "encoding/json"

	cluster "github.com/weaviate/weaviate/usecases/cluster"

	mock "github.com/stretchr/testify/mock"
)

// MockunmarshalFn is an autogenerated mock type for the unmarshalFn type
type MockunmarshalFn struct {
	mock.Mock
}

type MockunmarshalFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockunmarshalFn) EXPECT() *MockunmarshalFn_Expecter {
	return &MockunmarshalFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: txType, payload
func (_m *MockunmarshalFn) Execute(txType cluster.TransactionType, payload json.RawMessage) (interface{}, error) {
	ret := _m.Called(txType, payload)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(cluster.TransactionType, json.RawMessage) (interface{}, error)); ok {
		return rf(txType, payload)
	}
	if rf, ok := ret.Get(0).(func(cluster.TransactionType, json.RawMessage) interface{}); ok {
		r0 = rf(txType, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(cluster.TransactionType, json.RawMessage) error); ok {
		r1 = rf(txType, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockunmarshalFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockunmarshalFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - txType cluster.TransactionType
//   - payload json.RawMessage
func (_e *MockunmarshalFn_Expecter) Execute(txType interface{}, payload interface{}) *MockunmarshalFn_Execute_Call {
	return &MockunmarshalFn_Execute_Call{Call: _e.mock.On("Execute", txType, payload)}
}

func (_c *MockunmarshalFn_Execute_Call) Run(run func(txType cluster.TransactionType, payload json.RawMessage)) *MockunmarshalFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cluster.TransactionType), args[1].(json.RawMessage))
	})
	return _c
}

func (_c *MockunmarshalFn_Execute_Call) Return(_a0 interface{}, _a1 error) *MockunmarshalFn_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockunmarshalFn_Execute_Call) RunAndReturn(run func(cluster.TransactionType, json.RawMessage) (interface{}, error)) *MockunmarshalFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockunmarshalFn creates a new instance of MockunmarshalFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockunmarshalFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockunmarshalFn {
	mock := &MockunmarshalFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
