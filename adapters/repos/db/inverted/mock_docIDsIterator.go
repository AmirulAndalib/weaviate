//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package inverted

import mock "github.com/stretchr/testify/mock"

// MockdocIDsIterator is an autogenerated mock type for the docIDsIterator type
type MockdocIDsIterator struct {
	mock.Mock
}

type MockdocIDsIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdocIDsIterator) EXPECT() *MockdocIDsIterator_Expecter {
	return &MockdocIDsIterator_Expecter{mock: &_m.Mock}
}

// Len provides a mock function with given fields:
func (_m *MockdocIDsIterator) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockdocIDsIterator_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type MockdocIDsIterator_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *MockdocIDsIterator_Expecter) Len() *MockdocIDsIterator_Len_Call {
	return &MockdocIDsIterator_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *MockdocIDsIterator_Len_Call) Run(run func()) *MockdocIDsIterator_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockdocIDsIterator_Len_Call) Return(_a0 int) *MockdocIDsIterator_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdocIDsIterator_Len_Call) RunAndReturn(run func() int) *MockdocIDsIterator_Len_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields:
func (_m *MockdocIDsIterator) Next() (uint64, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 uint64
	var r1 bool
	if rf, ok := ret.Get(0).(func() (uint64, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockdocIDsIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockdocIDsIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockdocIDsIterator_Expecter) Next() *MockdocIDsIterator_Next_Call {
	return &MockdocIDsIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockdocIDsIterator_Next_Call) Run(run func()) *MockdocIDsIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockdocIDsIterator_Next_Call) Return(_a0 uint64, _a1 bool) *MockdocIDsIterator_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdocIDsIterator_Next_Call) RunAndReturn(run func() (uint64, bool)) *MockdocIDsIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdocIDsIterator creates a new instance of MockdocIDsIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdocIDsIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdocIDsIterator {
	mock := &MockdocIDsIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
