//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package inverted

import (
	mock "github.com/stretchr/testify/mock"
	sroar "github.com/weaviate/sroar"
)

// MockReadFn is an autogenerated mock type for the ReadFn type
type MockReadFn struct {
	mock.Mock
}

type MockReadFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReadFn) EXPECT() *MockReadFn_Expecter {
	return &MockReadFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: k, v
func (_m *MockReadFn) Execute(k []byte, v *sroar.Bitmap) (bool, error) {
	ret := _m.Called(k, v)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, *sroar.Bitmap) (bool, error)); ok {
		return rf(k, v)
	}
	if rf, ok := ret.Get(0).(func([]byte, *sroar.Bitmap) bool); ok {
		r0 = rf(k, v)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]byte, *sroar.Bitmap) error); ok {
		r1 = rf(k, v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReadFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockReadFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - k []byte
//   - v *sroar.Bitmap
func (_e *MockReadFn_Expecter) Execute(k interface{}, v interface{}) *MockReadFn_Execute_Call {
	return &MockReadFn_Execute_Call{Call: _e.mock.On("Execute", k, v)}
}

func (_c *MockReadFn_Execute_Call) Run(run func(k []byte, v *sroar.Bitmap)) *MockReadFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(*sroar.Bitmap))
	})
	return _c
}

func (_c *MockReadFn_Execute_Call) Return(_a0 bool, _a1 error) *MockReadFn_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReadFn_Execute_Call) RunAndReturn(run func([]byte, *sroar.Bitmap) (bool, error)) *MockReadFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReadFn creates a new instance of MockReadFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReadFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReadFn {
	mock := &MockReadFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
