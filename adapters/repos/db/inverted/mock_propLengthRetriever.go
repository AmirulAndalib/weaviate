//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package inverted

import mock "github.com/stretchr/testify/mock"

// MockpropLengthRetriever is an autogenerated mock type for the propLengthRetriever type
type MockpropLengthRetriever struct {
	mock.Mock
}

type MockpropLengthRetriever_Expecter struct {
	mock *mock.Mock
}

func (_m *MockpropLengthRetriever) EXPECT() *MockpropLengthRetriever_Expecter {
	return &MockpropLengthRetriever_Expecter{mock: &_m.Mock}
}

// PropertyMean provides a mock function with given fields: prop
func (_m *MockpropLengthRetriever) PropertyMean(prop string) (float32, error) {
	ret := _m.Called(prop)

	if len(ret) == 0 {
		panic("no return value specified for PropertyMean")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (float32, error)); ok {
		return rf(prop)
	}
	if rf, ok := ret.Get(0).(func(string) float32); ok {
		r0 = rf(prop)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prop)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockpropLengthRetriever_PropertyMean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PropertyMean'
type MockpropLengthRetriever_PropertyMean_Call struct {
	*mock.Call
}

// PropertyMean is a helper method to define mock.On call
//   - prop string
func (_e *MockpropLengthRetriever_Expecter) PropertyMean(prop interface{}) *MockpropLengthRetriever_PropertyMean_Call {
	return &MockpropLengthRetriever_PropertyMean_Call{Call: _e.mock.On("PropertyMean", prop)}
}

func (_c *MockpropLengthRetriever_PropertyMean_Call) Run(run func(prop string)) *MockpropLengthRetriever_PropertyMean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockpropLengthRetriever_PropertyMean_Call) Return(_a0 float32, _a1 error) *MockpropLengthRetriever_PropertyMean_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockpropLengthRetriever_PropertyMean_Call) RunAndReturn(run func(string) (float32, error)) *MockpropLengthRetriever_PropertyMean_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockpropLengthRetriever creates a new instance of MockpropLengthRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockpropLengthRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockpropLengthRetriever {
	mock := &MockpropLengthRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
