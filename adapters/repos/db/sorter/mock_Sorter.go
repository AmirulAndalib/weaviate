//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package sorter

import (
	mock "github.com/stretchr/testify/mock"
	filters "github.com/weaviate/weaviate/entities/filters"

	storobj "github.com/weaviate/weaviate/entities/storobj"
)

// MockSorter is an autogenerated mock type for the Sorter type
type MockSorter struct {
	mock.Mock
}

type MockSorter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSorter) EXPECT() *MockSorter_Expecter {
	return &MockSorter_Expecter{mock: &_m.Mock}
}

// Sort provides a mock function with given fields: objects, distances, limit, sort
func (_m *MockSorter) Sort(objects []*storobj.Object, distances []float32, limit int, sort []filters.Sort) ([]*storobj.Object, []float32, error) {
	ret := _m.Called(objects, distances, limit, sort)

	if len(ret) == 0 {
		panic("no return value specified for Sort")
	}

	var r0 []*storobj.Object
	var r1 []float32
	var r2 error
	if rf, ok := ret.Get(0).(func([]*storobj.Object, []float32, int, []filters.Sort) ([]*storobj.Object, []float32, error)); ok {
		return rf(objects, distances, limit, sort)
	}
	if rf, ok := ret.Get(0).(func([]*storobj.Object, []float32, int, []filters.Sort) []*storobj.Object); ok {
		r0 = rf(objects, distances, limit, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func([]*storobj.Object, []float32, int, []filters.Sort) []float32); ok {
		r1 = rf(objects, distances, limit, sort)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float32)
		}
	}

	if rf, ok := ret.Get(2).(func([]*storobj.Object, []float32, int, []filters.Sort) error); ok {
		r2 = rf(objects, distances, limit, sort)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSorter_Sort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sort'
type MockSorter_Sort_Call struct {
	*mock.Call
}

// Sort is a helper method to define mock.On call
//   - objects []*storobj.Object
//   - distances []float32
//   - limit int
//   - sort []filters.Sort
func (_e *MockSorter_Expecter) Sort(objects interface{}, distances interface{}, limit interface{}, sort interface{}) *MockSorter_Sort_Call {
	return &MockSorter_Sort_Call{Call: _e.mock.On("Sort", objects, distances, limit, sort)}
}

func (_c *MockSorter_Sort_Call) Run(run func(objects []*storobj.Object, distances []float32, limit int, sort []filters.Sort)) *MockSorter_Sort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*storobj.Object), args[1].([]float32), args[2].(int), args[3].([]filters.Sort))
	})
	return _c
}

func (_c *MockSorter_Sort_Call) Return(_a0 []*storobj.Object, _a1 []float32, _a2 error) *MockSorter_Sort_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSorter_Sort_Call) RunAndReturn(run func([]*storobj.Object, []float32, int, []filters.Sort) ([]*storobj.Object, []float32, error)) *MockSorter_Sort_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSorter creates a new instance of MockSorter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSorter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSorter {
	mock := &MockSorter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
