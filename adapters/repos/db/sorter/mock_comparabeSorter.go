//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package sorter

import mock "github.com/stretchr/testify/mock"

// MockcomparabeSorter is an autogenerated mock type for the comparabeSorter type
type MockcomparabeSorter struct {
	mock.Mock
}

type MockcomparabeSorter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockcomparabeSorter) EXPECT() *MockcomparabeSorter_Expecter {
	return &MockcomparabeSorter_Expecter{mock: &_m.Mock}
}

// addComparable provides a mock function with given fields: el
func (_m *MockcomparabeSorter) addComparable(el *comparable) bool {
	ret := _m.Called(el)

	if len(ret) == 0 {
		panic("no return value specified for addComparable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*comparable) bool); ok {
		r0 = rf(el)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockcomparabeSorter_addComparable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'addComparable'
type MockcomparabeSorter_addComparable_Call struct {
	*mock.Call
}

// addComparable is a helper method to define mock.On call
//   - el *comparable
func (_e *MockcomparabeSorter_Expecter) addComparable(el interface{}) *MockcomparabeSorter_addComparable_Call {
	return &MockcomparabeSorter_addComparable_Call{Call: _e.mock.On("addComparable", el)}
}

func (_c *MockcomparabeSorter_addComparable_Call) Run(run func(el *comparable)) *MockcomparabeSorter_addComparable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*comparable))
	})
	return _c
}

func (_c *MockcomparabeSorter_addComparable_Call) Return(added bool) *MockcomparabeSorter_addComparable_Call {
	_c.Call.Return(added)
	return _c
}

func (_c *MockcomparabeSorter_addComparable_Call) RunAndReturn(run func(*comparable) bool) *MockcomparabeSorter_addComparable_Call {
	_c.Call.Return(run)
	return _c
}

// getSorted provides a mock function with given fields:
func (_m *MockcomparabeSorter) getSorted() []*comparable {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for getSorted")
	}

	var r0 []*comparable
	if rf, ok := ret.Get(0).(func() []*comparable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*comparable)
		}
	}

	return r0
}

// MockcomparabeSorter_getSorted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getSorted'
type MockcomparabeSorter_getSorted_Call struct {
	*mock.Call
}

// getSorted is a helper method to define mock.On call
func (_e *MockcomparabeSorter_Expecter) getSorted() *MockcomparabeSorter_getSorted_Call {
	return &MockcomparabeSorter_getSorted_Call{Call: _e.mock.On("getSorted")}
}

func (_c *MockcomparabeSorter_getSorted_Call) Run(run func()) *MockcomparabeSorter_getSorted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockcomparabeSorter_getSorted_Call) Return(_a0 []*comparable) *MockcomparabeSorter_getSorted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockcomparabeSorter_getSorted_Call) RunAndReturn(run func() []*comparable) *MockcomparabeSorter_getSorted_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockcomparabeSorter creates a new instance of MockcomparabeSorter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockcomparabeSorter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockcomparabeSorter {
	mock := &MockcomparabeSorter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
