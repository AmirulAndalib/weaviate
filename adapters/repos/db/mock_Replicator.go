//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	objects "github.com/weaviate/weaviate/usecases/objects"

	replica "github.com/weaviate/weaviate/usecases/replica"

	storobj "github.com/weaviate/weaviate/entities/storobj"

	strfmt "github.com/go-openapi/strfmt"
)

// MockReplicator is an autogenerated mock type for the Replicator type
type MockReplicator struct {
	mock.Mock
}

type MockReplicator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReplicator) EXPECT() *MockReplicator_Expecter {
	return &MockReplicator_Expecter{mock: &_m.Mock}
}

// AbortReplication provides a mock function with given fields: shardName, requestID
func (_m *MockReplicator) AbortReplication(shardName string, requestID string) interface{} {
	ret := _m.Called(shardName, requestID)

	if len(ret) == 0 {
		panic("no return value specified for AbortReplication")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(shardName, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockReplicator_AbortReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortReplication'
type MockReplicator_AbortReplication_Call struct {
	*mock.Call
}

// AbortReplication is a helper method to define mock.On call
//   - shardName string
//   - requestID string
func (_e *MockReplicator_Expecter) AbortReplication(shardName interface{}, requestID interface{}) *MockReplicator_AbortReplication_Call {
	return &MockReplicator_AbortReplication_Call{Call: _e.mock.On("AbortReplication", shardName, requestID)}
}

func (_c *MockReplicator_AbortReplication_Call) Run(run func(shardName string, requestID string)) *MockReplicator_AbortReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockReplicator_AbortReplication_Call) Return(_a0 interface{}) *MockReplicator_AbortReplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicator_AbortReplication_Call) RunAndReturn(run func(string, string) interface{}) *MockReplicator_AbortReplication_Call {
	_c.Call.Return(run)
	return _c
}

// CommitReplication provides a mock function with given fields: shard, requestID
func (_m *MockReplicator) CommitReplication(shard string, requestID string) interface{} {
	ret := _m.Called(shard, requestID)

	if len(ret) == 0 {
		panic("no return value specified for CommitReplication")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(shard, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockReplicator_CommitReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitReplication'
type MockReplicator_CommitReplication_Call struct {
	*mock.Call
}

// CommitReplication is a helper method to define mock.On call
//   - shard string
//   - requestID string
func (_e *MockReplicator_Expecter) CommitReplication(shard interface{}, requestID interface{}) *MockReplicator_CommitReplication_Call {
	return &MockReplicator_CommitReplication_Call{Call: _e.mock.On("CommitReplication", shard, requestID)}
}

func (_c *MockReplicator_CommitReplication_Call) Run(run func(shard string, requestID string)) *MockReplicator_CommitReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockReplicator_CommitReplication_Call) Return(_a0 interface{}) *MockReplicator_CommitReplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicator_CommitReplication_Call) RunAndReturn(run func(string, string) interface{}) *MockReplicator_CommitReplication_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateDeletion provides a mock function with given fields: ctx, shardName, requestID, uuid
func (_m *MockReplicator) ReplicateDeletion(ctx context.Context, shardName string, requestID string, uuid strfmt.UUID) replica.SimpleResponse {
	ret := _m.Called(ctx, shardName, requestID, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateDeletion")
	}

	var r0 replica.SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, strfmt.UUID) replica.SimpleResponse); ok {
		r0 = rf(ctx, shardName, requestID, uuid)
	} else {
		r0 = ret.Get(0).(replica.SimpleResponse)
	}

	return r0
}

// MockReplicator_ReplicateDeletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateDeletion'
type MockReplicator_ReplicateDeletion_Call struct {
	*mock.Call
}

// ReplicateDeletion is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - requestID string
//   - uuid strfmt.UUID
func (_e *MockReplicator_Expecter) ReplicateDeletion(ctx interface{}, shardName interface{}, requestID interface{}, uuid interface{}) *MockReplicator_ReplicateDeletion_Call {
	return &MockReplicator_ReplicateDeletion_Call{Call: _e.mock.On("ReplicateDeletion", ctx, shardName, requestID, uuid)}
}

func (_c *MockReplicator_ReplicateDeletion_Call) Run(run func(ctx context.Context, shardName string, requestID string, uuid strfmt.UUID)) *MockReplicator_ReplicateDeletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(strfmt.UUID))
	})
	return _c
}

func (_c *MockReplicator_ReplicateDeletion_Call) Return(_a0 replica.SimpleResponse) *MockReplicator_ReplicateDeletion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicator_ReplicateDeletion_Call) RunAndReturn(run func(context.Context, string, string, strfmt.UUID) replica.SimpleResponse) *MockReplicator_ReplicateDeletion_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateDeletions provides a mock function with given fields: ctx, shardName, requestID, uuids, dryRun
func (_m *MockReplicator) ReplicateDeletions(ctx context.Context, shardName string, requestID string, uuids []strfmt.UUID, dryRun bool) replica.SimpleResponse {
	ret := _m.Called(ctx, shardName, requestID, uuids, dryRun)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateDeletions")
	}

	var r0 replica.SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []strfmt.UUID, bool) replica.SimpleResponse); ok {
		r0 = rf(ctx, shardName, requestID, uuids, dryRun)
	} else {
		r0 = ret.Get(0).(replica.SimpleResponse)
	}

	return r0
}

// MockReplicator_ReplicateDeletions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateDeletions'
type MockReplicator_ReplicateDeletions_Call struct {
	*mock.Call
}

// ReplicateDeletions is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - requestID string
//   - uuids []strfmt.UUID
//   - dryRun bool
func (_e *MockReplicator_Expecter) ReplicateDeletions(ctx interface{}, shardName interface{}, requestID interface{}, uuids interface{}, dryRun interface{}) *MockReplicator_ReplicateDeletions_Call {
	return &MockReplicator_ReplicateDeletions_Call{Call: _e.mock.On("ReplicateDeletions", ctx, shardName, requestID, uuids, dryRun)}
}

func (_c *MockReplicator_ReplicateDeletions_Call) Run(run func(ctx context.Context, shardName string, requestID string, uuids []strfmt.UUID, dryRun bool)) *MockReplicator_ReplicateDeletions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]strfmt.UUID), args[4].(bool))
	})
	return _c
}

func (_c *MockReplicator_ReplicateDeletions_Call) Return(_a0 replica.SimpleResponse) *MockReplicator_ReplicateDeletions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicator_ReplicateDeletions_Call) RunAndReturn(run func(context.Context, string, string, []strfmt.UUID, bool) replica.SimpleResponse) *MockReplicator_ReplicateDeletions_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateObject provides a mock function with given fields: ctx, shardName, requestID, object
func (_m *MockReplicator) ReplicateObject(ctx context.Context, shardName string, requestID string, object *storobj.Object) replica.SimpleResponse {
	ret := _m.Called(ctx, shardName, requestID, object)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateObject")
	}

	var r0 replica.SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *storobj.Object) replica.SimpleResponse); ok {
		r0 = rf(ctx, shardName, requestID, object)
	} else {
		r0 = ret.Get(0).(replica.SimpleResponse)
	}

	return r0
}

// MockReplicator_ReplicateObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateObject'
type MockReplicator_ReplicateObject_Call struct {
	*mock.Call
}

// ReplicateObject is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - requestID string
//   - object *storobj.Object
func (_e *MockReplicator_Expecter) ReplicateObject(ctx interface{}, shardName interface{}, requestID interface{}, object interface{}) *MockReplicator_ReplicateObject_Call {
	return &MockReplicator_ReplicateObject_Call{Call: _e.mock.On("ReplicateObject", ctx, shardName, requestID, object)}
}

func (_c *MockReplicator_ReplicateObject_Call) Run(run func(ctx context.Context, shardName string, requestID string, object *storobj.Object)) *MockReplicator_ReplicateObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*storobj.Object))
	})
	return _c
}

func (_c *MockReplicator_ReplicateObject_Call) Return(_a0 replica.SimpleResponse) *MockReplicator_ReplicateObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicator_ReplicateObject_Call) RunAndReturn(run func(context.Context, string, string, *storobj.Object) replica.SimpleResponse) *MockReplicator_ReplicateObject_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateObjects provides a mock function with given fields: ctx, shardName, requestID, _a3
func (_m *MockReplicator) ReplicateObjects(ctx context.Context, shardName string, requestID string, _a3 []*storobj.Object) replica.SimpleResponse {
	ret := _m.Called(ctx, shardName, requestID, _a3)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateObjects")
	}

	var r0 replica.SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []*storobj.Object) replica.SimpleResponse); ok {
		r0 = rf(ctx, shardName, requestID, _a3)
	} else {
		r0 = ret.Get(0).(replica.SimpleResponse)
	}

	return r0
}

// MockReplicator_ReplicateObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateObjects'
type MockReplicator_ReplicateObjects_Call struct {
	*mock.Call
}

// ReplicateObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - requestID string
//   - _a3 []*storobj.Object
func (_e *MockReplicator_Expecter) ReplicateObjects(ctx interface{}, shardName interface{}, requestID interface{}, _a3 interface{}) *MockReplicator_ReplicateObjects_Call {
	return &MockReplicator_ReplicateObjects_Call{Call: _e.mock.On("ReplicateObjects", ctx, shardName, requestID, _a3)}
}

func (_c *MockReplicator_ReplicateObjects_Call) Run(run func(ctx context.Context, shardName string, requestID string, _a3 []*storobj.Object)) *MockReplicator_ReplicateObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]*storobj.Object))
	})
	return _c
}

func (_c *MockReplicator_ReplicateObjects_Call) Return(_a0 replica.SimpleResponse) *MockReplicator_ReplicateObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicator_ReplicateObjects_Call) RunAndReturn(run func(context.Context, string, string, []*storobj.Object) replica.SimpleResponse) *MockReplicator_ReplicateObjects_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateReferences provides a mock function with given fields: ctx, shard, requestID, refs
func (_m *MockReplicator) ReplicateReferences(ctx context.Context, shard string, requestID string, refs []objects.BatchReference) replica.SimpleResponse {
	ret := _m.Called(ctx, shard, requestID, refs)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateReferences")
	}

	var r0 replica.SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []objects.BatchReference) replica.SimpleResponse); ok {
		r0 = rf(ctx, shard, requestID, refs)
	} else {
		r0 = ret.Get(0).(replica.SimpleResponse)
	}

	return r0
}

// MockReplicator_ReplicateReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateReferences'
type MockReplicator_ReplicateReferences_Call struct {
	*mock.Call
}

// ReplicateReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - shard string
//   - requestID string
//   - refs []objects.BatchReference
func (_e *MockReplicator_Expecter) ReplicateReferences(ctx interface{}, shard interface{}, requestID interface{}, refs interface{}) *MockReplicator_ReplicateReferences_Call {
	return &MockReplicator_ReplicateReferences_Call{Call: _e.mock.On("ReplicateReferences", ctx, shard, requestID, refs)}
}

func (_c *MockReplicator_ReplicateReferences_Call) Run(run func(ctx context.Context, shard string, requestID string, refs []objects.BatchReference)) *MockReplicator_ReplicateReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]objects.BatchReference))
	})
	return _c
}

func (_c *MockReplicator_ReplicateReferences_Call) Return(_a0 replica.SimpleResponse) *MockReplicator_ReplicateReferences_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicator_ReplicateReferences_Call) RunAndReturn(run func(context.Context, string, string, []objects.BatchReference) replica.SimpleResponse) *MockReplicator_ReplicateReferences_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateUpdate provides a mock function with given fields: ctx, shard, requestID, doc
func (_m *MockReplicator) ReplicateUpdate(ctx context.Context, shard string, requestID string, doc *objects.MergeDocument) replica.SimpleResponse {
	ret := _m.Called(ctx, shard, requestID, doc)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateUpdate")
	}

	var r0 replica.SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *objects.MergeDocument) replica.SimpleResponse); ok {
		r0 = rf(ctx, shard, requestID, doc)
	} else {
		r0 = ret.Get(0).(replica.SimpleResponse)
	}

	return r0
}

// MockReplicator_ReplicateUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateUpdate'
type MockReplicator_ReplicateUpdate_Call struct {
	*mock.Call
}

// ReplicateUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - shard string
//   - requestID string
//   - doc *objects.MergeDocument
func (_e *MockReplicator_Expecter) ReplicateUpdate(ctx interface{}, shard interface{}, requestID interface{}, doc interface{}) *MockReplicator_ReplicateUpdate_Call {
	return &MockReplicator_ReplicateUpdate_Call{Call: _e.mock.On("ReplicateUpdate", ctx, shard, requestID, doc)}
}

func (_c *MockReplicator_ReplicateUpdate_Call) Run(run func(ctx context.Context, shard string, requestID string, doc *objects.MergeDocument)) *MockReplicator_ReplicateUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*objects.MergeDocument))
	})
	return _c
}

func (_c *MockReplicator_ReplicateUpdate_Call) Return(_a0 replica.SimpleResponse) *MockReplicator_ReplicateUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicator_ReplicateUpdate_Call) RunAndReturn(run func(context.Context, string, string, *objects.MergeDocument) replica.SimpleResponse) *MockReplicator_ReplicateUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReplicator creates a new instance of MockReplicator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReplicator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReplicator {
	mock := &MockReplicator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
