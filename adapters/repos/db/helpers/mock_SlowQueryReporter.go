//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package helpers

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockSlowQueryReporter is an autogenerated mock type for the SlowQueryReporter type
type MockSlowQueryReporter struct {
	mock.Mock
}

type MockSlowQueryReporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSlowQueryReporter) EXPECT() *MockSlowQueryReporter_Expecter {
	return &MockSlowQueryReporter_Expecter{mock: &_m.Mock}
}

// LogIfSlow provides a mock function with given fields: _a0, _a1
func (_m *MockSlowQueryReporter) LogIfSlow(_a0 time.Time, _a1 map[string]interface{}) {
	_m.Called(_a0, _a1)
}

// MockSlowQueryReporter_LogIfSlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogIfSlow'
type MockSlowQueryReporter_LogIfSlow_Call struct {
	*mock.Call
}

// LogIfSlow is a helper method to define mock.On call
//   - _a0 time.Time
//   - _a1 map[string]interface{}
func (_e *MockSlowQueryReporter_Expecter) LogIfSlow(_a0 interface{}, _a1 interface{}) *MockSlowQueryReporter_LogIfSlow_Call {
	return &MockSlowQueryReporter_LogIfSlow_Call{Call: _e.mock.On("LogIfSlow", _a0, _a1)}
}

func (_c *MockSlowQueryReporter_LogIfSlow_Call) Run(run func(_a0 time.Time, _a1 map[string]interface{})) *MockSlowQueryReporter_LogIfSlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockSlowQueryReporter_LogIfSlow_Call) Return() *MockSlowQueryReporter_LogIfSlow_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSlowQueryReporter_LogIfSlow_Call) RunAndReturn(run func(time.Time, map[string]interface{})) *MockSlowQueryReporter_LogIfSlow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSlowQueryReporter creates a new instance of MockSlowQueryReporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSlowQueryReporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSlowQueryReporter {
	mock := &MockSlowQueryReporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
