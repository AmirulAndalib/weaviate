//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package geo

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	helpers "github.com/weaviate/weaviate/adapters/repos/db/helpers"
)

// MockvectorIndex is an autogenerated mock type for the vectorIndex type
type MockvectorIndex struct {
	mock.Mock
}

type MockvectorIndex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockvectorIndex) EXPECT() *MockvectorIndex_Expecter {
	return &MockvectorIndex_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: id, vector
func (_m *MockvectorIndex) Add(id uint64, vector []float32) error {
	ret := _m.Called(id, vector)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, []float32) error); ok {
		r0 = rf(id, vector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockvectorIndex_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockvectorIndex_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - id uint64
//   - vector []float32
func (_e *MockvectorIndex_Expecter) Add(id interface{}, vector interface{}) *MockvectorIndex_Add_Call {
	return &MockvectorIndex_Add_Call{Call: _e.mock.On("Add", id, vector)}
}

func (_c *MockvectorIndex_Add_Call) Run(run func(id uint64, vector []float32)) *MockvectorIndex_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].([]float32))
	})
	return _c
}

func (_c *MockvectorIndex_Add_Call) Return(_a0 error) *MockvectorIndex_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockvectorIndex_Add_Call) RunAndReturn(run func(uint64, []float32) error) *MockvectorIndex_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockvectorIndex) Delete(id ...uint64) error {
	_va := make([]interface{}, len(id))
	for _i := range id {
		_va[_i] = id[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...uint64) error); ok {
		r0 = rf(id...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockvectorIndex_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockvectorIndex_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id ...uint64
func (_e *MockvectorIndex_Expecter) Delete(id ...interface{}) *MockvectorIndex_Delete_Call {
	return &MockvectorIndex_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{}, id...)...)}
}

func (_c *MockvectorIndex_Delete_Call) Run(run func(id ...uint64)) *MockvectorIndex_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint64, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(uint64)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockvectorIndex_Delete_Call) Return(_a0 error) *MockvectorIndex_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockvectorIndex_Delete_Call) RunAndReturn(run func(...uint64) error) *MockvectorIndex_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Drop provides a mock function with given fields: ctx
func (_m *MockvectorIndex) Drop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Drop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockvectorIndex_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type MockvectorIndex_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockvectorIndex_Expecter) Drop(ctx interface{}) *MockvectorIndex_Drop_Call {
	return &MockvectorIndex_Drop_Call{Call: _e.mock.On("Drop", ctx)}
}

func (_c *MockvectorIndex_Drop_Call) Run(run func(ctx context.Context)) *MockvectorIndex_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockvectorIndex_Drop_Call) Return(_a0 error) *MockvectorIndex_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockvectorIndex_Drop_Call) RunAndReturn(run func(context.Context) error) *MockvectorIndex_Drop_Call {
	_c.Call.Return(run)
	return _c
}

// Dump provides a mock function with given fields: _a0
func (_m *MockvectorIndex) Dump(_a0 ...string) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockvectorIndex_Dump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dump'
type MockvectorIndex_Dump_Call struct {
	*mock.Call
}

// Dump is a helper method to define mock.On call
//   - _a0 ...string
func (_e *MockvectorIndex_Expecter) Dump(_a0 ...interface{}) *MockvectorIndex_Dump_Call {
	return &MockvectorIndex_Dump_Call{Call: _e.mock.On("Dump",
		append([]interface{}{}, _a0...)...)}
}

func (_c *MockvectorIndex_Dump_Call) Run(run func(_a0 ...string)) *MockvectorIndex_Dump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockvectorIndex_Dump_Call) Return() *MockvectorIndex_Dump_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockvectorIndex_Dump_Call) RunAndReturn(run func(...string)) *MockvectorIndex_Dump_Call {
	_c.Call.Return(run)
	return _c
}

// KnnSearchByVectorMaxDist provides a mock function with given fields: query, dist, ef, allowList
func (_m *MockvectorIndex) KnnSearchByVectorMaxDist(query []float32, dist float32, ef int, allowList helpers.AllowList) ([]uint64, error) {
	ret := _m.Called(query, dist, ef, allowList)

	if len(ret) == 0 {
		panic("no return value specified for KnnSearchByVectorMaxDist")
	}

	var r0 []uint64
	var r1 error
	if rf, ok := ret.Get(0).(func([]float32, float32, int, helpers.AllowList) ([]uint64, error)); ok {
		return rf(query, dist, ef, allowList)
	}
	if rf, ok := ret.Get(0).(func([]float32, float32, int, helpers.AllowList) []uint64); ok {
		r0 = rf(query, dist, ef, allowList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint64)
		}
	}

	if rf, ok := ret.Get(1).(func([]float32, float32, int, helpers.AllowList) error); ok {
		r1 = rf(query, dist, ef, allowList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorIndex_KnnSearchByVectorMaxDist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KnnSearchByVectorMaxDist'
type MockvectorIndex_KnnSearchByVectorMaxDist_Call struct {
	*mock.Call
}

// KnnSearchByVectorMaxDist is a helper method to define mock.On call
//   - query []float32
//   - dist float32
//   - ef int
//   - allowList helpers.AllowList
func (_e *MockvectorIndex_Expecter) KnnSearchByVectorMaxDist(query interface{}, dist interface{}, ef interface{}, allowList interface{}) *MockvectorIndex_KnnSearchByVectorMaxDist_Call {
	return &MockvectorIndex_KnnSearchByVectorMaxDist_Call{Call: _e.mock.On("KnnSearchByVectorMaxDist", query, dist, ef, allowList)}
}

func (_c *MockvectorIndex_KnnSearchByVectorMaxDist_Call) Run(run func(query []float32, dist float32, ef int, allowList helpers.AllowList)) *MockvectorIndex_KnnSearchByVectorMaxDist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32), args[1].(float32), args[2].(int), args[3].(helpers.AllowList))
	})
	return _c
}

func (_c *MockvectorIndex_KnnSearchByVectorMaxDist_Call) Return(_a0 []uint64, _a1 error) *MockvectorIndex_KnnSearchByVectorMaxDist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorIndex_KnnSearchByVectorMaxDist_Call) RunAndReturn(run func([]float32, float32, int, helpers.AllowList) ([]uint64, error)) *MockvectorIndex_KnnSearchByVectorMaxDist_Call {
	_c.Call.Return(run)
	return _c
}

// PostStartup provides a mock function with given fields:
func (_m *MockvectorIndex) PostStartup() {
	_m.Called()
}

// MockvectorIndex_PostStartup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostStartup'
type MockvectorIndex_PostStartup_Call struct {
	*mock.Call
}

// PostStartup is a helper method to define mock.On call
func (_e *MockvectorIndex_Expecter) PostStartup() *MockvectorIndex_PostStartup_Call {
	return &MockvectorIndex_PostStartup_Call{Call: _e.mock.On("PostStartup")}
}

func (_c *MockvectorIndex_PostStartup_Call) Run(run func()) *MockvectorIndex_PostStartup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockvectorIndex_PostStartup_Call) Return() *MockvectorIndex_PostStartup_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockvectorIndex_PostStartup_Call) RunAndReturn(run func()) *MockvectorIndex_PostStartup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockvectorIndex creates a new instance of MockvectorIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockvectorIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockvectorIndex {
	mock := &MockvectorIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
