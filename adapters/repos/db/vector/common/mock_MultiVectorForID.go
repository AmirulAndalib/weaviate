//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package common

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMultiVectorForID is an autogenerated mock type for the MultiVectorForID type
type MockMultiVectorForID struct {
	mock.Mock
}

type MockMultiVectorForID_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMultiVectorForID) EXPECT() *MockMultiVectorForID_Expecter {
	return &MockMultiVectorForID_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, ids
func (_m *MockMultiVectorForID) Execute(ctx context.Context, ids []uint64) ([][]float32, []error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 [][]float32
	var r1 []error
	if rf, ok := ret.Get(0).(func(context.Context, []uint64) ([][]float32, []error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint64) [][]float32); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint64) []error); ok {
		r1 = rf(ctx, ids)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}

	return r0, r1
}

// MockMultiVectorForID_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockMultiVectorForID_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uint64
func (_e *MockMultiVectorForID_Expecter) Execute(ctx interface{}, ids interface{}) *MockMultiVectorForID_Execute_Call {
	return &MockMultiVectorForID_Execute_Call{Call: _e.mock.On("Execute", ctx, ids)}
}

func (_c *MockMultiVectorForID_Execute_Call) Run(run func(ctx context.Context, ids []uint64)) *MockMultiVectorForID_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint64))
	})
	return _c
}

func (_c *MockMultiVectorForID_Execute_Call) Return(_a0 [][]float32, _a1 []error) *MockMultiVectorForID_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMultiVectorForID_Execute_Call) RunAndReturn(run func(context.Context, []uint64) ([][]float32, []error)) *MockMultiVectorForID_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMultiVectorForID creates a new instance of MockMultiVectorForID. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMultiVectorForID(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMultiVectorForID {
	mock := &MockMultiVectorForID{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
