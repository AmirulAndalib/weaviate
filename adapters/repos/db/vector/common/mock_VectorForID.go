//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package common

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockVectorForID is an autogenerated mock type for the VectorForID type
type MockVectorForID[T interface{ float32 | byte | uint64 }] struct {
	mock.Mock
}

type MockVectorForID_Expecter[T interface{ float32 | byte | uint64 }] struct {
	mock *mock.Mock
}

func (_m *MockVectorForID[T]) EXPECT() *MockVectorForID_Expecter[T] {
	return &MockVectorForID_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, id
func (_m *MockVectorForID[T]) Execute(ctx context.Context, id uint64) ([]T, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]T, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []T); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorForID_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockVectorForID_Execute_Call[T interface{ float32 | byte | uint64 }] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *MockVectorForID_Expecter[T]) Execute(ctx interface{}, id interface{}) *MockVectorForID_Execute_Call[T] {
	return &MockVectorForID_Execute_Call[T]{Call: _e.mock.On("Execute", ctx, id)}
}

func (_c *MockVectorForID_Execute_Call[T]) Run(run func(ctx context.Context, id uint64)) *MockVectorForID_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockVectorForID_Execute_Call[T]) Return(_a0 []T, _a1 error) *MockVectorForID_Execute_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorForID_Execute_Call[T]) RunAndReturn(run func(context.Context, uint64) ([]T, error)) *MockVectorForID_Execute_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockVectorForID creates a new instance of MockVectorForID. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVectorForID[T interface{ float32 | byte | uint64 }](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVectorForID[T] {
	mock := &MockVectorForID[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
