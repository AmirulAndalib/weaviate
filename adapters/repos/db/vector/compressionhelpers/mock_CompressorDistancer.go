//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package compressionhelpers

import mock "github.com/stretchr/testify/mock"

// MockCompressorDistancer is an autogenerated mock type for the CompressorDistancer type
type MockCompressorDistancer struct {
	mock.Mock
}

type MockCompressorDistancer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCompressorDistancer) EXPECT() *MockCompressorDistancer_Expecter {
	return &MockCompressorDistancer_Expecter{mock: &_m.Mock}
}

// DistanceToFloat provides a mock function with given fields: vec
func (_m *MockCompressorDistancer) DistanceToFloat(vec []float32) (float32, bool, error) {
	ret := _m.Called(vec)

	if len(ret) == 0 {
		panic("no return value specified for DistanceToFloat")
	}

	var r0 float32
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func([]float32) (float32, bool, error)); ok {
		return rf(vec)
	}
	if rf, ok := ret.Get(0).(func([]float32) float32); ok {
		r0 = rf(vec)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func([]float32) bool); ok {
		r1 = rf(vec)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func([]float32) error); ok {
		r2 = rf(vec)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockCompressorDistancer_DistanceToFloat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistanceToFloat'
type MockCompressorDistancer_DistanceToFloat_Call struct {
	*mock.Call
}

// DistanceToFloat is a helper method to define mock.On call
//   - vec []float32
func (_e *MockCompressorDistancer_Expecter) DistanceToFloat(vec interface{}) *MockCompressorDistancer_DistanceToFloat_Call {
	return &MockCompressorDistancer_DistanceToFloat_Call{Call: _e.mock.On("DistanceToFloat", vec)}
}

func (_c *MockCompressorDistancer_DistanceToFloat_Call) Run(run func(vec []float32)) *MockCompressorDistancer_DistanceToFloat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32))
	})
	return _c
}

func (_c *MockCompressorDistancer_DistanceToFloat_Call) Return(_a0 float32, _a1 bool, _a2 error) *MockCompressorDistancer_DistanceToFloat_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockCompressorDistancer_DistanceToFloat_Call) RunAndReturn(run func([]float32) (float32, bool, error)) *MockCompressorDistancer_DistanceToFloat_Call {
	_c.Call.Return(run)
	return _c
}

// DistanceToNode provides a mock function with given fields: id
func (_m *MockCompressorDistancer) DistanceToNode(id uint64) (float32, bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DistanceToNode")
	}

	var r0 float32
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64) (float32, bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) float32); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(uint64) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockCompressorDistancer_DistanceToNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistanceToNode'
type MockCompressorDistancer_DistanceToNode_Call struct {
	*mock.Call
}

// DistanceToNode is a helper method to define mock.On call
//   - id uint64
func (_e *MockCompressorDistancer_Expecter) DistanceToNode(id interface{}) *MockCompressorDistancer_DistanceToNode_Call {
	return &MockCompressorDistancer_DistanceToNode_Call{Call: _e.mock.On("DistanceToNode", id)}
}

func (_c *MockCompressorDistancer_DistanceToNode_Call) Run(run func(id uint64)) *MockCompressorDistancer_DistanceToNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockCompressorDistancer_DistanceToNode_Call) Return(_a0 float32, _a1 bool, _a2 error) *MockCompressorDistancer_DistanceToNode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockCompressorDistancer_DistanceToNode_Call) RunAndReturn(run func(uint64) (float32, bool, error)) *MockCompressorDistancer_DistanceToNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCompressorDistancer creates a new instance of MockCompressorDistancer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCompressorDistancer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCompressorDistancer {
	mock := &MockCompressorDistancer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
