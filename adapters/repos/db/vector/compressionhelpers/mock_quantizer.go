//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package compressionhelpers

import mock "github.com/stretchr/testify/mock"

// Mockquantizer is an autogenerated mock type for the quantizer type
type Mockquantizer[T interface{ byte | uint64 }] struct {
	mock.Mock
}

type Mockquantizer_Expecter[T interface{ byte | uint64 }] struct {
	mock *mock.Mock
}

func (_m *Mockquantizer[T]) EXPECT() *Mockquantizer_Expecter[T] {
	return &Mockquantizer_Expecter[T]{mock: &_m.Mock}
}

// CompressedBytes provides a mock function with given fields: compressed
func (_m *Mockquantizer[T]) CompressedBytes(compressed []T) []byte {
	ret := _m.Called(compressed)

	if len(ret) == 0 {
		panic("no return value specified for CompressedBytes")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]T) []byte); ok {
		r0 = rf(compressed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Mockquantizer_CompressedBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompressedBytes'
type Mockquantizer_CompressedBytes_Call[T interface{ byte | uint64 }] struct {
	*mock.Call
}

// CompressedBytes is a helper method to define mock.On call
//   - compressed []T
func (_e *Mockquantizer_Expecter[T]) CompressedBytes(compressed interface{}) *Mockquantizer_CompressedBytes_Call[T] {
	return &Mockquantizer_CompressedBytes_Call[T]{Call: _e.mock.On("CompressedBytes", compressed)}
}

func (_c *Mockquantizer_CompressedBytes_Call[T]) Run(run func(compressed []T)) *Mockquantizer_CompressedBytes_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]T))
	})
	return _c
}

func (_c *Mockquantizer_CompressedBytes_Call[T]) Return(_a0 []byte) *Mockquantizer_CompressedBytes_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockquantizer_CompressedBytes_Call[T]) RunAndReturn(run func([]T) []byte) *Mockquantizer_CompressedBytes_Call[T] {
	_c.Call.Return(run)
	return _c
}

// DistanceBetweenCompressedAndUncompressedVectors provides a mock function with given fields: x, encoded
func (_m *Mockquantizer[T]) DistanceBetweenCompressedAndUncompressedVectors(x []float32, encoded []T) (float32, error) {
	ret := _m.Called(x, encoded)

	if len(ret) == 0 {
		panic("no return value specified for DistanceBetweenCompressedAndUncompressedVectors")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func([]float32, []T) (float32, error)); ok {
		return rf(x, encoded)
	}
	if rf, ok := ret.Get(0).(func([]float32, []T) float32); ok {
		r0 = rf(x, encoded)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func([]float32, []T) error); ok {
		r1 = rf(x, encoded)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockquantizer_DistanceBetweenCompressedAndUncompressedVectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistanceBetweenCompressedAndUncompressedVectors'
type Mockquantizer_DistanceBetweenCompressedAndUncompressedVectors_Call[T interface{ byte | uint64 }] struct {
	*mock.Call
}

// DistanceBetweenCompressedAndUncompressedVectors is a helper method to define mock.On call
//   - x []float32
//   - encoded []T
func (_e *Mockquantizer_Expecter[T]) DistanceBetweenCompressedAndUncompressedVectors(x interface{}, encoded interface{}) *Mockquantizer_DistanceBetweenCompressedAndUncompressedVectors_Call[T] {
	return &Mockquantizer_DistanceBetweenCompressedAndUncompressedVectors_Call[T]{Call: _e.mock.On("DistanceBetweenCompressedAndUncompressedVectors", x, encoded)}
}

func (_c *Mockquantizer_DistanceBetweenCompressedAndUncompressedVectors_Call[T]) Run(run func(x []float32, encoded []T)) *Mockquantizer_DistanceBetweenCompressedAndUncompressedVectors_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32), args[1].([]T))
	})
	return _c
}

func (_c *Mockquantizer_DistanceBetweenCompressedAndUncompressedVectors_Call[T]) Return(_a0 float32, _a1 error) *Mockquantizer_DistanceBetweenCompressedAndUncompressedVectors_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockquantizer_DistanceBetweenCompressedAndUncompressedVectors_Call[T]) RunAndReturn(run func([]float32, []T) (float32, error)) *Mockquantizer_DistanceBetweenCompressedAndUncompressedVectors_Call[T] {
	_c.Call.Return(run)
	return _c
}

// DistanceBetweenCompressedVectors provides a mock function with given fields: x, y
func (_m *Mockquantizer[T]) DistanceBetweenCompressedVectors(x []T, y []T) (float32, error) {
	ret := _m.Called(x, y)

	if len(ret) == 0 {
		panic("no return value specified for DistanceBetweenCompressedVectors")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func([]T, []T) (float32, error)); ok {
		return rf(x, y)
	}
	if rf, ok := ret.Get(0).(func([]T, []T) float32); ok {
		r0 = rf(x, y)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func([]T, []T) error); ok {
		r1 = rf(x, y)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockquantizer_DistanceBetweenCompressedVectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistanceBetweenCompressedVectors'
type Mockquantizer_DistanceBetweenCompressedVectors_Call[T interface{ byte | uint64 }] struct {
	*mock.Call
}

// DistanceBetweenCompressedVectors is a helper method to define mock.On call
//   - x []T
//   - y []T
func (_e *Mockquantizer_Expecter[T]) DistanceBetweenCompressedVectors(x interface{}, y interface{}) *Mockquantizer_DistanceBetweenCompressedVectors_Call[T] {
	return &Mockquantizer_DistanceBetweenCompressedVectors_Call[T]{Call: _e.mock.On("DistanceBetweenCompressedVectors", x, y)}
}

func (_c *Mockquantizer_DistanceBetweenCompressedVectors_Call[T]) Run(run func(x []T, y []T)) *Mockquantizer_DistanceBetweenCompressedVectors_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]T), args[1].([]T))
	})
	return _c
}

func (_c *Mockquantizer_DistanceBetweenCompressedVectors_Call[T]) Return(_a0 float32, _a1 error) *Mockquantizer_DistanceBetweenCompressedVectors_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockquantizer_DistanceBetweenCompressedVectors_Call[T]) RunAndReturn(run func([]T, []T) (float32, error)) *Mockquantizer_DistanceBetweenCompressedVectors_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: vec
func (_m *Mockquantizer[T]) Encode(vec []float32) []T {
	ret := _m.Called(vec)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 []T
	if rf, ok := ret.Get(0).(func([]float32) []T); ok {
		r0 = rf(vec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	return r0
}

// Mockquantizer_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type Mockquantizer_Encode_Call[T interface{ byte | uint64 }] struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - vec []float32
func (_e *Mockquantizer_Expecter[T]) Encode(vec interface{}) *Mockquantizer_Encode_Call[T] {
	return &Mockquantizer_Encode_Call[T]{Call: _e.mock.On("Encode", vec)}
}

func (_c *Mockquantizer_Encode_Call[T]) Run(run func(vec []float32)) *Mockquantizer_Encode_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32))
	})
	return _c
}

func (_c *Mockquantizer_Encode_Call[T]) Return(_a0 []T) *Mockquantizer_Encode_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockquantizer_Encode_Call[T]) RunAndReturn(run func([]float32) []T) *Mockquantizer_Encode_Call[T] {
	_c.Call.Return(run)
	return _c
}

// ExposeFields provides a mock function with given fields:
func (_m *Mockquantizer[T]) ExposeFields() PQData {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExposeFields")
	}

	var r0 PQData
	if rf, ok := ret.Get(0).(func() PQData); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(PQData)
	}

	return r0
}

// Mockquantizer_ExposeFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExposeFields'
type Mockquantizer_ExposeFields_Call[T interface{ byte | uint64 }] struct {
	*mock.Call
}

// ExposeFields is a helper method to define mock.On call
func (_e *Mockquantizer_Expecter[T]) ExposeFields() *Mockquantizer_ExposeFields_Call[T] {
	return &Mockquantizer_ExposeFields_Call[T]{Call: _e.mock.On("ExposeFields")}
}

func (_c *Mockquantizer_ExposeFields_Call[T]) Run(run func()) *Mockquantizer_ExposeFields_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockquantizer_ExposeFields_Call[T]) Return(_a0 PQData) *Mockquantizer_ExposeFields_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockquantizer_ExposeFields_Call[T]) RunAndReturn(run func() PQData) *Mockquantizer_ExposeFields_Call[T] {
	_c.Call.Return(run)
	return _c
}

// FromCompressedBytes provides a mock function with given fields: compressed
func (_m *Mockquantizer[T]) FromCompressedBytes(compressed []byte) []T {
	ret := _m.Called(compressed)

	if len(ret) == 0 {
		panic("no return value specified for FromCompressedBytes")
	}

	var r0 []T
	if rf, ok := ret.Get(0).(func([]byte) []T); ok {
		r0 = rf(compressed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	return r0
}

// Mockquantizer_FromCompressedBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromCompressedBytes'
type Mockquantizer_FromCompressedBytes_Call[T interface{ byte | uint64 }] struct {
	*mock.Call
}

// FromCompressedBytes is a helper method to define mock.On call
//   - compressed []byte
func (_e *Mockquantizer_Expecter[T]) FromCompressedBytes(compressed interface{}) *Mockquantizer_FromCompressedBytes_Call[T] {
	return &Mockquantizer_FromCompressedBytes_Call[T]{Call: _e.mock.On("FromCompressedBytes", compressed)}
}

func (_c *Mockquantizer_FromCompressedBytes_Call[T]) Run(run func(compressed []byte)) *Mockquantizer_FromCompressedBytes_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Mockquantizer_FromCompressedBytes_Call[T]) Return(_a0 []T) *Mockquantizer_FromCompressedBytes_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockquantizer_FromCompressedBytes_Call[T]) RunAndReturn(run func([]byte) []T) *Mockquantizer_FromCompressedBytes_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewCompressedQuantizerDistancer provides a mock function with given fields: a
func (_m *Mockquantizer[T]) NewCompressedQuantizerDistancer(a []T) quantizerDistancer[T] {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for NewCompressedQuantizerDistancer")
	}

	var r0 quantizerDistancer[T]
	if rf, ok := ret.Get(0).(func([]T) quantizerDistancer[T]); ok {
		r0 = rf(a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(quantizerDistancer[T])
		}
	}

	return r0
}

// Mockquantizer_NewCompressedQuantizerDistancer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCompressedQuantizerDistancer'
type Mockquantizer_NewCompressedQuantizerDistancer_Call[T interface{ byte | uint64 }] struct {
	*mock.Call
}

// NewCompressedQuantizerDistancer is a helper method to define mock.On call
//   - a []T
func (_e *Mockquantizer_Expecter[T]) NewCompressedQuantizerDistancer(a interface{}) *Mockquantizer_NewCompressedQuantizerDistancer_Call[T] {
	return &Mockquantizer_NewCompressedQuantizerDistancer_Call[T]{Call: _e.mock.On("NewCompressedQuantizerDistancer", a)}
}

func (_c *Mockquantizer_NewCompressedQuantizerDistancer_Call[T]) Run(run func(a []T)) *Mockquantizer_NewCompressedQuantizerDistancer_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]T))
	})
	return _c
}

func (_c *Mockquantizer_NewCompressedQuantizerDistancer_Call[T]) Return(_a0 quantizerDistancer[T]) *Mockquantizer_NewCompressedQuantizerDistancer_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockquantizer_NewCompressedQuantizerDistancer_Call[T]) RunAndReturn(run func([]T) quantizerDistancer[T]) *Mockquantizer_NewCompressedQuantizerDistancer_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewQuantizerDistancer provides a mock function with given fields: a
func (_m *Mockquantizer[T]) NewQuantizerDistancer(a []float32) quantizerDistancer[T] {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for NewQuantizerDistancer")
	}

	var r0 quantizerDistancer[T]
	if rf, ok := ret.Get(0).(func([]float32) quantizerDistancer[T]); ok {
		r0 = rf(a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(quantizerDistancer[T])
		}
	}

	return r0
}

// Mockquantizer_NewQuantizerDistancer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewQuantizerDistancer'
type Mockquantizer_NewQuantizerDistancer_Call[T interface{ byte | uint64 }] struct {
	*mock.Call
}

// NewQuantizerDistancer is a helper method to define mock.On call
//   - a []float32
func (_e *Mockquantizer_Expecter[T]) NewQuantizerDistancer(a interface{}) *Mockquantizer_NewQuantizerDistancer_Call[T] {
	return &Mockquantizer_NewQuantizerDistancer_Call[T]{Call: _e.mock.On("NewQuantizerDistancer", a)}
}

func (_c *Mockquantizer_NewQuantizerDistancer_Call[T]) Run(run func(a []float32)) *Mockquantizer_NewQuantizerDistancer_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32))
	})
	return _c
}

func (_c *Mockquantizer_NewQuantizerDistancer_Call[T]) Return(_a0 quantizerDistancer[T]) *Mockquantizer_NewQuantizerDistancer_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockquantizer_NewQuantizerDistancer_Call[T]) RunAndReturn(run func([]float32) quantizerDistancer[T]) *Mockquantizer_NewQuantizerDistancer_Call[T] {
	_c.Call.Return(run)
	return _c
}

// ReturnQuantizerDistancer provides a mock function with given fields: distancer
func (_m *Mockquantizer[T]) ReturnQuantizerDistancer(distancer quantizerDistancer[T]) {
	_m.Called(distancer)
}

// Mockquantizer_ReturnQuantizerDistancer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnQuantizerDistancer'
type Mockquantizer_ReturnQuantizerDistancer_Call[T interface{ byte | uint64 }] struct {
	*mock.Call
}

// ReturnQuantizerDistancer is a helper method to define mock.On call
//   - distancer quantizerDistancer[T]
func (_e *Mockquantizer_Expecter[T]) ReturnQuantizerDistancer(distancer interface{}) *Mockquantizer_ReturnQuantizerDistancer_Call[T] {
	return &Mockquantizer_ReturnQuantizerDistancer_Call[T]{Call: _e.mock.On("ReturnQuantizerDistancer", distancer)}
}

func (_c *Mockquantizer_ReturnQuantizerDistancer_Call[T]) Run(run func(distancer quantizerDistancer[T])) *Mockquantizer_ReturnQuantizerDistancer_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(quantizerDistancer[T]))
	})
	return _c
}

func (_c *Mockquantizer_ReturnQuantizerDistancer_Call[T]) Return() *Mockquantizer_ReturnQuantizerDistancer_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *Mockquantizer_ReturnQuantizerDistancer_Call[T]) RunAndReturn(run func(quantizerDistancer[T])) *Mockquantizer_ReturnQuantizerDistancer_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockquantizer creates a new instance of Mockquantizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockquantizer[T interface{ byte | uint64 }](t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockquantizer[T] {
	mock := &Mockquantizer[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
