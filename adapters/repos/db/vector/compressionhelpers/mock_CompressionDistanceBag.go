//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package compressionhelpers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCompressionDistanceBag is an autogenerated mock type for the CompressionDistanceBag type
type MockCompressionDistanceBag struct {
	mock.Mock
}

type MockCompressionDistanceBag_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCompressionDistanceBag) EXPECT() *MockCompressionDistanceBag_Expecter {
	return &MockCompressionDistanceBag_Expecter{mock: &_m.Mock}
}

// Distance provides a mock function with given fields: x, y
func (_m *MockCompressionDistanceBag) Distance(x uint64, y uint64) (float32, error) {
	ret := _m.Called(x, y)

	if len(ret) == 0 {
		panic("no return value specified for Distance")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) (float32, error)); ok {
		return rf(x, y)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64) float32); ok {
		r0 = rf(x, y)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(x, y)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCompressionDistanceBag_Distance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Distance'
type MockCompressionDistanceBag_Distance_Call struct {
	*mock.Call
}

// Distance is a helper method to define mock.On call
//   - x uint64
//   - y uint64
func (_e *MockCompressionDistanceBag_Expecter) Distance(x interface{}, y interface{}) *MockCompressionDistanceBag_Distance_Call {
	return &MockCompressionDistanceBag_Distance_Call{Call: _e.mock.On("Distance", x, y)}
}

func (_c *MockCompressionDistanceBag_Distance_Call) Run(run func(x uint64, y uint64)) *MockCompressionDistanceBag_Distance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *MockCompressionDistanceBag_Distance_Call) Return(_a0 float32, _a1 error) *MockCompressionDistanceBag_Distance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCompressionDistanceBag_Distance_Call) RunAndReturn(run func(uint64, uint64) (float32, error)) *MockCompressionDistanceBag_Distance_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: ctx, id
func (_m *MockCompressionDistanceBag) Load(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCompressionDistanceBag_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockCompressionDistanceBag_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *MockCompressionDistanceBag_Expecter) Load(ctx interface{}, id interface{}) *MockCompressionDistanceBag_Load_Call {
	return &MockCompressionDistanceBag_Load_Call{Call: _e.mock.On("Load", ctx, id)}
}

func (_c *MockCompressionDistanceBag_Load_Call) Run(run func(ctx context.Context, id uint64)) *MockCompressionDistanceBag_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockCompressionDistanceBag_Load_Call) Return(_a0 error) *MockCompressionDistanceBag_Load_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCompressionDistanceBag_Load_Call) RunAndReturn(run func(context.Context, uint64) error) *MockCompressionDistanceBag_Load_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCompressionDistanceBag creates a new instance of MockCompressionDistanceBag. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCompressionDistanceBag(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCompressionDistanceBag {
	mock := &MockCompressionDistanceBag{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
