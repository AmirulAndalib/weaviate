//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package compressionhelpers

import mock "github.com/stretchr/testify/mock"

// Mockdistribution is an autogenerated mock type for the distribution type
type Mockdistribution struct {
	mock.Mock
}

type Mockdistribution_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockdistribution) EXPECT() *Mockdistribution_Expecter {
	return &Mockdistribution_Expecter{mock: &_m.Mock}
}

// CDF provides a mock function with given fields: x
func (_m *Mockdistribution) CDF(x float64) float64 {
	ret := _m.Called(x)

	if len(ret) == 0 {
		panic("no return value specified for CDF")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(float64) float64); ok {
		r0 = rf(x)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Mockdistribution_CDF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CDF'
type Mockdistribution_CDF_Call struct {
	*mock.Call
}

// CDF is a helper method to define mock.On call
//   - x float64
func (_e *Mockdistribution_Expecter) CDF(x interface{}) *Mockdistribution_CDF_Call {
	return &Mockdistribution_CDF_Call{Call: _e.mock.On("CDF", x)}
}

func (_c *Mockdistribution_CDF_Call) Run(run func(x float64)) *Mockdistribution_CDF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Mockdistribution_CDF_Call) Return(_a0 float64) *Mockdistribution_CDF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockdistribution_CDF_Call) RunAndReturn(run func(float64) float64) *Mockdistribution_CDF_Call {
	_c.Call.Return(run)
	return _c
}

// Quantile provides a mock function with given fields: x
func (_m *Mockdistribution) Quantile(x float64) float64 {
	ret := _m.Called(x)

	if len(ret) == 0 {
		panic("no return value specified for Quantile")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(float64) float64); ok {
		r0 = rf(x)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Mockdistribution_Quantile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Quantile'
type Mockdistribution_Quantile_Call struct {
	*mock.Call
}

// Quantile is a helper method to define mock.On call
//   - x float64
func (_e *Mockdistribution_Expecter) Quantile(x interface{}) *Mockdistribution_Quantile_Call {
	return &Mockdistribution_Quantile_Call{Call: _e.mock.On("Quantile", x)}
}

func (_c *Mockdistribution_Quantile_Call) Run(run func(x float64)) *Mockdistribution_Quantile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Mockdistribution_Quantile_Call) Return(_a0 float64) *Mockdistribution_Quantile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockdistribution_Quantile_Call) RunAndReturn(run func(float64) float64) *Mockdistribution_Quantile_Call {
	_c.Call.Return(run)
	return _c
}

// Transform provides a mock function with given fields: x
func (_m *Mockdistribution) Transform(x float64) float64 {
	ret := _m.Called(x)

	if len(ret) == 0 {
		panic("no return value specified for Transform")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(float64) float64); ok {
		r0 = rf(x)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Mockdistribution_Transform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transform'
type Mockdistribution_Transform_Call struct {
	*mock.Call
}

// Transform is a helper method to define mock.On call
//   - x float64
func (_e *Mockdistribution_Expecter) Transform(x interface{}) *Mockdistribution_Transform_Call {
	return &Mockdistribution_Transform_Call{Call: _e.mock.On("Transform", x)}
}

func (_c *Mockdistribution_Transform_Call) Run(run func(x float64)) *Mockdistribution_Transform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Mockdistribution_Transform_Call) Return(_a0 float64) *Mockdistribution_Transform_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockdistribution_Transform_Call) RunAndReturn(run func(float64) float64) *Mockdistribution_Transform_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdistribution creates a new instance of Mockdistribution. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdistribution(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockdistribution {
	mock := &Mockdistribution{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
