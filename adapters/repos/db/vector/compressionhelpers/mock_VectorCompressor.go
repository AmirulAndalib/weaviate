//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package compressionhelpers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockVectorCompressor is an autogenerated mock type for the VectorCompressor type
type MockVectorCompressor struct {
	mock.Mock
}

type MockVectorCompressor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVectorCompressor) EXPECT() *MockVectorCompressor_Expecter {
	return &MockVectorCompressor_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockVectorCompressor) Delete(ctx context.Context, id uint64) {
	_m.Called(ctx, id)
}

// MockVectorCompressor_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockVectorCompressor_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *MockVectorCompressor_Expecter) Delete(ctx interface{}, id interface{}) *MockVectorCompressor_Delete_Call {
	return &MockVectorCompressor_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockVectorCompressor_Delete_Call) Run(run func(ctx context.Context, id uint64)) *MockVectorCompressor_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockVectorCompressor_Delete_Call) Return() *MockVectorCompressor_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVectorCompressor_Delete_Call) RunAndReturn(run func(context.Context, uint64)) *MockVectorCompressor_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DistanceBetweenCompressedAndUncompressedVectorsFromID provides a mock function with given fields: ctx, x, y
func (_m *MockVectorCompressor) DistanceBetweenCompressedAndUncompressedVectorsFromID(ctx context.Context, x uint64, y []float32) (float32, error) {
	ret := _m.Called(ctx, x, y)

	if len(ret) == 0 {
		panic("no return value specified for DistanceBetweenCompressedAndUncompressedVectorsFromID")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []float32) (float32, error)); ok {
		return rf(ctx, x, y)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []float32) float32); ok {
		r0 = rf(ctx, x, y)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, []float32) error); ok {
		r1 = rf(ctx, x, y)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorCompressor_DistanceBetweenCompressedAndUncompressedVectorsFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistanceBetweenCompressedAndUncompressedVectorsFromID'
type MockVectorCompressor_DistanceBetweenCompressedAndUncompressedVectorsFromID_Call struct {
	*mock.Call
}

// DistanceBetweenCompressedAndUncompressedVectorsFromID is a helper method to define mock.On call
//   - ctx context.Context
//   - x uint64
//   - y []float32
func (_e *MockVectorCompressor_Expecter) DistanceBetweenCompressedAndUncompressedVectorsFromID(ctx interface{}, x interface{}, y interface{}) *MockVectorCompressor_DistanceBetweenCompressedAndUncompressedVectorsFromID_Call {
	return &MockVectorCompressor_DistanceBetweenCompressedAndUncompressedVectorsFromID_Call{Call: _e.mock.On("DistanceBetweenCompressedAndUncompressedVectorsFromID", ctx, x, y)}
}

func (_c *MockVectorCompressor_DistanceBetweenCompressedAndUncompressedVectorsFromID_Call) Run(run func(ctx context.Context, x uint64, y []float32)) *MockVectorCompressor_DistanceBetweenCompressedAndUncompressedVectorsFromID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].([]float32))
	})
	return _c
}

func (_c *MockVectorCompressor_DistanceBetweenCompressedAndUncompressedVectorsFromID_Call) Return(_a0 float32, _a1 error) *MockVectorCompressor_DistanceBetweenCompressedAndUncompressedVectorsFromID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorCompressor_DistanceBetweenCompressedAndUncompressedVectorsFromID_Call) RunAndReturn(run func(context.Context, uint64, []float32) (float32, error)) *MockVectorCompressor_DistanceBetweenCompressedAndUncompressedVectorsFromID_Call {
	_c.Call.Return(run)
	return _c
}

// DistanceBetweenCompressedVectorsFromIDs provides a mock function with given fields: ctx, x, y
func (_m *MockVectorCompressor) DistanceBetweenCompressedVectorsFromIDs(ctx context.Context, x uint64, y uint64) (float32, error) {
	ret := _m.Called(ctx, x, y)

	if len(ret) == 0 {
		panic("no return value specified for DistanceBetweenCompressedVectorsFromIDs")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) (float32, error)); ok {
		return rf(ctx, x, y)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) float32); ok {
		r0 = rf(ctx, x, y)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, x, y)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorCompressor_DistanceBetweenCompressedVectorsFromIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistanceBetweenCompressedVectorsFromIDs'
type MockVectorCompressor_DistanceBetweenCompressedVectorsFromIDs_Call struct {
	*mock.Call
}

// DistanceBetweenCompressedVectorsFromIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - x uint64
//   - y uint64
func (_e *MockVectorCompressor_Expecter) DistanceBetweenCompressedVectorsFromIDs(ctx interface{}, x interface{}, y interface{}) *MockVectorCompressor_DistanceBetweenCompressedVectorsFromIDs_Call {
	return &MockVectorCompressor_DistanceBetweenCompressedVectorsFromIDs_Call{Call: _e.mock.On("DistanceBetweenCompressedVectorsFromIDs", ctx, x, y)}
}

func (_c *MockVectorCompressor_DistanceBetweenCompressedVectorsFromIDs_Call) Run(run func(ctx context.Context, x uint64, y uint64)) *MockVectorCompressor_DistanceBetweenCompressedVectorsFromIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *MockVectorCompressor_DistanceBetweenCompressedVectorsFromIDs_Call) Return(_a0 float32, _a1 error) *MockVectorCompressor_DistanceBetweenCompressedVectorsFromIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorCompressor_DistanceBetweenCompressedVectorsFromIDs_Call) RunAndReturn(run func(context.Context, uint64, uint64) (float32, error)) *MockVectorCompressor_DistanceBetweenCompressedVectorsFromIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Drop provides a mock function with given fields:
func (_m *MockVectorCompressor) Drop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Drop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVectorCompressor_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type MockVectorCompressor_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
func (_e *MockVectorCompressor_Expecter) Drop() *MockVectorCompressor_Drop_Call {
	return &MockVectorCompressor_Drop_Call{Call: _e.mock.On("Drop")}
}

func (_c *MockVectorCompressor_Drop_Call) Run(run func()) *MockVectorCompressor_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVectorCompressor_Drop_Call) Return(_a0 error) *MockVectorCompressor_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorCompressor_Drop_Call) RunAndReturn(run func() error) *MockVectorCompressor_Drop_Call {
	_c.Call.Return(run)
	return _c
}

// ExposeFields provides a mock function with given fields:
func (_m *MockVectorCompressor) ExposeFields() PQData {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExposeFields")
	}

	var r0 PQData
	if rf, ok := ret.Get(0).(func() PQData); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(PQData)
	}

	return r0
}

// MockVectorCompressor_ExposeFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExposeFields'
type MockVectorCompressor_ExposeFields_Call struct {
	*mock.Call
}

// ExposeFields is a helper method to define mock.On call
func (_e *MockVectorCompressor_Expecter) ExposeFields() *MockVectorCompressor_ExposeFields_Call {
	return &MockVectorCompressor_ExposeFields_Call{Call: _e.mock.On("ExposeFields")}
}

func (_c *MockVectorCompressor_ExposeFields_Call) Run(run func()) *MockVectorCompressor_ExposeFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVectorCompressor_ExposeFields_Call) Return(_a0 PQData) *MockVectorCompressor_ExposeFields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorCompressor_ExposeFields_Call) RunAndReturn(run func() PQData) *MockVectorCompressor_ExposeFields_Call {
	_c.Call.Return(run)
	return _c
}

// GetCacheMaxSize provides a mock function with given fields:
func (_m *MockVectorCompressor) GetCacheMaxSize() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCacheMaxSize")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockVectorCompressor_GetCacheMaxSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCacheMaxSize'
type MockVectorCompressor_GetCacheMaxSize_Call struct {
	*mock.Call
}

// GetCacheMaxSize is a helper method to define mock.On call
func (_e *MockVectorCompressor_Expecter) GetCacheMaxSize() *MockVectorCompressor_GetCacheMaxSize_Call {
	return &MockVectorCompressor_GetCacheMaxSize_Call{Call: _e.mock.On("GetCacheMaxSize")}
}

func (_c *MockVectorCompressor_GetCacheMaxSize_Call) Run(run func()) *MockVectorCompressor_GetCacheMaxSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVectorCompressor_GetCacheMaxSize_Call) Return(_a0 int64) *MockVectorCompressor_GetCacheMaxSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorCompressor_GetCacheMaxSize_Call) RunAndReturn(run func() int64) *MockVectorCompressor_GetCacheMaxSize_Call {
	_c.Call.Return(run)
	return _c
}

// GrowCache provides a mock function with given fields: size
func (_m *MockVectorCompressor) GrowCache(size uint64) {
	_m.Called(size)
}

// MockVectorCompressor_GrowCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrowCache'
type MockVectorCompressor_GrowCache_Call struct {
	*mock.Call
}

// GrowCache is a helper method to define mock.On call
//   - size uint64
func (_e *MockVectorCompressor_Expecter) GrowCache(size interface{}) *MockVectorCompressor_GrowCache_Call {
	return &MockVectorCompressor_GrowCache_Call{Call: _e.mock.On("GrowCache", size)}
}

func (_c *MockVectorCompressor_GrowCache_Call) Run(run func(size uint64)) *MockVectorCompressor_GrowCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockVectorCompressor_GrowCache_Call) Return() *MockVectorCompressor_GrowCache_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVectorCompressor_GrowCache_Call) RunAndReturn(run func(uint64)) *MockVectorCompressor_GrowCache_Call {
	_c.Call.Return(run)
	return _c
}

// NewBag provides a mock function with given fields:
func (_m *MockVectorCompressor) NewBag() CompressionDistanceBag {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewBag")
	}

	var r0 CompressionDistanceBag
	if rf, ok := ret.Get(0).(func() CompressionDistanceBag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CompressionDistanceBag)
		}
	}

	return r0
}

// MockVectorCompressor_NewBag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewBag'
type MockVectorCompressor_NewBag_Call struct {
	*mock.Call
}

// NewBag is a helper method to define mock.On call
func (_e *MockVectorCompressor_Expecter) NewBag() *MockVectorCompressor_NewBag_Call {
	return &MockVectorCompressor_NewBag_Call{Call: _e.mock.On("NewBag")}
}

func (_c *MockVectorCompressor_NewBag_Call) Run(run func()) *MockVectorCompressor_NewBag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVectorCompressor_NewBag_Call) Return(_a0 CompressionDistanceBag) *MockVectorCompressor_NewBag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorCompressor_NewBag_Call) RunAndReturn(run func() CompressionDistanceBag) *MockVectorCompressor_NewBag_Call {
	_c.Call.Return(run)
	return _c
}

// NewDistancer provides a mock function with given fields: vector
func (_m *MockVectorCompressor) NewDistancer(vector []float32) (CompressorDistancer, ReturnDistancerFn) {
	ret := _m.Called(vector)

	if len(ret) == 0 {
		panic("no return value specified for NewDistancer")
	}

	var r0 CompressorDistancer
	var r1 ReturnDistancerFn
	if rf, ok := ret.Get(0).(func([]float32) (CompressorDistancer, ReturnDistancerFn)); ok {
		return rf(vector)
	}
	if rf, ok := ret.Get(0).(func([]float32) CompressorDistancer); ok {
		r0 = rf(vector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CompressorDistancer)
		}
	}

	if rf, ok := ret.Get(1).(func([]float32) ReturnDistancerFn); ok {
		r1 = rf(vector)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(ReturnDistancerFn)
		}
	}

	return r0, r1
}

// MockVectorCompressor_NewDistancer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDistancer'
type MockVectorCompressor_NewDistancer_Call struct {
	*mock.Call
}

// NewDistancer is a helper method to define mock.On call
//   - vector []float32
func (_e *MockVectorCompressor_Expecter) NewDistancer(vector interface{}) *MockVectorCompressor_NewDistancer_Call {
	return &MockVectorCompressor_NewDistancer_Call{Call: _e.mock.On("NewDistancer", vector)}
}

func (_c *MockVectorCompressor_NewDistancer_Call) Run(run func(vector []float32)) *MockVectorCompressor_NewDistancer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32))
	})
	return _c
}

func (_c *MockVectorCompressor_NewDistancer_Call) Return(_a0 CompressorDistancer, _a1 ReturnDistancerFn) *MockVectorCompressor_NewDistancer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorCompressor_NewDistancer_Call) RunAndReturn(run func([]float32) (CompressorDistancer, ReturnDistancerFn)) *MockVectorCompressor_NewDistancer_Call {
	_c.Call.Return(run)
	return _c
}

// NewDistancerFromID provides a mock function with given fields: id
func (_m *MockVectorCompressor) NewDistancerFromID(id uint64) (CompressorDistancer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for NewDistancerFromID")
	}

	var r0 CompressorDistancer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (CompressorDistancer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) CompressorDistancer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CompressorDistancer)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorCompressor_NewDistancerFromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDistancerFromID'
type MockVectorCompressor_NewDistancerFromID_Call struct {
	*mock.Call
}

// NewDistancerFromID is a helper method to define mock.On call
//   - id uint64
func (_e *MockVectorCompressor_Expecter) NewDistancerFromID(id interface{}) *MockVectorCompressor_NewDistancerFromID_Call {
	return &MockVectorCompressor_NewDistancerFromID_Call{Call: _e.mock.On("NewDistancerFromID", id)}
}

func (_c *MockVectorCompressor_NewDistancerFromID_Call) Run(run func(id uint64)) *MockVectorCompressor_NewDistancerFromID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockVectorCompressor_NewDistancerFromID_Call) Return(_a0 CompressorDistancer, _a1 error) *MockVectorCompressor_NewDistancerFromID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorCompressor_NewDistancerFromID_Call) RunAndReturn(run func(uint64) (CompressorDistancer, error)) *MockVectorCompressor_NewDistancerFromID_Call {
	_c.Call.Return(run)
	return _c
}

// Prefetch provides a mock function with given fields: id
func (_m *MockVectorCompressor) Prefetch(id uint64) {
	_m.Called(id)
}

// MockVectorCompressor_Prefetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prefetch'
type MockVectorCompressor_Prefetch_Call struct {
	*mock.Call
}

// Prefetch is a helper method to define mock.On call
//   - id uint64
func (_e *MockVectorCompressor_Expecter) Prefetch(id interface{}) *MockVectorCompressor_Prefetch_Call {
	return &MockVectorCompressor_Prefetch_Call{Call: _e.mock.On("Prefetch", id)}
}

func (_c *MockVectorCompressor_Prefetch_Call) Run(run func(id uint64)) *MockVectorCompressor_Prefetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockVectorCompressor_Prefetch_Call) Return() *MockVectorCompressor_Prefetch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVectorCompressor_Prefetch_Call) RunAndReturn(run func(uint64)) *MockVectorCompressor_Prefetch_Call {
	_c.Call.Return(run)
	return _c
}

// PrefillCache provides a mock function with given fields:
func (_m *MockVectorCompressor) PrefillCache() {
	_m.Called()
}

// MockVectorCompressor_PrefillCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrefillCache'
type MockVectorCompressor_PrefillCache_Call struct {
	*mock.Call
}

// PrefillCache is a helper method to define mock.On call
func (_e *MockVectorCompressor_Expecter) PrefillCache() *MockVectorCompressor_PrefillCache_Call {
	return &MockVectorCompressor_PrefillCache_Call{Call: _e.mock.On("PrefillCache")}
}

func (_c *MockVectorCompressor_PrefillCache_Call) Run(run func()) *MockVectorCompressor_PrefillCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVectorCompressor_PrefillCache_Call) Return() *MockVectorCompressor_PrefillCache_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVectorCompressor_PrefillCache_Call) RunAndReturn(run func()) *MockVectorCompressor_PrefillCache_Call {
	_c.Call.Return(run)
	return _c
}

// Preload provides a mock function with given fields: id, vector
func (_m *MockVectorCompressor) Preload(id uint64, vector []float32) {
	_m.Called(id, vector)
}

// MockVectorCompressor_Preload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Preload'
type MockVectorCompressor_Preload_Call struct {
	*mock.Call
}

// Preload is a helper method to define mock.On call
//   - id uint64
//   - vector []float32
func (_e *MockVectorCompressor_Expecter) Preload(id interface{}, vector interface{}) *MockVectorCompressor_Preload_Call {
	return &MockVectorCompressor_Preload_Call{Call: _e.mock.On("Preload", id, vector)}
}

func (_c *MockVectorCompressor_Preload_Call) Run(run func(id uint64, vector []float32)) *MockVectorCompressor_Preload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].([]float32))
	})
	return _c
}

func (_c *MockVectorCompressor_Preload_Call) Return() *MockVectorCompressor_Preload_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVectorCompressor_Preload_Call) RunAndReturn(run func(uint64, []float32)) *MockVectorCompressor_Preload_Call {
	_c.Call.Return(run)
	return _c
}

// SetCacheMaxSize provides a mock function with given fields: size
func (_m *MockVectorCompressor) SetCacheMaxSize(size int64) {
	_m.Called(size)
}

// MockVectorCompressor_SetCacheMaxSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCacheMaxSize'
type MockVectorCompressor_SetCacheMaxSize_Call struct {
	*mock.Call
}

// SetCacheMaxSize is a helper method to define mock.On call
//   - size int64
func (_e *MockVectorCompressor_Expecter) SetCacheMaxSize(size interface{}) *MockVectorCompressor_SetCacheMaxSize_Call {
	return &MockVectorCompressor_SetCacheMaxSize_Call{Call: _e.mock.On("SetCacheMaxSize", size)}
}

func (_c *MockVectorCompressor_SetCacheMaxSize_Call) Run(run func(size int64)) *MockVectorCompressor_SetCacheMaxSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockVectorCompressor_SetCacheMaxSize_Call) Return() *MockVectorCompressor_SetCacheMaxSize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVectorCompressor_SetCacheMaxSize_Call) RunAndReturn(run func(int64)) *MockVectorCompressor_SetCacheMaxSize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVectorCompressor creates a new instance of MockVectorCompressor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVectorCompressor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVectorCompressor {
	mock := &MockVectorCompressor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
