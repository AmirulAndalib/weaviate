//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package compressionhelpers

import mock "github.com/stretchr/testify/mock"

// MockPQEncoder is an autogenerated mock type for the PQEncoder type
type MockPQEncoder struct {
	mock.Mock
}

type MockPQEncoder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPQEncoder) EXPECT() *MockPQEncoder_Expecter {
	return &MockPQEncoder_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: x
func (_m *MockPQEncoder) Add(x []float32) {
	_m.Called(x)
}

// MockPQEncoder_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockPQEncoder_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - x []float32
func (_e *MockPQEncoder_Expecter) Add(x interface{}) *MockPQEncoder_Add_Call {
	return &MockPQEncoder_Add_Call{Call: _e.mock.On("Add", x)}
}

func (_c *MockPQEncoder_Add_Call) Run(run func(x []float32)) *MockPQEncoder_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32))
	})
	return _c
}

func (_c *MockPQEncoder_Add_Call) Return() *MockPQEncoder_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPQEncoder_Add_Call) RunAndReturn(run func([]float32)) *MockPQEncoder_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Centroid provides a mock function with given fields: b
func (_m *MockPQEncoder) Centroid(b byte) []float32 {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Centroid")
	}

	var r0 []float32
	if rf, ok := ret.Get(0).(func(byte) []float32); ok {
		r0 = rf(b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	return r0
}

// MockPQEncoder_Centroid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Centroid'
type MockPQEncoder_Centroid_Call struct {
	*mock.Call
}

// Centroid is a helper method to define mock.On call
//   - b byte
func (_e *MockPQEncoder_Expecter) Centroid(b interface{}) *MockPQEncoder_Centroid_Call {
	return &MockPQEncoder_Centroid_Call{Call: _e.mock.On("Centroid", b)}
}

func (_c *MockPQEncoder_Centroid_Call) Run(run func(b byte)) *MockPQEncoder_Centroid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte))
	})
	return _c
}

func (_c *MockPQEncoder_Centroid_Call) Return(_a0 []float32) *MockPQEncoder_Centroid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPQEncoder_Centroid_Call) RunAndReturn(run func(byte) []float32) *MockPQEncoder_Centroid_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: x
func (_m *MockPQEncoder) Encode(x []float32) byte {
	ret := _m.Called(x)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 byte
	if rf, ok := ret.Get(0).(func([]float32) byte); ok {
		r0 = rf(x)
	} else {
		r0 = ret.Get(0).(byte)
	}

	return r0
}

// MockPQEncoder_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockPQEncoder_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - x []float32
func (_e *MockPQEncoder_Expecter) Encode(x interface{}) *MockPQEncoder_Encode_Call {
	return &MockPQEncoder_Encode_Call{Call: _e.mock.On("Encode", x)}
}

func (_c *MockPQEncoder_Encode_Call) Run(run func(x []float32)) *MockPQEncoder_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32))
	})
	return _c
}

func (_c *MockPQEncoder_Encode_Call) Return(_a0 byte) *MockPQEncoder_Encode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPQEncoder_Encode_Call) RunAndReturn(run func([]float32) byte) *MockPQEncoder_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// ExposeDataForRestore provides a mock function with given fields:
func (_m *MockPQEncoder) ExposeDataForRestore() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExposeDataForRestore")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockPQEncoder_ExposeDataForRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExposeDataForRestore'
type MockPQEncoder_ExposeDataForRestore_Call struct {
	*mock.Call
}

// ExposeDataForRestore is a helper method to define mock.On call
func (_e *MockPQEncoder_Expecter) ExposeDataForRestore() *MockPQEncoder_ExposeDataForRestore_Call {
	return &MockPQEncoder_ExposeDataForRestore_Call{Call: _e.mock.On("ExposeDataForRestore")}
}

func (_c *MockPQEncoder_ExposeDataForRestore_Call) Run(run func()) *MockPQEncoder_ExposeDataForRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPQEncoder_ExposeDataForRestore_Call) Return(_a0 []byte) *MockPQEncoder_ExposeDataForRestore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPQEncoder_ExposeDataForRestore_Call) RunAndReturn(run func() []byte) *MockPQEncoder_ExposeDataForRestore_Call {
	_c.Call.Return(run)
	return _c
}

// Fit provides a mock function with given fields: data
func (_m *MockPQEncoder) Fit(data [][]float32) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Fit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([][]float32) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPQEncoder_Fit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fit'
type MockPQEncoder_Fit_Call struct {
	*mock.Call
}

// Fit is a helper method to define mock.On call
//   - data [][]float32
func (_e *MockPQEncoder_Expecter) Fit(data interface{}) *MockPQEncoder_Fit_Call {
	return &MockPQEncoder_Fit_Call{Call: _e.mock.On("Fit", data)}
}

func (_c *MockPQEncoder_Fit_Call) Run(run func(data [][]float32)) *MockPQEncoder_Fit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([][]float32))
	})
	return _c
}

func (_c *MockPQEncoder_Fit_Call) Return(_a0 error) *MockPQEncoder_Fit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPQEncoder_Fit_Call) RunAndReturn(run func([][]float32) error) *MockPQEncoder_Fit_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPQEncoder creates a new instance of MockPQEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPQEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPQEncoder {
	mock := &MockPQEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
