//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package hnsw

import (
	context "context"

	compressionhelpers "github.com/weaviate/weaviate/adapters/repos/db/vector/compressionhelpers"

	mock "github.com/stretchr/testify/mock"
)

// MockCommitLogger is an autogenerated mock type for the CommitLogger type
type MockCommitLogger struct {
	mock.Mock
}

type MockCommitLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommitLogger) EXPECT() *MockCommitLogger_Expecter {
	return &MockCommitLogger_Expecter{mock: &_m.Mock}
}

// AddLinkAtLevel provides a mock function with given fields: nodeid, level, target
func (_m *MockCommitLogger) AddLinkAtLevel(nodeid uint64, level int, target uint64) error {
	ret := _m.Called(nodeid, level, target)

	if len(ret) == 0 {
		panic("no return value specified for AddLinkAtLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, int, uint64) error); ok {
		r0 = rf(nodeid, level, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_AddLinkAtLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLinkAtLevel'
type MockCommitLogger_AddLinkAtLevel_Call struct {
	*mock.Call
}

// AddLinkAtLevel is a helper method to define mock.On call
//   - nodeid uint64
//   - level int
//   - target uint64
func (_e *MockCommitLogger_Expecter) AddLinkAtLevel(nodeid interface{}, level interface{}, target interface{}) *MockCommitLogger_AddLinkAtLevel_Call {
	return &MockCommitLogger_AddLinkAtLevel_Call{Call: _e.mock.On("AddLinkAtLevel", nodeid, level, target)}
}

func (_c *MockCommitLogger_AddLinkAtLevel_Call) Run(run func(nodeid uint64, level int, target uint64)) *MockCommitLogger_AddLinkAtLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(int), args[2].(uint64))
	})
	return _c
}

func (_c *MockCommitLogger_AddLinkAtLevel_Call) Return(_a0 error) *MockCommitLogger_AddLinkAtLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_AddLinkAtLevel_Call) RunAndReturn(run func(uint64, int, uint64) error) *MockCommitLogger_AddLinkAtLevel_Call {
	_c.Call.Return(run)
	return _c
}

// AddNode provides a mock function with given fields: node
func (_m *MockCommitLogger) AddNode(node *vertex) error {
	ret := _m.Called(node)

	if len(ret) == 0 {
		panic("no return value specified for AddNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*vertex) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_AddNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNode'
type MockCommitLogger_AddNode_Call struct {
	*mock.Call
}

// AddNode is a helper method to define mock.On call
//   - node *vertex
func (_e *MockCommitLogger_Expecter) AddNode(node interface{}) *MockCommitLogger_AddNode_Call {
	return &MockCommitLogger_AddNode_Call{Call: _e.mock.On("AddNode", node)}
}

func (_c *MockCommitLogger_AddNode_Call) Run(run func(node *vertex)) *MockCommitLogger_AddNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*vertex))
	})
	return _c
}

func (_c *MockCommitLogger_AddNode_Call) Return(_a0 error) *MockCommitLogger_AddNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_AddNode_Call) RunAndReturn(run func(*vertex) error) *MockCommitLogger_AddNode_Call {
	_c.Call.Return(run)
	return _c
}

// AddPQ provides a mock function with given fields: _a0
func (_m *MockCommitLogger) AddPQ(_a0 compressionhelpers.PQData) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddPQ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(compressionhelpers.PQData) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_AddPQ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPQ'
type MockCommitLogger_AddPQ_Call struct {
	*mock.Call
}

// AddPQ is a helper method to define mock.On call
//   - _a0 compressionhelpers.PQData
func (_e *MockCommitLogger_Expecter) AddPQ(_a0 interface{}) *MockCommitLogger_AddPQ_Call {
	return &MockCommitLogger_AddPQ_Call{Call: _e.mock.On("AddPQ", _a0)}
}

func (_c *MockCommitLogger_AddPQ_Call) Run(run func(_a0 compressionhelpers.PQData)) *MockCommitLogger_AddPQ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(compressionhelpers.PQData))
	})
	return _c
}

func (_c *MockCommitLogger_AddPQ_Call) Return(_a0 error) *MockCommitLogger_AddPQ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_AddPQ_Call) RunAndReturn(run func(compressionhelpers.PQData) error) *MockCommitLogger_AddPQ_Call {
	_c.Call.Return(run)
	return _c
}

// AddTombstone provides a mock function with given fields: nodeid
func (_m *MockCommitLogger) AddTombstone(nodeid uint64) error {
	ret := _m.Called(nodeid)

	if len(ret) == 0 {
		panic("no return value specified for AddTombstone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(nodeid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_AddTombstone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTombstone'
type MockCommitLogger_AddTombstone_Call struct {
	*mock.Call
}

// AddTombstone is a helper method to define mock.On call
//   - nodeid uint64
func (_e *MockCommitLogger_Expecter) AddTombstone(nodeid interface{}) *MockCommitLogger_AddTombstone_Call {
	return &MockCommitLogger_AddTombstone_Call{Call: _e.mock.On("AddTombstone", nodeid)}
}

func (_c *MockCommitLogger_AddTombstone_Call) Run(run func(nodeid uint64)) *MockCommitLogger_AddTombstone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockCommitLogger_AddTombstone_Call) Return(_a0 error) *MockCommitLogger_AddTombstone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_AddTombstone_Call) RunAndReturn(run func(uint64) error) *MockCommitLogger_AddTombstone_Call {
	_c.Call.Return(run)
	return _c
}

// ClearLinks provides a mock function with given fields: nodeid
func (_m *MockCommitLogger) ClearLinks(nodeid uint64) error {
	ret := _m.Called(nodeid)

	if len(ret) == 0 {
		panic("no return value specified for ClearLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(nodeid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_ClearLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearLinks'
type MockCommitLogger_ClearLinks_Call struct {
	*mock.Call
}

// ClearLinks is a helper method to define mock.On call
//   - nodeid uint64
func (_e *MockCommitLogger_Expecter) ClearLinks(nodeid interface{}) *MockCommitLogger_ClearLinks_Call {
	return &MockCommitLogger_ClearLinks_Call{Call: _e.mock.On("ClearLinks", nodeid)}
}

func (_c *MockCommitLogger_ClearLinks_Call) Run(run func(nodeid uint64)) *MockCommitLogger_ClearLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockCommitLogger_ClearLinks_Call) Return(_a0 error) *MockCommitLogger_ClearLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_ClearLinks_Call) RunAndReturn(run func(uint64) error) *MockCommitLogger_ClearLinks_Call {
	_c.Call.Return(run)
	return _c
}

// ClearLinksAtLevel provides a mock function with given fields: nodeid, level
func (_m *MockCommitLogger) ClearLinksAtLevel(nodeid uint64, level uint16) error {
	ret := _m.Called(nodeid, level)

	if len(ret) == 0 {
		panic("no return value specified for ClearLinksAtLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint16) error); ok {
		r0 = rf(nodeid, level)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_ClearLinksAtLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearLinksAtLevel'
type MockCommitLogger_ClearLinksAtLevel_Call struct {
	*mock.Call
}

// ClearLinksAtLevel is a helper method to define mock.On call
//   - nodeid uint64
//   - level uint16
func (_e *MockCommitLogger_Expecter) ClearLinksAtLevel(nodeid interface{}, level interface{}) *MockCommitLogger_ClearLinksAtLevel_Call {
	return &MockCommitLogger_ClearLinksAtLevel_Call{Call: _e.mock.On("ClearLinksAtLevel", nodeid, level)}
}

func (_c *MockCommitLogger_ClearLinksAtLevel_Call) Run(run func(nodeid uint64, level uint16)) *MockCommitLogger_ClearLinksAtLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint16))
	})
	return _c
}

func (_c *MockCommitLogger_ClearLinksAtLevel_Call) Return(_a0 error) *MockCommitLogger_ClearLinksAtLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_ClearLinksAtLevel_Call) RunAndReturn(run func(uint64, uint16) error) *MockCommitLogger_ClearLinksAtLevel_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNode provides a mock function with given fields: nodeid
func (_m *MockCommitLogger) DeleteNode(nodeid uint64) error {
	ret := _m.Called(nodeid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(nodeid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_DeleteNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNode'
type MockCommitLogger_DeleteNode_Call struct {
	*mock.Call
}

// DeleteNode is a helper method to define mock.On call
//   - nodeid uint64
func (_e *MockCommitLogger_Expecter) DeleteNode(nodeid interface{}) *MockCommitLogger_DeleteNode_Call {
	return &MockCommitLogger_DeleteNode_Call{Call: _e.mock.On("DeleteNode", nodeid)}
}

func (_c *MockCommitLogger_DeleteNode_Call) Run(run func(nodeid uint64)) *MockCommitLogger_DeleteNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockCommitLogger_DeleteNode_Call) Return(_a0 error) *MockCommitLogger_DeleteNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_DeleteNode_Call) RunAndReturn(run func(uint64) error) *MockCommitLogger_DeleteNode_Call {
	_c.Call.Return(run)
	return _c
}

// Drop provides a mock function with given fields: ctx
func (_m *MockCommitLogger) Drop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Drop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type MockCommitLogger_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCommitLogger_Expecter) Drop(ctx interface{}) *MockCommitLogger_Drop_Call {
	return &MockCommitLogger_Drop_Call{Call: _e.mock.On("Drop", ctx)}
}

func (_c *MockCommitLogger_Drop_Call) Run(run func(ctx context.Context)) *MockCommitLogger_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCommitLogger_Drop_Call) Return(_a0 error) *MockCommitLogger_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_Drop_Call) RunAndReturn(run func(context.Context) error) *MockCommitLogger_Drop_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields:
func (_m *MockCommitLogger) Flush() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockCommitLogger_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockCommitLogger_Expecter) Flush() *MockCommitLogger_Flush_Call {
	return &MockCommitLogger_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockCommitLogger_Flush_Call) Run(run func()) *MockCommitLogger_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommitLogger_Flush_Call) Return(_a0 error) *MockCommitLogger_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_Flush_Call) RunAndReturn(run func() error) *MockCommitLogger_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with given fields:
func (_m *MockCommitLogger) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCommitLogger_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockCommitLogger_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockCommitLogger_Expecter) ID() *MockCommitLogger_ID_Call {
	return &MockCommitLogger_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockCommitLogger_ID_Call) Run(run func()) *MockCommitLogger_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommitLogger_ID_Call) Return(_a0 string) *MockCommitLogger_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_ID_Call) RunAndReturn(run func() string) *MockCommitLogger_ID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTombstone provides a mock function with given fields: nodeid
func (_m *MockCommitLogger) RemoveTombstone(nodeid uint64) error {
	ret := _m.Called(nodeid)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTombstone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(nodeid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_RemoveTombstone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTombstone'
type MockCommitLogger_RemoveTombstone_Call struct {
	*mock.Call
}

// RemoveTombstone is a helper method to define mock.On call
//   - nodeid uint64
func (_e *MockCommitLogger_Expecter) RemoveTombstone(nodeid interface{}) *MockCommitLogger_RemoveTombstone_Call {
	return &MockCommitLogger_RemoveTombstone_Call{Call: _e.mock.On("RemoveTombstone", nodeid)}
}

func (_c *MockCommitLogger_RemoveTombstone_Call) Run(run func(nodeid uint64)) *MockCommitLogger_RemoveTombstone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockCommitLogger_RemoveTombstone_Call) Return(_a0 error) *MockCommitLogger_RemoveTombstone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_RemoveTombstone_Call) RunAndReturn(run func(uint64) error) *MockCommitLogger_RemoveTombstone_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceLinksAtLevel provides a mock function with given fields: nodeid, level, targets
func (_m *MockCommitLogger) ReplaceLinksAtLevel(nodeid uint64, level int, targets []uint64) error {
	ret := _m.Called(nodeid, level, targets)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceLinksAtLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, int, []uint64) error); ok {
		r0 = rf(nodeid, level, targets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_ReplaceLinksAtLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceLinksAtLevel'
type MockCommitLogger_ReplaceLinksAtLevel_Call struct {
	*mock.Call
}

// ReplaceLinksAtLevel is a helper method to define mock.On call
//   - nodeid uint64
//   - level int
//   - targets []uint64
func (_e *MockCommitLogger_Expecter) ReplaceLinksAtLevel(nodeid interface{}, level interface{}, targets interface{}) *MockCommitLogger_ReplaceLinksAtLevel_Call {
	return &MockCommitLogger_ReplaceLinksAtLevel_Call{Call: _e.mock.On("ReplaceLinksAtLevel", nodeid, level, targets)}
}

func (_c *MockCommitLogger_ReplaceLinksAtLevel_Call) Run(run func(nodeid uint64, level int, targets []uint64)) *MockCommitLogger_ReplaceLinksAtLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(int), args[2].([]uint64))
	})
	return _c
}

func (_c *MockCommitLogger_ReplaceLinksAtLevel_Call) Return(_a0 error) *MockCommitLogger_ReplaceLinksAtLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_ReplaceLinksAtLevel_Call) RunAndReturn(run func(uint64, int, []uint64) error) *MockCommitLogger_ReplaceLinksAtLevel_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *MockCommitLogger) Reset() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockCommitLogger_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockCommitLogger_Expecter) Reset() *MockCommitLogger_Reset_Call {
	return &MockCommitLogger_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockCommitLogger_Reset_Call) Run(run func()) *MockCommitLogger_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommitLogger_Reset_Call) Return(_a0 error) *MockCommitLogger_Reset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_Reset_Call) RunAndReturn(run func() error) *MockCommitLogger_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// RootPath provides a mock function with given fields:
func (_m *MockCommitLogger) RootPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RootPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCommitLogger_RootPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RootPath'
type MockCommitLogger_RootPath_Call struct {
	*mock.Call
}

// RootPath is a helper method to define mock.On call
func (_e *MockCommitLogger_Expecter) RootPath() *MockCommitLogger_RootPath_Call {
	return &MockCommitLogger_RootPath_Call{Call: _e.mock.On("RootPath")}
}

func (_c *MockCommitLogger_RootPath_Call) Run(run func()) *MockCommitLogger_RootPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommitLogger_RootPath_Call) Return(_a0 string) *MockCommitLogger_RootPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_RootPath_Call) RunAndReturn(run func() string) *MockCommitLogger_RootPath_Call {
	_c.Call.Return(run)
	return _c
}

// SetEntryPointWithMaxLayer provides a mock function with given fields: id, level
func (_m *MockCommitLogger) SetEntryPointWithMaxLayer(id uint64, level int) error {
	ret := _m.Called(id, level)

	if len(ret) == 0 {
		panic("no return value specified for SetEntryPointWithMaxLayer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, int) error); ok {
		r0 = rf(id, level)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_SetEntryPointWithMaxLayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEntryPointWithMaxLayer'
type MockCommitLogger_SetEntryPointWithMaxLayer_Call struct {
	*mock.Call
}

// SetEntryPointWithMaxLayer is a helper method to define mock.On call
//   - id uint64
//   - level int
func (_e *MockCommitLogger_Expecter) SetEntryPointWithMaxLayer(id interface{}, level interface{}) *MockCommitLogger_SetEntryPointWithMaxLayer_Call {
	return &MockCommitLogger_SetEntryPointWithMaxLayer_Call{Call: _e.mock.On("SetEntryPointWithMaxLayer", id, level)}
}

func (_c *MockCommitLogger_SetEntryPointWithMaxLayer_Call) Run(run func(id uint64, level int)) *MockCommitLogger_SetEntryPointWithMaxLayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(int))
	})
	return _c
}

func (_c *MockCommitLogger_SetEntryPointWithMaxLayer_Call) Return(_a0 error) *MockCommitLogger_SetEntryPointWithMaxLayer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_SetEntryPointWithMaxLayer_Call) RunAndReturn(run func(uint64, int) error) *MockCommitLogger_SetEntryPointWithMaxLayer_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *MockCommitLogger) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockCommitLogger_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCommitLogger_Expecter) Shutdown(ctx interface{}) *MockCommitLogger_Shutdown_Call {
	return &MockCommitLogger_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockCommitLogger_Shutdown_Call) Run(run func(ctx context.Context)) *MockCommitLogger_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCommitLogger_Shutdown_Call) Return(_a0 error) *MockCommitLogger_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_Shutdown_Call) RunAndReturn(run func(context.Context) error) *MockCommitLogger_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// SwitchCommitLogs provides a mock function with given fields: _a0
func (_m *MockCommitLogger) SwitchCommitLogs(_a0 bool) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SwitchCommitLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommitLogger_SwitchCommitLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwitchCommitLogs'
type MockCommitLogger_SwitchCommitLogs_Call struct {
	*mock.Call
}

// SwitchCommitLogs is a helper method to define mock.On call
//   - _a0 bool
func (_e *MockCommitLogger_Expecter) SwitchCommitLogs(_a0 interface{}) *MockCommitLogger_SwitchCommitLogs_Call {
	return &MockCommitLogger_SwitchCommitLogs_Call{Call: _e.mock.On("SwitchCommitLogs", _a0)}
}

func (_c *MockCommitLogger_SwitchCommitLogs_Call) Run(run func(_a0 bool)) *MockCommitLogger_SwitchCommitLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockCommitLogger_SwitchCommitLogs_Call) Return(_a0 error) *MockCommitLogger_SwitchCommitLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommitLogger_SwitchCommitLogs_Call) RunAndReturn(run func(bool) error) *MockCommitLogger_SwitchCommitLogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommitLogger creates a new instance of MockCommitLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommitLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommitLogger {
	mock := &MockCommitLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
