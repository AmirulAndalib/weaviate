//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package hnsw

import mock "github.com/stretchr/testify/mock"

// MockCondensor is an autogenerated mock type for the Condensor type
type MockCondensor struct {
	mock.Mock
}

type MockCondensor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCondensor) EXPECT() *MockCondensor_Expecter {
	return &MockCondensor_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: filename
func (_m *MockCondensor) Do(filename string) error {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCondensor_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockCondensor_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - filename string
func (_e *MockCondensor_Expecter) Do(filename interface{}) *MockCondensor_Do_Call {
	return &MockCondensor_Do_Call{Call: _e.mock.On("Do", filename)}
}

func (_c *MockCondensor_Do_Call) Run(run func(filename string)) *MockCondensor_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCondensor_Do_Call) Return(_a0 error) *MockCondensor_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCondensor_Do_Call) RunAndReturn(run func(string) error) *MockCondensor_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCondensor creates a new instance of MockCondensor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCondensor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCondensor {
	mock := &MockCondensor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
