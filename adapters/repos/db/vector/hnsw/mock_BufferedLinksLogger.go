//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package hnsw

import mock "github.com/stretchr/testify/mock"

// MockBufferedLinksLogger is an autogenerated mock type for the BufferedLinksLogger type
type MockBufferedLinksLogger struct {
	mock.Mock
}

type MockBufferedLinksLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBufferedLinksLogger) EXPECT() *MockBufferedLinksLogger_Expecter {
	return &MockBufferedLinksLogger_Expecter{mock: &_m.Mock}
}

// AddLinkAtLevel provides a mock function with given fields: nodeid, level, target
func (_m *MockBufferedLinksLogger) AddLinkAtLevel(nodeid uint64, level int, target uint64) error {
	ret := _m.Called(nodeid, level, target)

	if len(ret) == 0 {
		panic("no return value specified for AddLinkAtLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, int, uint64) error); ok {
		r0 = rf(nodeid, level, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBufferedLinksLogger_AddLinkAtLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLinkAtLevel'
type MockBufferedLinksLogger_AddLinkAtLevel_Call struct {
	*mock.Call
}

// AddLinkAtLevel is a helper method to define mock.On call
//   - nodeid uint64
//   - level int
//   - target uint64
func (_e *MockBufferedLinksLogger_Expecter) AddLinkAtLevel(nodeid interface{}, level interface{}, target interface{}) *MockBufferedLinksLogger_AddLinkAtLevel_Call {
	return &MockBufferedLinksLogger_AddLinkAtLevel_Call{Call: _e.mock.On("AddLinkAtLevel", nodeid, level, target)}
}

func (_c *MockBufferedLinksLogger_AddLinkAtLevel_Call) Run(run func(nodeid uint64, level int, target uint64)) *MockBufferedLinksLogger_AddLinkAtLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(int), args[2].(uint64))
	})
	return _c
}

func (_c *MockBufferedLinksLogger_AddLinkAtLevel_Call) Return(_a0 error) *MockBufferedLinksLogger_AddLinkAtLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBufferedLinksLogger_AddLinkAtLevel_Call) RunAndReturn(run func(uint64, int, uint64) error) *MockBufferedLinksLogger_AddLinkAtLevel_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockBufferedLinksLogger) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBufferedLinksLogger_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockBufferedLinksLogger_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockBufferedLinksLogger_Expecter) Close() *MockBufferedLinksLogger_Close_Call {
	return &MockBufferedLinksLogger_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockBufferedLinksLogger_Close_Call) Run(run func()) *MockBufferedLinksLogger_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBufferedLinksLogger_Close_Call) Return(_a0 error) *MockBufferedLinksLogger_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBufferedLinksLogger_Close_Call) RunAndReturn(run func() error) *MockBufferedLinksLogger_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceLinksAtLevel provides a mock function with given fields: nodeid, level, targets
func (_m *MockBufferedLinksLogger) ReplaceLinksAtLevel(nodeid uint64, level int, targets []uint64) error {
	ret := _m.Called(nodeid, level, targets)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceLinksAtLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, int, []uint64) error); ok {
		r0 = rf(nodeid, level, targets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBufferedLinksLogger_ReplaceLinksAtLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceLinksAtLevel'
type MockBufferedLinksLogger_ReplaceLinksAtLevel_Call struct {
	*mock.Call
}

// ReplaceLinksAtLevel is a helper method to define mock.On call
//   - nodeid uint64
//   - level int
//   - targets []uint64
func (_e *MockBufferedLinksLogger_Expecter) ReplaceLinksAtLevel(nodeid interface{}, level interface{}, targets interface{}) *MockBufferedLinksLogger_ReplaceLinksAtLevel_Call {
	return &MockBufferedLinksLogger_ReplaceLinksAtLevel_Call{Call: _e.mock.On("ReplaceLinksAtLevel", nodeid, level, targets)}
}

func (_c *MockBufferedLinksLogger_ReplaceLinksAtLevel_Call) Run(run func(nodeid uint64, level int, targets []uint64)) *MockBufferedLinksLogger_ReplaceLinksAtLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(int), args[2].([]uint64))
	})
	return _c
}

func (_c *MockBufferedLinksLogger_ReplaceLinksAtLevel_Call) Return(_a0 error) *MockBufferedLinksLogger_ReplaceLinksAtLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBufferedLinksLogger_ReplaceLinksAtLevel_Call) RunAndReturn(run func(uint64, int, []uint64) error) *MockBufferedLinksLogger_ReplaceLinksAtLevel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBufferedLinksLogger creates a new instance of MockBufferedLinksLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBufferedLinksLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBufferedLinksLogger {
	mock := &MockBufferedLinksLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
