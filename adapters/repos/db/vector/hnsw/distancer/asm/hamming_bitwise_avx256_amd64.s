//go:build !noasm && amd64
// AUTO-GENERATED BY GOAT -- DO NOT EDIT

TEXT ·popcnt_lookup_64bit(SB), $0-32
	MOVQ data+0(FP), DI
	MOVQ n+8(FP), SI
	MOVQ lookup64bit+16(FP), DX
	BYTE $0x55                  // pushq	%rbp
	WORD $0x8948; BYTE $0xe5    // movq	%rsp, %rbp
	LONG $0xf0e48348            // andq	$-16, %rsp
	LONG $0x50ec8348            // subq	$80, %rsp
	WORD $0x8b4c; BYTE $0x16    // movq	(%rsi), %r10
	LONG $0x04fa8349            // cmpq	$4, %r10
	JAE  LBB0_9
	WORD $0xc031                // xorl	%eax, %eax
	WORD $0x3145; BYTE $0xdb    // xorl	%r11d, %r11d
	JMP  LBB0_2

LBB0_9:
	WORD $0xc931 // xorl	%ecx, %ecx
	WORD $0xc031 // xorl	%eax, %eax

LBB0_10:
	LONG $0x0f34b60f             // movzbl	(%rdi,%rcx), %esi
	LONG $0xf2040348             // addq	(%rdx,%rsi,8), %rax
	LONG $0x0f74b60f; BYTE $0x01 // movzbl	1(%rdi,%rcx), %esi
	LONG $0xf2040348             // addq	(%rdx,%rsi,8), %rax
	LONG $0x0f74b60f; BYTE $0x02 // movzbl	2(%rdi,%rcx), %esi
	LONG $0xf2040348             // addq	(%rdx,%rsi,8), %rax
	LONG $0x0f74b60f; BYTE $0x03 // movzbl	3(%rdi,%rcx), %esi
	LONG $0xf2040348             // addq	(%rdx,%rsi,8), %rax
	LONG $0x04598d4c             // leaq	4(%rcx), %r11
	LONG $0x08c18348             // addq	$8, %rcx
	WORD $0x394c; BYTE $0xd1     // cmpq	%r10, %rcx
	WORD $0x894c; BYTE $0xd9     // movq	%r11, %rcx
	JBE  LBB0_10

LBB0_2:
	WORD $0x894d; BYTE $0xd0     // movq	%r10, %r8
	WORD $0x294d; BYTE $0xd8     // subq	%r11, %r8
	JBE  LBB0_8
	LONG $0x10f88349             // cmpq	$16, %r8
	JB   LBB0_7
	WORD $0x894d; BYTE $0xc1     // movq	%r8, %r9
	LONG $0xf0e18349             // andq	$-16, %r9
	LONG $0x6ef961c4; BYTE $0xe0 // vmovq	%rax, %xmm12
	LONG $0x3b048d49             // leaq	(%r11,%rdi), %rax
	LONG $0x0fc08348             // addq	$15, %rax
	WORD $0x014d; BYTE $0xcb     // addq	%r9, %r11
	LONG $0xef0941c4; BYTE $0xf6 // vpxor	%xmm14, %xmm14, %xmm14
	WORD $0xc931                 // xorl	%ecx, %ecx
	LONG $0xd2efe9c5             // vpxor	%xmm2, %xmm2, %xmm2
	LONG $0xdbefe1c5             // vpxor	%xmm3, %xmm3, %xmm3

LBB0_5:
	LONG $0x0874b60f; BYTE $0xf4   // movzbl	-12(%rax,%rcx), %esi
	LONG $0x1c7e7ac5; BYTE $0xf2   // vmovq	(%rdx,%rsi,8), %xmm11           # xmm11 = mem[0],zero
	LONG $0x0874b60f; BYTE $0xf3   // movzbl	-13(%rax,%rcx), %esi
	LONG $0x2c7e7ac5; BYTE $0xf2   // vmovq	(%rdx,%rsi,8), %xmm13           # xmm13 = mem[0],zero
	LONG $0x0874b60f; BYTE $0xf2   // movzbl	-14(%rax,%rcx), %esi
	LONG $0x0410fbc5; BYTE $0xf2   // vmovsd	(%rdx,%rsi,8), %xmm0            # xmm0 = mem[0],zero
	LONG $0x4429f8c5; WORD $0x3024 // vmovaps	%xmm0, 48(%rsp)                 # 16-byte Spill
	LONG $0x0874b60f; BYTE $0xf1   // movzbl	-15(%rax,%rcx), %esi
	LONG $0x0410fbc5; BYTE $0xf2   // vmovsd	(%rdx,%rsi,8), %xmm0            # xmm0 = mem[0],zero
	LONG $0x4429f8c5; WORD $0x4024 // vmovaps	%xmm0, 64(%rsp)                 # 16-byte Spill
	LONG $0x0874b60f; BYTE $0xf8   // movzbl	-8(%rax,%rcx), %esi
	LONG $0x0410fbc5; BYTE $0xf2   // vmovsd	(%rdx,%rsi,8), %xmm0            # xmm0 = mem[0],zero
	LONG $0x4429f8c5; WORD $0x2024 // vmovaps	%xmm0, 32(%rsp)                 # 16-byte Spill
	LONG $0x0874b60f; BYTE $0xf7   // movzbl	-9(%rax,%rcx), %esi
	LONG $0x0410fbc5; BYTE $0xf2   // vmovsd	(%rdx,%rsi,8), %xmm0            # xmm0 = mem[0],zero
	LONG $0x4429f8c5; WORD $0x1024 // vmovaps	%xmm0, 16(%rsp)                 # 16-byte Spill
	LONG $0x0874b60f; BYTE $0xf6   // movzbl	-10(%rax,%rcx), %esi
	LONG $0x0410fbc5; BYTE $0xf2   // vmovsd	(%rdx,%rsi,8), %xmm0            # xmm0 = mem[0],zero
	LONG $0x0429f8c5; BYTE $0x24   // vmovaps	%xmm0, (%rsp)                   # 16-byte Spill
	LONG $0x0874b60f; BYTE $0xf5   // movzbl	-11(%rax,%rcx), %esi
	LONG $0x3c7e7ac5; BYTE $0xf2   // vmovq	(%rdx,%rsi,8), %xmm15           # xmm15 = mem[0],zero
	LONG $0x0874b60f; BYTE $0xfc   // movzbl	-4(%rax,%rcx), %esi
	LONG $0x247efac5; BYTE $0xf2   // vmovq	(%rdx,%rsi,8), %xmm4            # xmm4 = mem[0],zero
	LONG $0x0874b60f; BYTE $0xfb   // movzbl	-5(%rax,%rcx), %esi
	LONG $0x2c7efac5; BYTE $0xf2   // vmovq	(%rdx,%rsi,8), %xmm5            # xmm5 = mem[0],zero
	LONG $0x0874b60f; BYTE $0xfa   // movzbl	-6(%rax,%rcx), %esi
	LONG $0x347efac5; BYTE $0xf2   // vmovq	(%rdx,%rsi,8), %xmm6            # xmm6 = mem[0],zero
	LONG $0x0874b60f; BYTE $0xf9   // movzbl	-7(%rax,%rcx), %esi
	LONG $0x3c7efac5; BYTE $0xf2   // vmovq	(%rdx,%rsi,8), %xmm7            # xmm7 = mem[0],zero
	LONG $0x0834b60f               // movzbl	(%rax,%rcx), %esi
	LONG $0x047efac5; BYTE $0xf2   // vmovq	(%rdx,%rsi,8), %xmm0            # xmm0 = mem[0],zero
	LONG $0x0874b60f; BYTE $0xff   // movzbl	-1(%rax,%rcx), %esi
	LONG $0x047e7ac5; BYTE $0xf2   // vmovq	(%rdx,%rsi,8), %xmm8            # xmm8 = mem[0],zero
	LONG $0x0874b60f; BYTE $0xfe   // movzbl	-2(%rax,%rcx), %esi
	LONG $0x0c7e7ac5; BYTE $0xf2   // vmovq	(%rdx,%rsi,8), %xmm9            # xmm9 = mem[0],zero
	LONG $0x0874b60f; BYTE $0xfd   // movzbl	-3(%rax,%rcx), %esi
	LONG $0x147e7ac5; BYTE $0xf2   // vmovq	(%rdx,%rsi,8), %xmm10           # xmm10 = mem[0],zero
	LONG $0x6c1141c4; BYTE $0xdb   // vpunpcklqdq	%xmm11, %xmm13, %xmm11  # xmm11 = xmm13[0],xmm11[0]
	LONG $0x4c6ff9c5; WORD $0x4024 // vmovdqa	64(%rsp), %xmm1                 # 16-byte Reload
	LONG $0x6c6c71c5; WORD $0x3024 // vpunpcklqdq	48(%rsp), %xmm1, %xmm13 # 16-byte Folded Reload
	LONG $0x381543c4; WORD $0x01db // vinserti128	$1, %xmm11, %ymm13, %ymm11
	LONG $0xd42541c4; BYTE $0xe4   // vpaddq	%ymm12, %ymm11, %ymm12
	LONG $0x4c6ff9c5; WORD $0x1024 // vmovdqa	16(%rsp), %xmm1                 # 16-byte Reload
	LONG $0x4c6cf1c5; WORD $0x2024 // vpunpcklqdq	32(%rsp), %xmm1, %xmm1  # 16-byte Folded Reload
	LONG $0x1c6c01c5; BYTE $0x24   // vpunpcklqdq	(%rsp), %xmm15, %xmm11  # 16-byte Folded Reload
	LONG $0x3825e3c4; WORD $0x01c9 // vinserti128	$1, %xmm1, %ymm11, %ymm1
	LONG $0xf1d40dc5               // vpaddq	%ymm1, %ymm14, %ymm14
	LONG $0xcc6cd1c5               // vpunpcklqdq	%xmm4, %xmm5, %xmm1     # xmm1 = xmm5[0],xmm4[0]
	LONG $0xe66cc1c5               // vpunpcklqdq	%xmm6, %xmm7, %xmm4     # xmm4 = xmm7[0],xmm6[0]
	LONG $0x385de3c4; WORD $0x01c9 // vinserti128	$1, %xmm1, %ymm4, %ymm1
	LONG $0xd2d4f5c5               // vpaddq	%ymm2, %ymm1, %ymm2
	LONG $0xc06cb9c5               // vpunpcklqdq	%xmm0, %xmm8, %xmm0     # xmm0 = xmm8[0],xmm0[0]
	LONG $0x6c29c1c4; BYTE $0xc9   // vpunpcklqdq	%xmm9, %xmm10, %xmm1    # xmm1 = xmm10[0],xmm9[0]
	LONG $0x3875e3c4; WORD $0x01c0 // vinserti128	$1, %xmm0, %ymm1, %ymm0
	LONG $0xdbd4fdc5               // vpaddq	%ymm3, %ymm0, %ymm3
	LONG $0x10c18348               // addq	$16, %rcx
	WORD $0x3949; BYTE $0xc9       // cmpq	%rcx, %r9
	JNE  LBB0_5
	LONG $0xd40dc1c4; BYTE $0xc4   // vpaddq	%ymm12, %ymm14, %ymm0
	LONG $0xc0d4edc5               // vpaddq	%ymm0, %ymm2, %ymm0
	LONG $0xc0d4e5c5               // vpaddq	%ymm0, %ymm3, %ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128	$1, %ymm0, %xmm1
	LONG $0xc1d4f9c5               // vpaddq	%xmm1, %xmm0, %xmm0
	LONG $0xc870f9c5; BYTE $0xee   // vpshufd	$238, %xmm0, %xmm1              # xmm1 = xmm0[2,3,2,3]
	LONG $0xc1d4f9c5               // vpaddq	%xmm1, %xmm0, %xmm0
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq	%xmm0, %rax
	WORD $0x394d; BYTE $0xc8       // cmpq	%r9, %r8
	JE   LBB0_8

LBB0_7:
	LONG $0x0cb60f42; BYTE $0x1f // movzbl	(%rdi,%r11), %ecx
	LONG $0xca040348             // addq	(%rdx,%rcx,8), %rax
	LONG $0x01c38349             // addq	$1, %r11
	WORD $0x394d; BYTE $0xda     // cmpq	%r11, %r10
	JNE  LBB0_7

LBB0_8:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

TEXT ·popcount(SB), $0-32
	MOVQ x+0(FP), DI
	MOVQ lookup64bit+8(FP), SI
	BYTE $0x55                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5   // movq	%rsp, %rbp
	LONG $0xf8e48348           // andq	$-8, %rsp
	WORD $0xb60f; BYTE $0x0f   // movzbl	(%rdi), %ecx
	LONG $0x0147b60f           // movzbl	1(%rdi), %eax
	LONG $0xc6048b48           // movq	(%rsi,%rax,8), %rax
	LONG $0xce040348           // addq	(%rsi,%rcx,8), %rax
	LONG $0x024fb60f           // movzbl	2(%rdi), %ecx
	LONG $0xce040348           // addq	(%rsi,%rcx,8), %rax
	LONG $0x034fb60f           // movzbl	3(%rdi), %ecx
	LONG $0xce040348           // addq	(%rsi,%rcx,8), %rax
	LONG $0x044fb60f           // movzbl	4(%rdi), %ecx
	LONG $0xce040348           // addq	(%rsi,%rcx,8), %rax
	LONG $0x054fb60f           // movzbl	5(%rdi), %ecx
	LONG $0xce040348           // addq	(%rsi,%rcx,8), %rax
	LONG $0x064fb60f           // movzbl	6(%rdi), %ecx
	LONG $0xce040348           // addq	(%rsi,%rcx,8), %rax
	LONG $0x074fb60f           // movzbl	7(%rdi), %ecx
	LONG $0xce040348           // addq	(%rsi,%rcx,8), %rax
	WORD $0x8948; BYTE $0xec   // movq	%rbp, %rsp
	BYTE $0x5d                 // popq	%rbp
	BYTE $0xc3                 // retq

TEXT ·hamming_bitwise_256(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ res+16(FP), DX
	MOVQ len+24(FP), CX
	MOVQ lookup64bit+32(FP), R8
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	WORD $0x5741                               // pushq	%r15
	WORD $0x5641                               // pushq	%r14
	WORD $0x5541                               // pushq	%r13
	WORD $0x5441                               // pushq	%r12
	BYTE $0x53                                 // pushq	%rbx
	LONG $0xe0e48348                           // andq	$-32, %rsp
	LONG $0xe0ec8148; WORD $0x0000; BYTE $0x00 // subq	$224, %rsp
	WORD $0x8949; BYTE $0xd2                   // movq	%rdx, %r10
	WORD $0x198b                               // movl	(%rcx), %ebx
	WORD $0xfb83; BYTE $0x10                   // cmpl	$16, %ebx
	JL   LBB2_1
	QUAD $0x000000a82494894c                   // movq	%r10, 168(%rsp)                 # 8-byte Spill
	WORD $0xc031                               // xorl	%eax, %eax

LBB2_9:
	QUAD $0x000000b0249c8948       // movq	%rbx, 176(%rsp)                 # 8-byte Spill
	QUAD $0x000000b824bc8948       // movq	%rdi, 184(%rsp)                 # 8-byte Spill
	QUAD $0x000000c024b48948       // movq	%rsi, 192(%rsp)                 # 8-byte Spill
	LONG $0x066ffec5               // vmovdqu	(%rsi), %ymm0
	LONG $0x4e10fcc5; BYTE $0x20   // vmovups	32(%rsi), %ymm1
	LONG $0x5610fcc5; BYTE $0x40   // vmovups	64(%rsi), %ymm2
	LONG $0x5e10fcc5; BYTE $0x60   // vmovups	96(%rsi), %ymm3
	LONG $0x07effdc5               // vpxor	(%rdi), %ymm0, %ymm0
	LONG $0x4f57f4c5; BYTE $0x20   // vxorps	32(%rdi), %ymm1, %ymm1
	LONG $0x5757ecc5; BYTE $0x40   // vxorps	64(%rdi), %ymm2, %ymm2
	LONG $0x5f57e4c5; BYTE $0x60   // vxorps	96(%rdi), %ymm3, %ymm3
	LONG $0x047ffdc5; BYTE $0x24   // vmovdqa	%ymm0, (%rsp)
	LONG $0x4c29fcc5; WORD $0x6024 // vmovaps	%ymm1, 96(%rsp)
	LONG $0x5429fcc5; WORD $0x4024 // vmovaps	%ymm2, 64(%rsp)
	LONG $0x5c29fcc5; WORD $0x2024 // vmovaps	%ymm3, 32(%rsp)
	LONG $0x7ef9e1c4; BYTE $0xc2   // vmovq	%xmm0, %rdx
	LONG $0x1479e3c4; WORD $0x01c3 // vpextrb	$1, %xmm0, %ebx
	LONG $0x1479c3c4; WORD $0x02c1 // vpextrb	$2, %xmm0, %r9d
	LONG $0x1479c3c4; WORD $0x03c3 // vpextrb	$3, %xmm0, %r11d
	LONG $0x1479c3c4; WORD $0x04c4 // vpextrb	$4, %xmm0, %r12d
	LONG $0x1479e3c4; WORD $0x05c1 // vpextrb	$5, %xmm0, %ecx
	WORD $0xb60f; BYTE $0xd2       // movzbl	%dl, %edx
	LONG $0x1479c3c4; WORD $0x06c7 // vpextrb	$6, %xmm0, %r15d
	LONG $0xd0148b4d               // movq	(%r8,%rdx,8), %r10
	LONG $0x1479e3c4; WORD $0x07c2 // vpextrb	$7, %xmm0, %edx
	LONG $0xd814034d               // addq	(%r8,%rbx,8), %r10
	LONG $0x1479e3c4; WORD $0x08c6 // vpextrb	$8, %xmm0, %esi
	QUAD $0x000000a024b48948       // movq	%rsi, 160(%rsp)                 # 8-byte Spill
	LONG $0xc814034f               // addq	(%r8,%r9,8), %r10
	LONG $0x1479c3c4; WORD $0x09c5 // vpextrb	$9, %xmm0, %r13d
	LONG $0xd814034f               // addq	(%r8,%r11,8), %r10
	LONG $0x1479e3c4; WORD $0x0ac6 // vpextrb	$10, %xmm0, %esi
	QUAD $0x0000009824b48948       // movq	%rsi, 152(%rsp)                 # 8-byte Spill
	LONG $0xe014034f               // addq	(%r8,%r12,8), %r10
	LONG $0x74b60f44; WORD $0x0b24 // movzbl	11(%rsp), %r14d
	LONG $0x5cb60f44; WORD $0x6024 // movzbl	96(%rsp), %r11d
	LONG $0x64b60f44; WORD $0x6124 // movzbl	97(%rsp), %r12d
	LONG $0xd81c8b4f               // movq	(%r8,%r11,8), %r11
	LONG $0xe01c034f               // addq	(%r8,%r12,8), %r11
	LONG $0xc814034d               // addq	(%r8,%rcx,8), %r10
	LONG $0x4cb60f44; WORD $0x0c24 // movzbl	12(%rsp), %r9d
	LONG $0x245cb60f; BYTE $0x62   // movzbl	98(%rsp), %ebx
	LONG $0xd81c034d               // addq	(%r8,%rbx,8), %r11
	LONG $0x244cb60f; BYTE $0x0d   // movzbl	13(%rsp), %ecx
	LONG $0x245cb60f; BYTE $0x63   // movzbl	99(%rsp), %ebx
	LONG $0xf814034f               // addq	(%r8,%r15,8), %r10
	LONG $0xd81c034d               // addq	(%r8,%rbx,8), %r11
	LONG $0xd014034d               // addq	(%r8,%rdx,8), %r10
	LONG $0x247cb60f; BYTE $0x0e   // movzbl	14(%rsp), %edi
	LONG $0x245cb60f; BYTE $0x64   // movzbl	100(%rsp), %ebx
	LONG $0xd81c034d               // addq	(%r8,%rbx,8), %r11
	LONG $0x2454b60f; BYTE $0x0f   // movzbl	15(%rsp), %edx
	LONG $0x245cb60f; BYTE $0x65   // movzbl	101(%rsp), %ebx
	QUAD $0x000000a024b48b48       // movq	160(%rsp), %rsi                 # 8-byte Reload
	LONG $0xf014034d               // addq	(%r8,%rsi,8), %r10
	LONG $0xd81c034d               // addq	(%r8,%rbx,8), %r11
	LONG $0xe814034f               // addq	(%r8,%r13,8), %r10
	LONG $0x7cb60f44; WORD $0x1024 // movzbl	16(%rsp), %r15d
	LONG $0x245cb60f; BYTE $0x66   // movzbl	102(%rsp), %ebx
	LONG $0xd81c034d               // addq	(%r8,%rbx,8), %r11
	LONG $0x6cb60f44; WORD $0x1124 // movzbl	17(%rsp), %r13d
	LONG $0x64b60f44; WORD $0x6724 // movzbl	103(%rsp), %r12d
	QUAD $0x0000009824b48b48       // movq	152(%rsp), %rsi                 # 8-byte Reload
	LONG $0xf014034d               // addq	(%r8,%rsi,8), %r10
	LONG $0xe01c034f               // addq	(%r8,%r12,8), %r11
	LONG $0xf014034f               // addq	(%r8,%r14,8), %r10
	LONG $0x74b60f44; WORD $0x1224 // movzbl	18(%rsp), %r14d
	LONG $0x245cb60f; BYTE $0x68   // movzbl	104(%rsp), %ebx
	LONG $0xd81c034d               // addq	(%r8,%rbx,8), %r11
	LONG $0x64b60f44; WORD $0x1324 // movzbl	19(%rsp), %r12d
	LONG $0x245cb60f; BYTE $0x69   // movzbl	105(%rsp), %ebx
	LONG $0xc814034f               // addq	(%r8,%r9,8), %r10
	LONG $0xd81c034d               // addq	(%r8,%rbx,8), %r11
	LONG $0xc814034d               // addq	(%r8,%rcx,8), %r10
	LONG $0x244cb60f; BYTE $0x14   // movzbl	20(%rsp), %ecx
	QUAD $0x00000098248c8948       // movq	%rcx, 152(%rsp)                 # 8-byte Spill
	LONG $0x244cb60f; BYTE $0x6a   // movzbl	106(%rsp), %ecx
	LONG $0xc81c034d               // addq	(%r8,%rcx,8), %r11
	LONG $0x244cb60f; BYTE $0x15   // movzbl	21(%rsp), %ecx
	QUAD $0x000000a0248c8948       // movq	%rcx, 160(%rsp)                 # 8-byte Spill
	LONG $0x244cb60f; BYTE $0x6b   // movzbl	107(%rsp), %ecx
	LONG $0xf814034d               // addq	(%r8,%rdi,8), %r10
	LONG $0xc81c034d               // addq	(%r8,%rcx,8), %r11
	LONG $0xd014034d               // addq	(%r8,%rdx,8), %r10
	LONG $0x4cb60f44; WORD $0x6c24 // movzbl	108(%rsp), %r9d
	LONG $0x244cb60f; BYTE $0x40   // movzbl	64(%rsp), %ecx
	LONG $0x2454b60f; BYTE $0x41   // movzbl	65(%rsp), %edx
	LONG $0xc80c8b49               // movq	(%r8,%rcx,8), %rcx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0xc81c034f               // addq	(%r8,%r9,8), %r11
	LONG $0x4cb60f44; WORD $0x1624 // movzbl	22(%rsp), %r9d
	LONG $0x2454b60f; BYTE $0x6d   // movzbl	109(%rsp), %edx
	LONG $0xf814034f               // addq	(%r8,%r15,8), %r10
	LONG $0x247cb60f; BYTE $0x42   // movzbl	66(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0x247cb60f; BYTE $0x43   // movzbl	67(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xd01c034d               // addq	(%r8,%rdx,8), %r11
	LONG $0x2454b60f; BYTE $0x17   // movzbl	23(%rsp), %edx
	LONG $0x247cb60f; BYTE $0x6e   // movzbl	110(%rsp), %edi
	LONG $0xe814034f               // addq	(%r8,%r13,8), %r10
	LONG $0x245cb60f; BYTE $0x44   // movzbl	68(%rsp), %ebx
	LONG $0xd80c0349               // addq	(%r8,%rbx,8), %rcx
	LONG $0x245cb60f; BYTE $0x45   // movzbl	69(%rsp), %ebx
	LONG $0xd80c0349               // addq	(%r8,%rbx,8), %rcx
	LONG $0xf81c034d               // addq	(%r8,%rdi,8), %r11
	LONG $0x245cb60f; BYTE $0x18   // movzbl	24(%rsp), %ebx
	LONG $0x247cb60f; BYTE $0x6f   // movzbl	111(%rsp), %edi
	LONG $0xf014034f               // addq	(%r8,%r14,8), %r10
	LONG $0x2474b60f; BYTE $0x46   // movzbl	70(%rsp), %esi
	LONG $0xf00c0349               // addq	(%r8,%rsi,8), %rcx
	LONG $0x2474b60f; BYTE $0x47   // movzbl	71(%rsp), %esi
	LONG $0xf00c0349               // addq	(%r8,%rsi,8), %rcx
	LONG $0xf81c034d               // addq	(%r8,%rdi,8), %r11
	LONG $0x6cb60f44; WORD $0x1924 // movzbl	25(%rsp), %r13d
	LONG $0x2474b60f; BYTE $0x70   // movzbl	112(%rsp), %esi
	LONG $0xe014034f               // addq	(%r8,%r12,8), %r10
	LONG $0x247cb60f; BYTE $0x48   // movzbl	72(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0x247cb60f; BYTE $0x49   // movzbl	73(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x64b60f44; WORD $0x1a24 // movzbl	26(%rsp), %r12d
	LONG $0x2474b60f; BYTE $0x71   // movzbl	113(%rsp), %esi
	QUAD $0x0000009824bc8b48       // movq	152(%rsp), %rdi                 # 8-byte Reload
	LONG $0xf814034d               // addq	(%r8,%rdi,8), %r10
	LONG $0x247cb60f; BYTE $0x4a   // movzbl	74(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0x247cb60f; BYTE $0x4b   // movzbl	75(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x7cb60f44; WORD $0x1b24 // movzbl	27(%rsp), %r15d
	LONG $0x2474b60f; BYTE $0x72   // movzbl	114(%rsp), %esi
	QUAD $0x000000a024bc8b48       // movq	160(%rsp), %rdi                 # 8-byte Reload
	LONG $0xf814034d               // addq	(%r8,%rdi,8), %r10
	LONG $0x247cb60f; BYTE $0x4c   // movzbl	76(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0x247cb60f; BYTE $0x4d   // movzbl	77(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x74b60f44; WORD $0x1c24 // movzbl	28(%rsp), %r14d
	LONG $0x2474b60f; BYTE $0x73   // movzbl	115(%rsp), %esi
	LONG $0xc814034f               // addq	(%r8,%r9,8), %r10
	LONG $0x247cb60f; BYTE $0x4e   // movzbl	78(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0x247cb60f; BYTE $0x4f   // movzbl	79(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x4cb60f44; WORD $0x1d24 // movzbl	29(%rsp), %r9d
	LONG $0x2474b60f; BYTE $0x74   // movzbl	116(%rsp), %esi
	LONG $0xd014034d               // addq	(%r8,%rdx,8), %r10
	LONG $0x2454b60f; BYTE $0x50   // movzbl	80(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x51   // movzbl	81(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x2454b60f; BYTE $0x1e   // movzbl	30(%rsp), %edx
	LONG $0x2474b60f; BYTE $0x75   // movzbl	117(%rsp), %esi
	LONG $0xd814034d               // addq	(%r8,%rbx,8), %r10
	LONG $0x247cb60f; BYTE $0x52   // movzbl	82(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0x247cb60f; BYTE $0x53   // movzbl	83(%rsp), %edi
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x2474b60f; BYTE $0x76   // movzbl	118(%rsp), %esi
	LONG $0x247cb60f; BYTE $0x54   // movzbl	84(%rsp), %edi
	LONG $0xe814034f               // addq	(%r8,%r13,8), %r10
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x2474b60f; BYTE $0x77   // movzbl	119(%rsp), %esi
	LONG $0x247cb60f; BYTE $0x55   // movzbl	85(%rsp), %edi
	LONG $0xe014034f               // addq	(%r8,%r12,8), %r10
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x2474b60f; BYTE $0x78   // movzbl	120(%rsp), %esi
	LONG $0x247cb60f; BYTE $0x56   // movzbl	86(%rsp), %edi
	LONG $0xf814034f               // addq	(%r8,%r15,8), %r10
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x2474b60f; BYTE $0x79   // movzbl	121(%rsp), %esi
	LONG $0x247cb60f; BYTE $0x57   // movzbl	87(%rsp), %edi
	LONG $0xf014034f               // addq	(%r8,%r14,8), %r10
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x2474b60f; BYTE $0x1f   // movzbl	31(%rsp), %esi
	LONG $0x247cb60f; BYTE $0x58   // movzbl	88(%rsp), %edi
	LONG $0xc814034f               // addq	(%r8,%r9,8), %r10
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xd014034d               // addq	(%r8,%rdx,8), %r10
	LONG $0x2454b60f; BYTE $0x7a   // movzbl	122(%rsp), %edx
	LONG $0x247cb60f; BYTE $0x59   // movzbl	89(%rsp), %edi
	LONG $0xf014034d               // addq	(%r8,%rsi,8), %r10
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xd01c034d               // addq	(%r8,%rdx,8), %r11
	LONG $0x2454b60f; BYTE $0x7b   // movzbl	123(%rsp), %edx
	LONG $0x2474b60f; BYTE $0x5a   // movzbl	90(%rsp), %esi
	LONG $0xf00c0349               // addq	(%r8,%rsi,8), %rcx
	LONG $0x2474b60f; BYTE $0x7c   // movzbl	124(%rsp), %esi
	LONG $0x247cb60f; BYTE $0x5b   // movzbl	91(%rsp), %edi
	LONG $0xd01c034d               // addq	(%r8,%rdx,8), %r11
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x2454b60f; BYTE $0x7d   // movzbl	125(%rsp), %edx
	LONG $0x2474b60f; BYTE $0x5c   // movzbl	92(%rsp), %esi
	LONG $0xf00c0349               // addq	(%r8,%rsi,8), %rcx
	LONG $0x2474b60f; BYTE $0x7e   // movzbl	126(%rsp), %esi
	LONG $0x247cb60f; BYTE $0x5d   // movzbl	93(%rsp), %edi
	LONG $0xd01c034d               // addq	(%r8,%rdx,8), %r11
	LONG $0xf80c0349               // addq	(%r8,%rdi,8), %rcx
	QUAD $0x000000b824bc8b48       // movq	184(%rsp), %rdi                 # 8-byte Reload
	LONG $0xf01c034d               // addq	(%r8,%rsi,8), %r11
	LONG $0x2454b60f; BYTE $0x5e   // movzbl	94(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x7f   // movzbl	127(%rsp), %edx
	LONG $0x2474b60f; BYTE $0x5f   // movzbl	95(%rsp), %esi
	LONG $0xd01c034d               // addq	(%r8,%rdx,8), %r11
	LONG $0xf00c0349               // addq	(%r8,%rsi,8), %rcx
	LONG $0x2454b60f; BYTE $0x20   // movzbl	32(%rsp), %edx
	WORD $0x0149; BYTE $0xc2       // addq	%rax, %r10
	LONG $0xd0048b49               // movq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x21   // movzbl	33(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x22   // movzbl	34(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x23   // movzbl	35(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x24   // movzbl	36(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x25   // movzbl	37(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x26   // movzbl	38(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x27   // movzbl	39(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x28   // movzbl	40(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x29   // movzbl	41(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x2a   // movzbl	42(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x2b   // movzbl	43(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x2c   // movzbl	44(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x2d   // movzbl	45(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x2e   // movzbl	46(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x2f   // movzbl	47(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x30   // movzbl	48(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x31   // movzbl	49(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x32   // movzbl	50(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x33   // movzbl	51(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x34   // movzbl	52(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x35   // movzbl	53(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x36   // movzbl	54(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x37   // movzbl	55(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x38   // movzbl	56(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x39   // movzbl	57(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x3a   // movzbl	58(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	LONG $0x2454b60f; BYTE $0x3b   // movzbl	59(%rsp), %edx
	LONG $0xd0040349               // addq	(%r8,%rdx,8), %rax
	QUAD $0x000000b024948b48       // movq	176(%rsp), %rdx                 # 8-byte Reload
	LONG $0x2474b60f; BYTE $0x3c   // movzbl	60(%rsp), %esi
	LONG $0xf0040349               // addq	(%r8,%rsi,8), %rax
	WORD $0x014d; BYTE $0xd3       // addq	%r10, %r11
	LONG $0x2474b60f; BYTE $0x3d   // movzbl	61(%rsp), %esi
	LONG $0xf0040349               // addq	(%r8,%rsi,8), %rax
	WORD $0x014c; BYTE $0xd9       // addq	%r11, %rcx
	LONG $0x2474b60f; BYTE $0x3e   // movzbl	62(%rsp), %esi
	LONG $0xf0040349               // addq	(%r8,%rsi,8), %rax
	LONG $0x2474b60f; BYTE $0x3f   // movzbl	63(%rsp), %esi
	LONG $0xf0040349               // addq	(%r8,%rsi,8), %rax
	QUAD $0x000000c024b48b48       // movq	192(%rsp), %rsi                 # 8-byte Reload
	WORD $0x0148; BYTE $0xc8       // addq	%rcx, %rax
	WORD $0x5a8d; BYTE $0xf0       // leal	-16(%rdx), %ebx
	LONG $0x80ef8348               // subq	$-128, %rdi
	LONG $0x80ee8348               // subq	$-128, %rsi
	WORD $0xfa83; BYTE $0x1f       // cmpl	$31, %edx
	JA   LBB2_9
	QUAD $0x000000a824948b4c       // movq	168(%rsp), %r10                 # 8-byte Reload
	WORD $0xfb83; BYTE $0x04       // cmpl	$4, %ebx
	JGE  LBB2_11
	JMP  LBB2_3

LBB2_1:
	WORD $0xc031             // xorl	%eax, %eax
	WORD $0xfb83; BYTE $0x04 // cmpl	$4, %ebx
	JL   LBB2_3

LBB2_11:
	LONG $0x066ffec5               // vmovdqu	(%rsi), %ymm0
	LONG $0x07effdc5               // vpxor	(%rdi), %ymm0, %ymm0
	LONG $0x047ffdc5; BYTE $0x24   // vmovdqa	%ymm0, (%rsp)
	LONG $0x7ef9e1c4; BYTE $0xc1   // vmovq	%xmm0, %rcx
	WORD $0xb60f; BYTE $0xc9       // movzbl	%cl, %ecx
	LONG $0xc80c8b49               // movq	(%r8,%rcx,8), %rcx
	LONG $0x1479e3c4; WORD $0x01c2 // vpextrb	$1, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x1479e3c4; WORD $0x02c2 // vpextrb	$2, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x1479e3c4; WORD $0x03c2 // vpextrb	$3, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x1479e3c4; WORD $0x04c2 // vpextrb	$4, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x1479e3c4; WORD $0x05c2 // vpextrb	$5, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x1479e3c4; WORD $0x06c2 // vpextrb	$6, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x1479e3c4; WORD $0x07c2 // vpextrb	$7, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x1479e3c4; WORD $0x08c2 // vpextrb	$8, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x1479e3c4; WORD $0x09c2 // vpextrb	$9, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x1479e3c4; WORD $0x0ac2 // vpextrb	$10, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x1479e3c4; WORD $0x0bc2 // vpextrb	$11, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x1479e3c4; WORD $0x0cc2 // vpextrb	$12, %xmm0, %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x0d   // movzbl	13(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x0e   // movzbl	14(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x0f   // movzbl	15(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x10   // movzbl	16(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x11   // movzbl	17(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x12   // movzbl	18(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x13   // movzbl	19(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x14   // movzbl	20(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x15   // movzbl	21(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x16   // movzbl	22(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x17   // movzbl	23(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x18   // movzbl	24(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x19   // movzbl	25(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x1a   // movzbl	26(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x1b   // movzbl	27(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x1c   // movzbl	28(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x1d   // movzbl	29(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x1e   // movzbl	30(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	LONG $0x2454b60f; BYTE $0x1f   // movzbl	31(%rsp), %edx
	LONG $0xd00c0349               // addq	(%r8,%rdx,8), %rcx
	WORD $0x0148; BYTE $0xc8       // addq	%rcx, %rax
	WORD $0x4b8d; BYTE $0xfc       // leal	-4(%rbx), %ecx
	LONG $0x20c78348               // addq	$32, %rdi
	LONG $0x20c68348               // addq	$32, %rsi
	WORD $0xfb83; BYTE $0x07       // cmpl	$7, %ebx
	WORD $0xcb89                   // movl	%ecx, %ebx
	JA   LBB2_11
	WORD $0xc985                   // testl	%ecx, %ecx
	JNE  LBB2_5
	JMP  LBB2_7

LBB2_3:
	WORD $0xd989 // movl	%ebx, %ecx
	WORD $0xc985 // testl	%ecx, %ecx
	JE   LBB2_7

LBB2_5:
	WORD $0x8941; BYTE $0xc9 // movl	%ecx, %r9d
	WORD $0xd231             // xorl	%edx, %edx

LBB2_6:
	LONG $0xd61c8b48               // movq	(%rsi,%rdx,8), %rbx
	LONG $0xd71c3348               // xorq	(%rdi,%rdx,8), %rbx
	WORD $0xb60f; BYTE $0xcb       // movzbl	%bl, %ecx
	LONG $0xc8040349               // addq	(%r8,%rcx,8), %rax
	WORD $0xb60f; BYTE $0xcf       // movzbl	%bh, %ecx
	LONG $0xc8040349               // addq	(%r8,%rcx,8), %rax
	WORD $0x8948; BYTE $0xd9       // movq	%rbx, %rcx
	LONG $0x0de9c148               // shrq	$13, %rcx
	LONG $0x07f8e181; WORD $0x0000 // andl	$2040, %ecx                     # imm = 0x7F8
	LONG $0x08040349               // addq	(%r8,%rcx), %rax
	WORD $0x8948; BYTE $0xd9       // movq	%rbx, %rcx
	LONG $0x15e9c148               // shrq	$21, %rcx
	LONG $0x07f8e181; WORD $0x0000 // andl	$2040, %ecx                     # imm = 0x7F8
	LONG $0x08040349               // addq	(%r8,%rcx), %rax
	WORD $0x8948; BYTE $0xd9       // movq	%rbx, %rcx
	LONG $0x1de9c148               // shrq	$29, %rcx
	LONG $0x07f8e181; WORD $0x0000 // andl	$2040, %ecx                     # imm = 0x7F8
	LONG $0x08040349               // addq	(%r8,%rcx), %rax
	WORD $0x8948; BYTE $0xd9       // movq	%rbx, %rcx
	LONG $0x25e9c148               // shrq	$37, %rcx
	LONG $0x07f8e181; WORD $0x0000 // andl	$2040, %ecx                     # imm = 0x7F8
	LONG $0x08040349               // addq	(%r8,%rcx), %rax
	WORD $0x8948; BYTE $0xd9       // movq	%rbx, %rcx
	LONG $0x2debc148               // shrq	$45, %rbx
	LONG $0x07f8e381; WORD $0x0000 // andl	$2040, %ebx                     # imm = 0x7F8
	LONG $0x18040349               // addq	(%r8,%rbx), %rax
	LONG $0x38e9c148               // shrq	$56, %rcx
	LONG $0xc8040349               // addq	(%r8,%rcx,8), %rax
	LONG $0x01c28348               // addq	$1, %rdx
	WORD $0x3941; BYTE $0xd1       // cmpl	%edx, %r9d
	JNE  LBB2_6

LBB2_7:
	WORD $0x8949; BYTE $0x02 // movq	%rax, (%r10)
	LONG $0xd8658d48         // leaq	-40(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	WORD $0x5c41             // popq	%r12
	WORD $0x5d41             // popq	%r13
	WORD $0x5e41             // popq	%r14
	WORD $0x5f41             // popq	%r15
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
