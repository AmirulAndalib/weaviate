//go:build !noasm && amd64
// Code generated by GoAT. DO NOT EDIT.

TEXT ·init_lookup64bit(SB), $0-32
	MOVQ lut+0(FP), DI

TEXT ·popcnt_lookup_64bit(SB), $0-32
	MOVQ data+0(FP), DI
	MOVQ n+8(FP), SI
	MOVQ lookup64bit+16(FP), DX

TEXT ·hamming_bitwise_256(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ res+16(FP), DX
	MOVQ len+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	WORD $0x5741                               // pushq	%r15
	WORD $0x5641                               // pushq	%r14
	WORD $0x5441                               // pushq	%r12
	BYTE $0x53                                 // pushq	%rbx
	LONG $0xe0e48348                           // andq	$-32, %rsp
	LONG $0xa0ec8148; WORD $0x0000; BYTE $0x00 // subq	$160, %rsp
	WORD $0x8949; BYTE $0xcc                   // movq	%rcx, %r12
	WORD $0x8948; BYTE $0xd3                   // movq	%rdx, %rbx
	WORD $0x8949; BYTE $0xf6                   // movq	%rsi, %r14
	WORD $0x8949; BYTE $0xff                   // movq	%rdi, %r15
	LONG $0x000800bf; BYTE $0x00               // movl	$2048, %edi                     # imm = 0x800
	LONG $0x000000e8; BYTE $0x00               // callq	malloc@PLT
	WORD $0x8548; BYTE $0xc0                   // testq	%rax, %rax
	JE   LBB0_12
	LONG $0x24348b49                           // movq	(%r12), %rsi
	WORD $0xfe83; BYTE $0x07                   // cmpl	$7, %esi
	JG   LBB0_4
	WORD $0xc031                               // xorl	%eax, %eax
	WORD $0xc931                               // xorl	%ecx, %ecx

LBB0_3:
	LONG $0xc6148b49             // movq	(%r14,%rax,8), %rdx
	LONG $0xc7143349             // xorq	(%r15,%rax,8), %rdx
	LONG $0xb80f48f3; BYTE $0xd2 // popcntq	%rdx, %rdx
	WORD $0x0148; BYTE $0xd1     // addq	%rdx, %rcx
	WORD $0xff48; BYTE $0xc0     // incq	%rax
	WORD $0xc639                 // cmpl	%eax, %esi
	JNE  LBB0_3
	JMP  LBB0_11

LBB0_4:
	WORD $0xfe83; BYTE $0x10 // cmpl	$16, %esi
	JL   LBB0_5
	WORD $0xff31             // xorl	%edi, %edi
	WORD $0xf289             // movl	%esi, %edx

LBB0_14:
	LONG $0x107cc1c4; BYTE $0x06   // vmovups	(%r14), %ymm0
	LONG $0x107cc1c4; WORD $0x204e // vmovups	32(%r14), %ymm1
	LONG $0x107cc1c4; WORD $0x4056 // vmovups	64(%r14), %ymm2
	LONG $0x107cc1c4; WORD $0x605e // vmovups	96(%r14), %ymm3
	LONG $0x577cc1c4; BYTE $0x07   // vxorps	(%r15), %ymm0, %ymm0
	LONG $0x5774c1c4; WORD $0x204f // vxorps	32(%r15), %ymm1, %ymm1
	LONG $0x576cc1c4; WORD $0x4057 // vxorps	64(%r15), %ymm2, %ymm2
	LONG $0x5764c1c4; WORD $0x605f // vxorps	96(%r15), %ymm3, %ymm3
	LONG $0x0429fcc5; BYTE $0x24   // vmovaps	%ymm0, (%rsp)
	LONG $0x4c29fcc5; WORD $0x6024 // vmovaps	%ymm1, 96(%rsp)
	LONG $0x5429fcc5; WORD $0x4024 // vmovaps	%ymm2, 64(%rsp)
	LONG $0x5c29fcc5; WORD $0x2024 // vmovaps	%ymm3, 32(%rsp)
	WORD $0xf631                   // xorl	%esi, %esi
	WORD $0xc931                   // xorl	%ecx, %ecx

LBB0_15:
	LONG $0x04b60f44; BYTE $0x34   // movzbl	(%rsp,%rsi), %r8d
	LONG $0xc00c034a               // addq	(%rax,%r8,8), %rcx
	LONG $0x44b60f44; WORD $0x0134 // movzbl	1(%rsp,%rsi), %r8d
	LONG $0xc00c034a               // addq	(%rax,%r8,8), %rcx
	LONG $0x44b60f44; WORD $0x0234 // movzbl	2(%rsp,%rsi), %r8d
	LONG $0xc00c034a               // addq	(%rax,%r8,8), %rcx
	LONG $0x44b60f44; WORD $0x0334 // movzbl	3(%rsp,%rsi), %r8d
	LONG $0xc00c034a               // addq	(%rax,%r8,8), %rcx
	LONG $0x04c68348               // addq	$4, %rsi
	LONG $0x1dfe8348               // cmpq	$29, %rsi
	JB   LBB0_15
	WORD $0x3145; BYTE $0xc0       // xorl	%r8d, %r8d
	WORD $0xf631                   // xorl	%esi, %esi

LBB0_17:
	LONG $0x4cb60f46; WORD $0x6004 // movzbl	96(%rsp,%r8), %r9d
	LONG $0xc834034a               // addq	(%rax,%r9,8), %rsi
	LONG $0x4cb60f46; WORD $0x6104 // movzbl	97(%rsp,%r8), %r9d
	LONG $0xc834034a               // addq	(%rax,%r9,8), %rsi
	LONG $0x4cb60f46; WORD $0x6204 // movzbl	98(%rsp,%r8), %r9d
	LONG $0xc834034a               // addq	(%rax,%r9,8), %rsi
	LONG $0x4cb60f46; WORD $0x6304 // movzbl	99(%rsp,%r8), %r9d
	LONG $0xc834034a               // addq	(%rax,%r9,8), %rsi
	LONG $0x04c08349               // addq	$4, %r8
	LONG $0x1cf88349               // cmpq	$28, %r8
	JBE  LBB0_17
	WORD $0x0148; BYTE $0xf9       // addq	%rdi, %rcx
	WORD $0x3145; BYTE $0xc0       // xorl	%r8d, %r8d
	WORD $0xff31                   // xorl	%edi, %edi

LBB0_19:
	LONG $0x4cb60f46; WORD $0x4004 // movzbl	64(%rsp,%r8), %r9d
	LONG $0xc83c034a               // addq	(%rax,%r9,8), %rdi
	LONG $0x4cb60f46; WORD $0x4104 // movzbl	65(%rsp,%r8), %r9d
	LONG $0xc83c034a               // addq	(%rax,%r9,8), %rdi
	LONG $0x4cb60f46; WORD $0x4204 // movzbl	66(%rsp,%r8), %r9d
	LONG $0xc83c034a               // addq	(%rax,%r9,8), %rdi
	LONG $0x4cb60f46; WORD $0x4304 // movzbl	67(%rsp,%r8), %r9d
	LONG $0xc83c034a               // addq	(%rax,%r9,8), %rdi
	LONG $0x04c08349               // addq	$4, %r8
	LONG $0x1cf88349               // cmpq	$28, %r8
	JBE  LBB0_19
	WORD $0x0148; BYTE $0xf1       // addq	%rsi, %rcx
	WORD $0x3145; BYTE $0xc0       // xorl	%r8d, %r8d
	WORD $0xf631                   // xorl	%esi, %esi

LBB0_21:
	LONG $0x4cb60f46; WORD $0x2004 // movzbl	32(%rsp,%r8), %r9d
	LONG $0xc834034a               // addq	(%rax,%r9,8), %rsi
	LONG $0x4cb60f46; WORD $0x2104 // movzbl	33(%rsp,%r8), %r9d
	LONG $0xc834034a               // addq	(%rax,%r9,8), %rsi
	LONG $0x4cb60f46; WORD $0x2204 // movzbl	34(%rsp,%r8), %r9d
	LONG $0xc834034a               // addq	(%rax,%r9,8), %rsi
	LONG $0x4cb60f46; WORD $0x2304 // movzbl	35(%rsp,%r8), %r9d
	LONG $0xc834034a               // addq	(%rax,%r9,8), %rsi
	LONG $0x04c08349               // addq	$4, %r8
	LONG $0x1df88349               // cmpq	$29, %r8
	JB   LBB0_21
	WORD $0x0148; BYTE $0xf9       // addq	%rdi, %rcx
	WORD $0x0148; BYTE $0xf1       // addq	%rsi, %rcx
	WORD $0x728d; BYTE $0xf0       // leal	-16(%rdx), %esi
	LONG $0x80ef8349               // subq	$-128, %r15
	LONG $0x80ee8349               // subq	$-128, %r14
	WORD $0x8948; BYTE $0xcf       // movq	%rcx, %rdi
	WORD $0xfa83; BYTE $0x1f       // cmpl	$31, %edx
	WORD $0xf289                   // movl	%esi, %edx
	JG   LBB0_14
	WORD $0xfe83; BYTE $0x04       // cmpl	$4, %esi
	JL   LBB0_7

LBB0_23:
	LONG $0x107cc1c4; BYTE $0x06 // vmovups	(%r14), %ymm0
	LONG $0x577cc1c4; BYTE $0x07 // vxorps	(%r15), %ymm0, %ymm0
	LONG $0x0429fcc5; BYTE $0x24 // vmovaps	%ymm0, (%rsp)
	WORD $0xff31                 // xorl	%edi, %edi
	WORD $0xd231                 // xorl	%edx, %edx

LBB0_24:
	LONG $0x04b60f44; BYTE $0x3c   // movzbl	(%rsp,%rdi), %r8d
	LONG $0xc014034a               // addq	(%rax,%r8,8), %rdx
	LONG $0x44b60f44; WORD $0x013c // movzbl	1(%rsp,%rdi), %r8d
	LONG $0xc014034a               // addq	(%rax,%r8,8), %rdx
	LONG $0x44b60f44; WORD $0x023c // movzbl	2(%rsp,%rdi), %r8d
	LONG $0xc014034a               // addq	(%rax,%r8,8), %rdx
	LONG $0x44b60f44; WORD $0x033c // movzbl	3(%rsp,%rdi), %r8d
	LONG $0xc014034a               // addq	(%rax,%r8,8), %rdx
	LONG $0x04c78348               // addq	$4, %rdi
	LONG $0x1dff8348               // cmpq	$29, %rdi
	JB   LBB0_24
	WORD $0x0148; BYTE $0xd1       // addq	%rdx, %rcx
	WORD $0x568d; BYTE $0xfc       // leal	-4(%rsi), %edx
	LONG $0x20c78349               // addq	$32, %r15
	LONG $0x20c68349               // addq	$32, %r14
	WORD $0xfe83; BYTE $0x07       // cmpl	$7, %esi
	WORD $0xd689                   // movl	%edx, %esi
	JG   LBB0_23
	WORD $0xd285                   // testl	%edx, %edx
	JNE  LBB0_9
	JMP  LBB0_11

LBB0_5:
	WORD $0xc931             // xorl	%ecx, %ecx
	WORD $0xfe83; BYTE $0x04 // cmpl	$4, %esi
	JGE  LBB0_23

LBB0_7:
	WORD $0xf289 // movl	%esi, %edx
	WORD $0xd285 // testl	%edx, %edx
	JE   LBB0_11

LBB0_9:
	WORD $0xd089 // movl	%edx, %eax
	WORD $0xd231 // xorl	%edx, %edx

LBB0_10:
	LONG $0xd6348b49             // movq	(%r14,%rdx,8), %rsi
	LONG $0xd7343349             // xorq	(%r15,%rdx,8), %rsi
	LONG $0xb80f48f3; BYTE $0xf6 // popcntq	%rsi, %rsi
	WORD $0x0148; BYTE $0xf1     // addq	%rsi, %rcx
	WORD $0xff48; BYTE $0xc2     // incq	%rdx
	WORD $0xd039                 // cmpl	%edx, %eax
	JNE  LBB0_10

LBB0_11:
	WORD $0x8948; BYTE $0x0b // movq	%rcx, (%rbx)

LBB0_12:
	LONG $0xe0658d48         // leaq	-32(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	WORD $0x5c41             // popq	%r12
	WORD $0x5e41             // popq	%r14
	WORD $0x5f41             // popq	%r15
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
