//go:build !noasm && amd64
// Code generated by GoAT. DO NOT EDIT.

TEXT Â·hamming_bitwise_512(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ res+16(FP), DX
	MOVQ len+24(FP), CX
	BYTE $0x55               // pushq	%rbp
	WORD $0x8948; BYTE $0xe5 // movq	%rsp, %rbp
	WORD $0x5641             // pushq	%r14
	BYTE $0x53               // pushq	%rbx
	LONG $0xf8e48348         // andq	$-8, %rsp
	WORD $0x8b4c; BYTE $0x31 // movq	(%rcx), %r14
	LONG $0x07fe8341         // cmpl	$7, %r14d
	JG   LBB0_8
	WORD $0x8945; BYTE $0xf2 // movl	%r14d, %r10d
	LONG $0xffc28341         // addl	$-1, %r10d
	LONG $0x0ffa8341         // cmpl	$15, %r10d
	JAE  LBB0_3
	WORD $0xc931             // xorl	%ecx, %ecx
	WORD $0x8949; BYTE $0xf0 // movq	%rsi, %r8
	WORD $0x8949; BYTE $0xf9 // movq	%rdi, %r9
	JMP  LBB0_6

LBB0_8:
	LONG $0x10fe8341         // cmpl	$16, %r14d
	JB   LBB0_9
	LONG $0xf0468d41         // leal	-16(%r14), %eax
	WORD $0x8941; BYTE $0xc0 // movl	%eax, %r8d
	LONG $0x04e8c141         // shrl	$4, %r8d
	LONG $0x01c08341         // addl	$1, %r8d
	WORD $0xf883; BYTE $0x10 // cmpl	$16, %eax
	JAE  LBB0_20
	WORD $0xc931             // xorl	%ecx, %ecx
	LONG $0x01c0f641         // testb	$1, %r8b
	JNE  LBB0_15
	JMP  LBB0_16

LBB0_3:
	LONG $0x01c28349         // addq	$1, %r10
	WORD $0x894d; BYTE $0xd3 // movq	%r10, %r11
	LONG $0xf0e38349         // andq	$-16, %r11
	WORD $0x2945; BYTE $0xde // subl	%r11d, %r14d
	LONG $0xde048d4e         // leaq	(%rsi,%r11,8), %r8
	LONG $0xdf0c8d4e         // leaq	(%rdi,%r11,8), %r9
	QUAD $0x00000000d5048d4a // leaq	(,%r10,8), %rax
	LONG $0x80e08348         // andq	$-128, %rax
	LONG $0xc0eff9c5         // vpxor	%xmm0, %xmm0, %xmm0
	WORD $0xc931             // xorl	%ecx, %ecx
	QUAD $0x000000000d6ffdc5 // vmovdqa	.LCPI0_0(%rip), %ymm1           # ymm1 = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15]
	QUAD $0x00000000156ffdc5 // vmovdqa	.LCPI0_1(%rip), %ymm2           # ymm2 = [0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4]
	LONG $0xdbefe1c5         // vpxor	%xmm3, %xmm3, %xmm3
	LONG $0xe4efd9c5         // vpxor	%xmm4, %xmm4, %xmm4
	LONG $0xedefd1c5         // vpxor	%xmm5, %xmm5, %xmm5
	LONG $0xf6efc9c5         // vpxor	%xmm6, %xmm6, %xmm6

LBB0_4:
	LONG $0x3c6ffec5; BYTE $0x0e   // vmovdqu	(%rsi,%rcx), %ymm7
	LONG $0x446f7ec5; WORD $0x200e // vmovdqu	32(%rsi,%rcx), %ymm8
	LONG $0x4c6f7ec5; WORD $0x400e // vmovdqu	64(%rsi,%rcx), %ymm9
	LONG $0x546f7ec5; WORD $0x600e // vmovdqu	96(%rsi,%rcx), %ymm10
	LONG $0x3cefc5c5; BYTE $0x0f   // vpxor	(%rdi,%rcx), %ymm7, %ymm7
	LONG $0x44ef3dc5; WORD $0x200f // vpxor	32(%rdi,%rcx), %ymm8, %ymm8
	LONG $0x4cef35c5; WORD $0x400f // vpxor	64(%rdi,%rcx), %ymm9, %ymm9
	LONG $0x54ef2dc5; WORD $0x600f // vpxor	96(%rdi,%rcx), %ymm10, %ymm10
	LONG $0xd9db45c5               // vpand	%ymm1, %ymm7, %ymm11
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb	%ymm11, %ymm2, %ymm11
	LONG $0xd771c5c5; BYTE $0x04   // vpsrlw	$4, %ymm7, %ymm7
	LONG $0xf9dbc5c5               // vpand	%ymm1, %ymm7, %ymm7
	LONG $0x006de2c4; BYTE $0xff   // vpshufb	%ymm7, %ymm2, %ymm7
	LONG $0xfffca5c5               // vpaddb	%ymm7, %ymm11, %ymm7
	LONG $0xf8f6c5c5               // vpsadbw	%ymm0, %ymm7, %ymm7
	LONG $0xd9db3dc5               // vpand	%ymm1, %ymm8, %ymm11
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb	%ymm11, %ymm2, %ymm11
	LONG $0x713dc1c4; WORD $0x04d0 // vpsrlw	$4, %ymm8, %ymm8
	LONG $0xc1db3dc5               // vpand	%ymm1, %ymm8, %ymm8
	LONG $0x006d42c4; BYTE $0xc0   // vpshufb	%ymm8, %ymm2, %ymm8
	LONG $0xfc3d41c4; BYTE $0xc3   // vpaddb	%ymm11, %ymm8, %ymm8
	LONG $0xc0f63dc5               // vpsadbw	%ymm0, %ymm8, %ymm8
	LONG $0xd9db35c5               // vpand	%ymm1, %ymm9, %ymm11
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb	%ymm11, %ymm2, %ymm11
	LONG $0x7135c1c4; WORD $0x04d1 // vpsrlw	$4, %ymm9, %ymm9
	LONG $0xc9db35c5               // vpand	%ymm1, %ymm9, %ymm9
	LONG $0x006d42c4; BYTE $0xc9   // vpshufb	%ymm9, %ymm2, %ymm9
	LONG $0xfc3541c4; BYTE $0xcb   // vpaddb	%ymm11, %ymm9, %ymm9
	LONG $0xc8f635c5               // vpsadbw	%ymm0, %ymm9, %ymm9
	LONG $0xd9db2dc5               // vpand	%ymm1, %ymm10, %ymm11
	LONG $0x006d42c4; BYTE $0xdb   // vpshufb	%ymm11, %ymm2, %ymm11
	LONG $0x712dc1c4; WORD $0x04d2 // vpsrlw	$4, %ymm10, %ymm10
	LONG $0xd1db2dc5               // vpand	%ymm1, %ymm10, %ymm10
	LONG $0x006d42c4; BYTE $0xd2   // vpshufb	%ymm10, %ymm2, %ymm10
	LONG $0xfc2d41c4; BYTE $0xd3   // vpaddb	%ymm11, %ymm10, %ymm10
	LONG $0xd0f62dc5               // vpsadbw	%ymm0, %ymm10, %ymm10
	LONG $0xdbd4c5c5               // vpaddq	%ymm3, %ymm7, %ymm3
	LONG $0xe4d4bdc5               // vpaddq	%ymm4, %ymm8, %ymm4
	LONG $0xedd4b5c5               // vpaddq	%ymm5, %ymm9, %ymm5
	LONG $0xf6d4adc5               // vpaddq	%ymm6, %ymm10, %ymm6
	LONG $0x80e98348               // subq	$-128, %rcx
	WORD $0x3948; BYTE $0xc8       // cmpq	%rcx, %rax
	JNE  LBB0_4
	LONG $0xc3d4ddc5               // vpaddq	%ymm3, %ymm4, %ymm0
	LONG $0xc0d4d5c5               // vpaddq	%ymm0, %ymm5, %ymm0
	LONG $0xc0d4cdc5               // vpaddq	%ymm0, %ymm6, %ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128	$1, %ymm0, %xmm1
	LONG $0xc1d4f9c5               // vpaddq	%xmm1, %xmm0, %xmm0
	LONG $0xc870f9c5; BYTE $0xee   // vpshufd	$238, %xmm0, %xmm1              # xmm1 = xmm0[2,3,2,3]
	LONG $0xc1d4f9c5               // vpaddq	%xmm1, %xmm0, %xmm0
	LONG $0x7ef9e1c4; BYTE $0xc1   // vmovq	%xmm0, %rcx
	WORD $0x394d; BYTE $0xda       // cmpq	%r11, %r10
	JE   LBB0_27

LBB0_6:
	WORD $0x8944; BYTE $0xf0 // movl	%r14d, %eax
	WORD $0xf631             // xorl	%esi, %esi

LBB0_7:
	LONG $0xf03c8b49             // movq	(%r8,%rsi,8), %rdi
	LONG $0xf13c3349             // xorq	(%r9,%rsi,8), %rdi
	LONG $0xb80f48f3; BYTE $0xff // popcntq	%rdi, %rdi
	WORD $0x0148; BYTE $0xf9     // addq	%rdi, %rcx
	LONG $0x01c68348             // addq	$1, %rsi
	WORD $0xf039                 // cmpl	%esi, %eax
	JNE  LBB0_7
	JMP  LBB0_27

LBB0_9:
	WORD $0xc931 // xorl	%ecx, %ecx
	JMP  LBB0_10

LBB0_20:
	WORD $0x8945; BYTE $0xc1 // movl	%r8d, %r9d
	LONG $0xfee18341         // andl	$-2, %r9d
	WORD $0xc031             // xorl	%eax, %eax
	QUAD $0x00000000056ffdc5 // vmovdqa	.LCPI0_0(%rip), %ymm0           # ymm0 = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15]
	QUAD $0x000000000d6ffdc5 // vmovdqa	.LCPI0_1(%rip), %ymm1           # ymm1 = [0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4]
	LONG $0xd2efe9c5         // vpxor	%xmm2, %xmm2, %xmm2
	WORD $0x3145; BYTE $0xd2 // xorl	%r10d, %r10d
	WORD $0xc931             // xorl	%ecx, %ecx

LBB0_21:
	LONG $0x1c6ffec5; BYTE $0xc6               // vmovdqu	(%rsi,%rax,8), %ymm3
	LONG $0x1cefe5c5; BYTE $0xc7               // vpxor	(%rdi,%rax,8), %ymm3, %ymm3
	QUAD $0x000080c6a46ffec5; BYTE $0x00       // vmovdqu	128(%rsi,%rax,8), %ymm4
	LONG $0xe8dbe5c5                           // vpand	%ymm0, %ymm3, %ymm5
	LONG $0x0075e2c4; BYTE $0xed               // vpshufb	%ymm5, %ymm1, %ymm5
	LONG $0xd371e5c5; BYTE $0x04               // vpsrlw	$4, %ymm3, %ymm3
	LONG $0xd8dbe5c5                           // vpand	%ymm0, %ymm3, %ymm3
	LONG $0x0075e2c4; BYTE $0xdb               // vpshufb	%ymm3, %ymm1, %ymm3
	LONG $0xddfce5c5                           // vpaddb	%ymm5, %ymm3, %ymm3
	LONG $0xdaf6e5c5                           // vpsadbw	%ymm2, %ymm3, %ymm3
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128	$1, %ymm3, %xmm5
	LONG $0xddd4e1c5                           // vpaddq	%xmm5, %xmm3, %xmm3
	LONG $0xeb70f9c5; BYTE $0xee               // vpshufd	$238, %xmm3, %xmm5              # xmm5 = xmm3[2,3,2,3]
	LONG $0xddd4e1c5                           // vpaddq	%xmm5, %xmm3, %xmm3
	LONG $0x7ef9e1c4; BYTE $0xdb               // vmovq	%xmm3, %rbx
	WORD $0x0148; BYTE $0xcb                   // addq	%rcx, %rbx
	QUAD $0x000080c79cefddc5; BYTE $0x00       // vpxor	128(%rdi,%rax,8), %ymm4, %ymm3
	LONG $0xe0dbe5c5                           // vpand	%ymm0, %ymm3, %ymm4
	LONG $0x0075e2c4; BYTE $0xe4               // vpshufb	%ymm4, %ymm1, %ymm4
	LONG $0xd371e5c5; BYTE $0x04               // vpsrlw	$4, %ymm3, %ymm3
	LONG $0xd8dbe5c5                           // vpand	%ymm0, %ymm3, %ymm3
	LONG $0x0075e2c4; BYTE $0xdb               // vpshufb	%ymm3, %ymm1, %ymm3
	LONG $0xdcfce5c5                           // vpaddb	%ymm4, %ymm3, %ymm3
	LONG $0xdaf6e5c5                           // vpsadbw	%ymm2, %ymm3, %ymm3
	LONG $0x397de3c4; WORD $0x01dc             // vextracti128	$1, %ymm3, %xmm4
	LONG $0xdcd4e1c5                           // vpaddq	%xmm4, %xmm3, %xmm3
	LONG $0xe370f9c5; BYTE $0xee               // vpshufd	$238, %xmm3, %xmm4              # xmm4 = xmm3[2,3,2,3]
	LONG $0xdcd4e1c5                           // vpaddq	%xmm4, %xmm3, %xmm3
	LONG $0x7ef9e1c4; BYTE $0xd9               // vmovq	%xmm3, %rcx
	WORD $0x0148; BYTE $0xd9                   // addq	%rbx, %rcx
	LONG $0x00c28149; WORD $0xffff; BYTE $0xff // addq	$-256, %r10
	LONG $0x20c08348                           // addq	$32, %rax
	LONG $0xfec18341                           // addl	$-2, %r9d
	JNE  LBB0_21
	WORD $0x294c; BYTE $0xd7                   // subq	%r10, %rdi
	WORD $0x294c; BYTE $0xd6                   // subq	%r10, %rsi
	WORD $0x2941; BYTE $0xc6                   // subl	%eax, %r14d
	LONG $0x01c0f641                           // testb	$1, %r8b
	JE   LBB0_16

LBB0_15:
	LONG $0x066ffec5               // vmovdqu	(%rsi), %ymm0
	LONG $0x80ee8348               // subq	$-128, %rsi
	LONG $0x07effdc5               // vpxor	(%rdi), %ymm0, %ymm0
	LONG $0x80ef8348               // subq	$-128, %rdi
	QUAD $0x000000000d6ffdc5       // vmovdqa	.LCPI0_0(%rip), %ymm1           # ymm1 = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15]
	LONG $0xd1dbfdc5               // vpand	%ymm1, %ymm0, %ymm2
	QUAD $0x000000001d6ffdc5       // vmovdqa	.LCPI0_1(%rip), %ymm3           # ymm3 = [0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4]
	LONG $0x0065e2c4; BYTE $0xd2   // vpshufb	%ymm2, %ymm3, %ymm2
	LONG $0xd071fdc5; BYTE $0x04   // vpsrlw	$4, %ymm0, %ymm0
	LONG $0xc1dbfdc5               // vpand	%ymm1, %ymm0, %ymm0
	LONG $0x0065e2c4; BYTE $0xc0   // vpshufb	%ymm0, %ymm3, %ymm0
	LONG $0xc2fcfdc5               // vpaddb	%ymm2, %ymm0, %ymm0
	LONG $0xc9eff1c5               // vpxor	%xmm1, %xmm1, %xmm1
	LONG $0xc1f6fdc5               // vpsadbw	%ymm1, %ymm0, %ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128	$1, %ymm0, %xmm1
	LONG $0xc1d4f9c5               // vpaddq	%xmm1, %xmm0, %xmm0
	LONG $0xc870f9c5; BYTE $0xee   // vpshufd	$238, %xmm0, %xmm1              # xmm1 = xmm0[2,3,2,3]
	LONG $0xc1d4f9c5               // vpaddq	%xmm1, %xmm0, %xmm0
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq	%xmm0, %rax
	WORD $0x0148; BYTE $0xc1       // addq	%rax, %rcx
	LONG $0xf0c68341               // addl	$-16, %r14d

LBB0_16:
	LONG $0x04fe8341 // cmpl	$4, %r14d
	JB   LBB0_17

LBB0_10:
	LONG $0x066ffec5               // vmovdqu	(%rsi), %ymm0
	LONG $0x07effdc5               // vpxor	(%rdi), %ymm0, %ymm0
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq	%xmm0, %rax
	LONG $0x16f9e3c4; WORD $0x01c3 // vpextrq	$1, %xmm0, %rbx
	LONG $0xb80f48f3; BYTE $0xc0   // popcntq	%rax, %rax
	LONG $0xb80f48f3; BYTE $0xdb   // popcntq	%rbx, %rbx
	WORD $0x0148; BYTE $0xcb       // addq	%rcx, %rbx
	WORD $0x0148; BYTE $0xc3       // addq	%rax, %rbx
	LONG $0x397de3c4; WORD $0x01c0 // vextracti128	$1, %ymm0, %xmm0
	LONG $0x7ef9e1c4; BYTE $0xc0   // vmovq	%xmm0, %rax
	LONG $0xb80f48f3; BYTE $0xc8   // popcntq	%rax, %rcx
	WORD $0x0148; BYTE $0xd9       // addq	%rbx, %rcx
	LONG $0xfcc68341               // addl	$-4, %r14d
	LONG $0x20c78348               // addq	$32, %rdi
	LONG $0x20c68348               // addq	$32, %rsi
	LONG $0x03fe8341               // cmpl	$3, %r14d
	JA   LBB0_10

LBB0_17:
	WORD $0x8545; BYTE $0xf6 // testl	%r14d, %r14d
	JE   LBB0_27
	LONG $0xff568d45         // leal	-1(%r14), %r10d
	LONG $0x0ffa8341         // cmpl	$15, %r10d
	JAE  LBB0_22
	WORD $0x8949; BYTE $0xf8 // movq	%rdi, %r8
	WORD $0x8949; BYTE $0xf1 // movq	%rsi, %r9
	JMP  LBB0_25

LBB0_22:
	LONG $0x01c28349             // addq	$1, %r10
	WORD $0x894d; BYTE $0xd3     // movq	%r10, %r11
	LONG $0xf0e38349             // andq	$-16, %r11
	LONG $0xdf048d4e             // leaq	(%rdi,%r11,8), %r8
	LONG $0xde0c8d4e             // leaq	(%rsi,%r11,8), %r9
	WORD $0x2945; BYTE $0xde     // subl	%r11d, %r14d
	LONG $0x6ef9e1c4; BYTE $0xc1 // vmovq	%rcx, %xmm0
	LONG $0xc9eff1c5             // vpxor	%xmm1, %xmm1, %xmm1
	WORD $0xc031                 // xorl	%eax, %eax
	QUAD $0x00000000156ffdc5     // vmovdqa	.LCPI0_0(%rip), %ymm2           # ymm2 = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15]
	QUAD $0x000000001d6ffdc5     // vmovdqa	.LCPI0_1(%rip), %ymm3           # ymm3 = [0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4]
	LONG $0xe4efd9c5             // vpxor	%xmm4, %xmm4, %xmm4
	LONG $0xedefd1c5             // vpxor	%xmm5, %xmm5, %xmm5
	LONG $0xf6efc9c5             // vpxor	%xmm6, %xmm6, %xmm6

LBB0_23:
	LONG $0x3c6ffec5; BYTE $0xc6   // vmovdqu	(%rsi,%rax,8), %ymm7
	LONG $0x446f7ec5; WORD $0x20c6 // vmovdqu	32(%rsi,%rax,8), %ymm8
	LONG $0x4c6f7ec5; WORD $0x40c6 // vmovdqu	64(%rsi,%rax,8), %ymm9
	LONG $0x546f7ec5; WORD $0x60c6 // vmovdqu	96(%rsi,%rax,8), %ymm10
	LONG $0x3cefc5c5; BYTE $0xc7   // vpxor	(%rdi,%rax,8), %ymm7, %ymm7
	LONG $0x44ef3dc5; WORD $0x20c7 // vpxor	32(%rdi,%rax,8), %ymm8, %ymm8
	LONG $0x4cef35c5; WORD $0x40c7 // vpxor	64(%rdi,%rax,8), %ymm9, %ymm9
	LONG $0x54ef2dc5; WORD $0x60c7 // vpxor	96(%rdi,%rax,8), %ymm10, %ymm10
	LONG $0xdadb45c5               // vpand	%ymm2, %ymm7, %ymm11
	LONG $0x006542c4; BYTE $0xdb   // vpshufb	%ymm11, %ymm3, %ymm11
	LONG $0xd771c5c5; BYTE $0x04   // vpsrlw	$4, %ymm7, %ymm7
	LONG $0xfadbc5c5               // vpand	%ymm2, %ymm7, %ymm7
	LONG $0x0065e2c4; BYTE $0xff   // vpshufb	%ymm7, %ymm3, %ymm7
	LONG $0xfffca5c5               // vpaddb	%ymm7, %ymm11, %ymm7
	LONG $0xf9f6c5c5               // vpsadbw	%ymm1, %ymm7, %ymm7
	LONG $0xdadb3dc5               // vpand	%ymm2, %ymm8, %ymm11
	LONG $0x006542c4; BYTE $0xdb   // vpshufb	%ymm11, %ymm3, %ymm11
	LONG $0x713dc1c4; WORD $0x04d0 // vpsrlw	$4, %ymm8, %ymm8
	LONG $0xc2db3dc5               // vpand	%ymm2, %ymm8, %ymm8
	LONG $0x006542c4; BYTE $0xc0   // vpshufb	%ymm8, %ymm3, %ymm8
	LONG $0xfc3d41c4; BYTE $0xc3   // vpaddb	%ymm11, %ymm8, %ymm8
	LONG $0xc1f63dc5               // vpsadbw	%ymm1, %ymm8, %ymm8
	LONG $0xdadb35c5               // vpand	%ymm2, %ymm9, %ymm11
	LONG $0x006542c4; BYTE $0xdb   // vpshufb	%ymm11, %ymm3, %ymm11
	LONG $0x7135c1c4; WORD $0x04d1 // vpsrlw	$4, %ymm9, %ymm9
	LONG $0xcadb35c5               // vpand	%ymm2, %ymm9, %ymm9
	LONG $0x006542c4; BYTE $0xc9   // vpshufb	%ymm9, %ymm3, %ymm9
	LONG $0xfc3541c4; BYTE $0xcb   // vpaddb	%ymm11, %ymm9, %ymm9
	LONG $0xc9f635c5               // vpsadbw	%ymm1, %ymm9, %ymm9
	LONG $0xdadb2dc5               // vpand	%ymm2, %ymm10, %ymm11
	LONG $0x006542c4; BYTE $0xdb   // vpshufb	%ymm11, %ymm3, %ymm11
	LONG $0x712dc1c4; WORD $0x04d2 // vpsrlw	$4, %ymm10, %ymm10
	LONG $0xd2db2dc5               // vpand	%ymm2, %ymm10, %ymm10
	LONG $0x006542c4; BYTE $0xd2   // vpshufb	%ymm10, %ymm3, %ymm10
	LONG $0xfc2d41c4; BYTE $0xd3   // vpaddb	%ymm11, %ymm10, %ymm10
	LONG $0xd1f62dc5               // vpsadbw	%ymm1, %ymm10, %ymm10
	LONG $0xc0d4c5c5               // vpaddq	%ymm0, %ymm7, %ymm0
	LONG $0xe4d4bdc5               // vpaddq	%ymm4, %ymm8, %ymm4
	LONG $0xedd4b5c5               // vpaddq	%ymm5, %ymm9, %ymm5
	LONG $0xf6d4adc5               // vpaddq	%ymm6, %ymm10, %ymm6
	LONG $0x10c08348               // addq	$16, %rax
	WORD $0x3949; BYTE $0xc3       // cmpq	%rax, %r11
	JNE  LBB0_23
	LONG $0xc0d4ddc5               // vpaddq	%ymm0, %ymm4, %ymm0
	LONG $0xc0d4d5c5               // vpaddq	%ymm0, %ymm5, %ymm0
	LONG $0xc0d4cdc5               // vpaddq	%ymm0, %ymm6, %ymm0
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128	$1, %ymm0, %xmm1
	LONG $0xc1d4f9c5               // vpaddq	%xmm1, %xmm0, %xmm0
	LONG $0xc870f9c5; BYTE $0xee   // vpshufd	$238, %xmm0, %xmm1              # xmm1 = xmm0[2,3,2,3]
	LONG $0xc1d4f9c5               // vpaddq	%xmm1, %xmm0, %xmm0
	LONG $0x7ef9e1c4; BYTE $0xc1   // vmovq	%xmm0, %rcx
	WORD $0x394d; BYTE $0xda       // cmpq	%r11, %r10
	JE   LBB0_27

LBB0_25:
	WORD $0x8944; BYTE $0xf0 // movl	%r14d, %eax
	WORD $0xf631             // xorl	%esi, %esi

LBB0_26:
	LONG $0xf13c8b49             // movq	(%r9,%rsi,8), %rdi
	LONG $0xf03c3349             // xorq	(%r8,%rsi,8), %rdi
	LONG $0xb80f48f3; BYTE $0xff // popcntq	%rdi, %rdi
	WORD $0x0148; BYTE $0xf9     // addq	%rdi, %rcx
	LONG $0x01c68348             // addq	$1, %rsi
	WORD $0xf039                 // cmpl	%esi, %eax
	JNE  LBB0_26

LBB0_27:
	WORD $0x8948; BYTE $0x0a // movq	%rcx, (%rdx)
	LONG $0xf0658d48         // leaq	-16(%rbp), %rsp
	BYTE $0x5b               // popq	%rbx
	WORD $0x5e41             // popq	%r14
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
