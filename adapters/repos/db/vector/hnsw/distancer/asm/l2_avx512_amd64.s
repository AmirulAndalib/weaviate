// Code generated by command: go run l2_avx512.go -out l2_avx512_amd64.s -stubs l2_avx512_stub_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func L2AVX512(x []float32, y []float32) float32
// Requires: AVX, AVX512DQ, AVX512F, FMA3, SSE
TEXT Â·L2AVX512(SB), NOSPLIT, $0-52
	MOVQ   x_base+0(FP), AX
	MOVQ   y_base+24(FP), CX
	MOVQ   x_len+8(FP), DX
	VXORPS Z0, Z0, Z0
	VXORPS Z1, Z1, Z1
	VXORPS Z2, Z2, Z2
	VXORPS Z3, Z3, Z3
	VXORPS Z4, Z4, Z4
	VXORPS Z5, Z5, Z5
	VXORPS Z6, Z6, Z6
	VXORPS Z7, Z7, Z7

blockloop:
	CMPQ        DX, $0x00000040
	JL          tail
	VMOVUPS     (AX), Z1
	VMOVUPS     64(AX), Z3
	VMOVUPS     128(AX), Z5
	VMOVUPS     192(AX), Z7
	VSUBPS      (CX), Z1, Z1
	VSUBPS      64(CX), Z3, Z3
	VSUBPS      128(CX), Z5, Z5
	VSUBPS      192(CX), Z7, Z7
	VFMADD231PS Z1, Z1, Z0
	VFMADD231PS Z3, Z3, Z2
	VFMADD231PS Z5, Z5, Z4
	VFMADD231PS Z7, Z7, Z6
	ADDQ        $0x00000100, AX
	ADDQ        $0x00000100, CX
	SUBQ        $0x00000040, DX
	JMP         blockloop

tail:
	VXORPS X1, X1, X1

tailloop:
	CMPQ        DX, $0x00000000
	JE          reduce
	VMOVSS      (AX), X3
	VSUBSS      (CX), X3, X3
	VFMADD231SS X3, X3, X1
	ADDQ        $0x00000004, AX
	ADDQ        $0x00000004, CX
	DECQ        DX
	JMP         tailloop

reduce:
	VADDPS        Z0, Z2, Z0
	VADDPS        Z4, Z6, Z4
	VADDPS        Z0, Z4, Z0
	VEXTRACTF32X4 $0x01, Z0, X2
	VADDPS        X0, X2, X0
	VADDPS        X0, X1, X0
	VHADDPS       X0, X0, X0
	VHADDPS       X0, X0, X0
	MOVSS         X0, ret+48(FP)
	RET
