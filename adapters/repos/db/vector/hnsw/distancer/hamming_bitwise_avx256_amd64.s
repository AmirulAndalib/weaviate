//go:build !noasm && amd64
// AUTO-GENERATED BY GOCC -- DO NOT EDIT

TEXT Â·hamming_bitwise_256(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ res+16(FP), DX
	MOVQ len+24(FP), CX
	BYTE $0x55                                 // pushq	%rbp
	WORD $0x8948; BYTE $0xe5                   // movq	%rsp, %rbp
	LONG $0xe0e48348                           // andq	$-32, %rsp
	LONG $0xe0ec8148; WORD $0x0004; BYTE $0x00 // subq	$1248, %rsp
	QUAD $0x000002b024bc8948                   // movq	%rdi, 688(%rsp)
	QUAD $0x000002a824b48948                   // movq	%rsi, 680(%rsp)
	QUAD $0x000002a024948948                   // movq	%rdx, 672(%rsp)
	QUAD $0x00000298248c8948                   // movq	%rcx, 664(%rsp)
	QUAD $0x0000029824848b48                   // movq	664(%rsp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq	(%rax), %rax
	LONG $0x94248489; WORD $0x0002; BYTE $0x00 // movl	%eax, 660(%rsp)
	QUAD $0x000002882484c748; LONG $0x00000000 // movq	$0, 648(%rsp)
	QUAD $0x080000029424bc83                   // cmpl	$8, 660(%rsp)
	JGE  LBB0_5
	JMP  LBB0_2

LBB0_2:
	QUAD $0x000002b024848b48                   // movq	688(%rsp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq	(%rax), %rax
	QUAD $0x000002a8248c8b48                   // movq	680(%rsp), %rcx
	WORD $0x3348; BYTE $0x01                   // xorq	(%rcx), %rax
	LONG $0xb80f48f3; BYTE $0xc0               // popcntq	%rax, %rax
	WORD $0x9848                               // cltq
	QUAD $0x0000028824840348                   // addq	648(%rsp), %rax
	QUAD $0x0000028824848948                   // movq	%rax, 648(%rsp)
	LONG $0x9424848b; WORD $0x0002; BYTE $0x00 // movl	660(%rsp), %eax
	WORD $0xc083; BYTE $0xff                   // addl	$-1, %eax
	LONG $0x94248489; WORD $0x0002; BYTE $0x00 // movl	%eax, 660(%rsp)
	QUAD $0x000002b024848b48                   // movq	688(%rsp), %rax
	LONG $0x08c08348                           // addq	$8, %rax
	QUAD $0x000002b024848948                   // movq	%rax, 688(%rsp)
	QUAD $0x000002a824848b48                   // movq	680(%rsp), %rax
	LONG $0x08c08348                           // addq	$8, %rax
	QUAD $0x000002a824848948                   // movq	%rax, 680(%rsp)
	QUAD $0x000000029424bc83                   // cmpl	$0, 660(%rsp)
	JNE  LBB0_2
	QUAD $0x00000288248c8b48                   // movq	648(%rsp), %rcx
	QUAD $0x000002a024848b48                   // movq	672(%rsp), %rax
	WORD $0x8948; BYTE $0x08                   // movq	%rcx, (%rax)
	JMP  LBB0_15

LBB0_5:
	QUAD $0x000002802484c748; LONG $0x00000000         // movq	$0, 640(%rsp)
	QUAD $0x000002782484c748; LONG $0x00000000         // movq	$0, 632(%rsp)
	QUAD $0x01000002bc2484c7; WORD $0x0000; BYTE $0x00 // movl	$1, 700(%rsp)
	LONG $0xbc24848b; WORD $0x0002; BYTE $0x00         // movl	700(%rsp), %eax
	LONG $0x14244489                                   // movl	%eax, 20(%rsp)
	LONG $0xcc248489; WORD $0x0004; BYTE $0x00         // movl	%eax, 1228(%rsp)
	LONG $0xc8248489; WORD $0x0004; BYTE $0x00         // movl	%eax, 1224(%rsp)
	LONG $0xc4248489; WORD $0x0004; BYTE $0x00         // movl	%eax, 1220(%rsp)
	LONG $0xc0248489; WORD $0x0004; BYTE $0x00         // movl	%eax, 1216(%rsp)
	LONG $0xbc248489; WORD $0x0004; BYTE $0x00         // movl	%eax, 1212(%rsp)
	LONG $0xb8248489; WORD $0x0004; BYTE $0x00         // movl	%eax, 1208(%rsp)
	LONG $0xb4248489; WORD $0x0004; BYTE $0x00         // movl	%eax, 1204(%rsp)
	LONG $0xb0248489; WORD $0x0004; BYTE $0x00         // movl	%eax, 1200(%rsp)
	QUAD $0x000004b424848b44                           // movl	1204(%rsp), %r8d
	LONG $0xb824bc8b; WORD $0x0004; BYTE $0x00         // movl	1208(%rsp), %edi
	LONG $0xbc24b48b; WORD $0x0004; BYTE $0x00         // movl	1212(%rsp), %esi
	LONG $0xc424948b; WORD $0x0004; BYTE $0x00         // movl	1220(%rsp), %edx
	LONG $0xc8248c8b; WORD $0x0004; BYTE $0x00         // movl	1224(%rsp), %ecx
	LONG $0xcc24848b; WORD $0x0004; BYTE $0x00         // movl	1228(%rsp), %eax
	QUAD $0x0004b024846ef9c5; BYTE $0x00               // vmovd	1200(%rsp), %xmm0
	LONG $0x2279c3c4; WORD $0x01c0                     // vpinsrd	$1, %r8d, %xmm0, %xmm0
	LONG $0x2279e3c4; WORD $0x02c7                     // vpinsrd	$2, %edi, %xmm0, %xmm0
	LONG $0x2279e3c4; WORD $0x03c6                     // vpinsrd	$3, %esi, %xmm0, %xmm0
	QUAD $0x0004c0248c6ef9c5; BYTE $0x00               // vmovd	1216(%rsp), %xmm1
	LONG $0x2271e3c4; WORD $0x01ca                     // vpinsrd	$1, %edx, %xmm1, %xmm1
	LONG $0x2271e3c4; WORD $0x02c9                     // vpinsrd	$2, %ecx, %xmm1, %xmm1
	LONG $0x2271e3c4; WORD $0x03c8                     // vpinsrd	$3, %eax, %xmm1, %xmm1
	QUAD $0x000490248c7ff9c5; BYTE $0x00               // vmovdqa	%xmm1, 1168(%rsp)
	QUAD $0x00048024847ff9c5; BYTE $0x00               // vmovdqa	%xmm0, 1152(%rsp)
	QUAD $0x000480248428fcc5; BYTE $0x00               // vmovaps	1152(%rsp), %ymm0
	QUAD $0x000240248429fcc5; BYTE $0x00               // vmovaps	%ymm0, 576(%rsp)
	LONG $0xc057f8c5                                   // vxorps	%xmm0, %xmm0, %xmm0
	QUAD $0x0002c0248429fcc5; BYTE $0x00               // vmovaps	%ymm0, 704(%rsp)
	QUAD $0x0002c024846ffdc5; BYTE $0x00               // vmovdqa	704(%rsp), %ymm0
	QUAD $0x00022024847ffdc5; BYTE $0x00               // vmovdqa	%ymm0, 544(%rsp)

LBB0_6:
	QUAD $0x100000029424bc83                   // cmpl	$16, 660(%rsp)
	JL   LBB0_8
	QUAD $0x000002b024848b48                   // movq	688(%rsp), %rax
	QUAD $0x0000033824848948                   // movq	%rax, 824(%rsp)
	QUAD $0x0000033824848b48                   // movq	824(%rsp), %rax
	LONG $0x006ffec5                           // vmovdqu	(%rax), %ymm0
	QUAD $0x00020024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 512(%rsp)
	QUAD $0x000002b024848b48                   // movq	688(%rsp), %rax
	LONG $0x00800548; WORD $0x0000             // addq	$128, %rax
	QUAD $0x0000033024848948                   // movq	%rax, 816(%rsp)
	QUAD $0x0000033024848b48                   // movq	816(%rsp), %rax
	LONG $0x006ffec5                           // vmovdqu	(%rax), %ymm0
	QUAD $0x0001e024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 480(%rsp)
	QUAD $0x000002b024848b48                   // movq	688(%rsp), %rax
	LONG $0x01000548; WORD $0x0000             // addq	$256, %rax
	QUAD $0x0000032824848948                   // movq	%rax, 808(%rsp)
	QUAD $0x0000032824848b48                   // movq	808(%rsp), %rax
	LONG $0x006ffec5                           // vmovdqu	(%rax), %ymm0
	QUAD $0x0001c024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 448(%rsp)
	QUAD $0x000002b024848b48                   // movq	688(%rsp), %rax
	LONG $0x01800548; WORD $0x0000             // addq	$384, %rax
	QUAD $0x0000032024848948                   // movq	%rax, 800(%rsp)
	QUAD $0x0000032024848b48                   // movq	800(%rsp), %rax
	LONG $0x006ffec5                           // vmovdqu	(%rax), %ymm0
	QUAD $0x0001a024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 416(%rsp)
	QUAD $0x000002a824848b48                   // movq	680(%rsp), %rax
	QUAD $0x0000031824848948                   // movq	%rax, 792(%rsp)
	QUAD $0x0000031824848b48                   // movq	792(%rsp), %rax
	LONG $0x006ffec5                           // vmovdqu	(%rax), %ymm0
	QUAD $0x00018024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 384(%rsp)
	QUAD $0x000002a824848b48                   // movq	680(%rsp), %rax
	LONG $0x00800548; WORD $0x0000             // addq	$128, %rax
	QUAD $0x0000031024848948                   // movq	%rax, 784(%rsp)
	QUAD $0x0000031024848b48                   // movq	784(%rsp), %rax
	LONG $0x006ffec5                           // vmovdqu	(%rax), %ymm0
	QUAD $0x00016024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 352(%rsp)
	QUAD $0x000002a824848b48                   // movq	680(%rsp), %rax
	LONG $0x01000548; WORD $0x0000             // addq	$256, %rax
	QUAD $0x0000030824848948                   // movq	%rax, 776(%rsp)
	QUAD $0x0000030824848b48                   // movq	776(%rsp), %rax
	LONG $0x006ffec5                           // vmovdqu	(%rax), %ymm0
	QUAD $0x00014024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 320(%rsp)
	QUAD $0x000002a824848b48                   // movq	680(%rsp), %rax
	LONG $0x01800548; WORD $0x0000             // addq	$384, %rax
	QUAD $0x0000030024848948                   // movq	%rax, 768(%rsp)
	QUAD $0x0000030024848b48                   // movq	768(%rsp), %rax
	LONG $0x006ffec5                           // vmovdqu	(%rax), %ymm0
	QUAD $0x00012024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 288(%rsp)
	QUAD $0x000200248c6ffdc5; BYTE $0x00       // vmovdqa	512(%rsp), %ymm1
	QUAD $0x00018024846ffdc5; BYTE $0x00       // vmovdqa	384(%rsp), %ymm0
	QUAD $0x000460248c7ffdc5; BYTE $0x00       // vmovdqa	%ymm1, 1120(%rsp)
	QUAD $0x00044024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 1088(%rsp)
	QUAD $0x00046024846ffdc5; BYTE $0x00       // vmovdqa	1120(%rsp), %ymm0
	QUAD $0x0004402484effdc5; BYTE $0x00       // vpxor	1088(%rsp), %ymm0, %ymm0
	QUAD $0x00010024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 256(%rsp)
	QUAD $0x0001e0248c6ffdc5; BYTE $0x00       // vmovdqa	480(%rsp), %ymm1
	QUAD $0x00016024846ffdc5; BYTE $0x00       // vmovdqa	352(%rsp), %ymm0
	QUAD $0x000420248c7ffdc5; BYTE $0x00       // vmovdqa	%ymm1, 1056(%rsp)
	QUAD $0x00040024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 1024(%rsp)
	QUAD $0x00042024846ffdc5; BYTE $0x00       // vmovdqa	1056(%rsp), %ymm0
	QUAD $0x0004002484effdc5; BYTE $0x00       // vpxor	1024(%rsp), %ymm0, %ymm0
	QUAD $0x0000e024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 224(%rsp)
	QUAD $0x0001c0248c6ffdc5; BYTE $0x00       // vmovdqa	448(%rsp), %ymm1
	QUAD $0x00014024846ffdc5; BYTE $0x00       // vmovdqa	320(%rsp), %ymm0
	QUAD $0x0003e0248c7ffdc5; BYTE $0x00       // vmovdqa	%ymm1, 992(%rsp)
	QUAD $0x0003c024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 960(%rsp)
	QUAD $0x0003e024846ffdc5; BYTE $0x00       // vmovdqa	992(%rsp), %ymm0
	QUAD $0x0003c02484effdc5; BYTE $0x00       // vpxor	960(%rsp), %ymm0, %ymm0
	QUAD $0x0000c024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 192(%rsp)
	QUAD $0x0001a0248c6ffdc5; BYTE $0x00       // vmovdqa	416(%rsp), %ymm1
	QUAD $0x00012024846ffdc5; BYTE $0x00       // vmovdqa	288(%rsp), %ymm0
	QUAD $0x0003a0248c7ffdc5; BYTE $0x00       // vmovdqa	%ymm1, 928(%rsp)
	QUAD $0x00038024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 896(%rsp)
	QUAD $0x0003a024846ffdc5; BYTE $0x00       // vmovdqa	928(%rsp), %ymm0
	QUAD $0x0003802484effdc5; BYTE $0x00       // vpxor	896(%rsp), %ymm0, %ymm0
	QUAD $0x0000a024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 160(%rsp)
	QUAD $0x0000010024848d48                   // leaq	256(%rsp), %rax
	QUAD $0x0000009824848948                   // movq	%rax, 152(%rsp)
	QUAD $0x000000e024848d48                   // leaq	224(%rsp), %rax
	QUAD $0x0000009024848948                   // movq	%rax, 144(%rsp)
	QUAD $0x000000c024848d48                   // leaq	192(%rsp), %rax
	QUAD $0x0000008824848948                   // movq	%rax, 136(%rsp)
	QUAD $0x000000a024848d48                   // leaq	160(%rsp), %rax
	QUAD $0x0000008024848948                   // movq	%rax, 128(%rsp)
	QUAD $0x0000009824848b48                   // movq	152(%rsp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq	(%rax), %rax
	LONG $0xb80f48f3; BYTE $0xc0               // popcntq	%rax, %rax
	QUAD $0x00000098248c8b48                   // movq	152(%rsp), %rcx
	LONG $0x08498b48                           // movq	8(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	QUAD $0x00000098248c8b48                   // movq	152(%rsp), %rcx
	LONG $0x10498b48                           // movq	16(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	QUAD $0x00000098248c8b48                   // movq	152(%rsp), %rcx
	LONG $0x18498b48                           // movq	24(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	WORD $0x9848                               // cltq
	QUAD $0x0000028024840348                   // addq	640(%rsp), %rax
	QUAD $0x0000028024848948                   // movq	%rax, 640(%rsp)
	QUAD $0x0000009024848b48                   // movq	144(%rsp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq	(%rax), %rax
	LONG $0xb80f48f3; BYTE $0xc0               // popcntq	%rax, %rax
	QUAD $0x00000090248c8b48                   // movq	144(%rsp), %rcx
	LONG $0x08498b48                           // movq	8(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	QUAD $0x00000090248c8b48                   // movq	144(%rsp), %rcx
	LONG $0x10498b48                           // movq	16(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	QUAD $0x00000090248c8b48                   // movq	144(%rsp), %rcx
	LONG $0x18498b48                           // movq	24(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	WORD $0x9848                               // cltq
	QUAD $0x0000028024840348                   // addq	640(%rsp), %rax
	QUAD $0x0000028024848948                   // movq	%rax, 640(%rsp)
	QUAD $0x0000008824848b48                   // movq	136(%rsp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq	(%rax), %rax
	LONG $0xb80f48f3; BYTE $0xc0               // popcntq	%rax, %rax
	QUAD $0x00000088248c8b48                   // movq	136(%rsp), %rcx
	LONG $0x08498b48                           // movq	8(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	QUAD $0x00000088248c8b48                   // movq	136(%rsp), %rcx
	LONG $0x10498b48                           // movq	16(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	QUAD $0x00000088248c8b48                   // movq	136(%rsp), %rcx
	LONG $0x18498b48                           // movq	24(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	WORD $0x9848                               // cltq
	QUAD $0x0000028024840348                   // addq	640(%rsp), %rax
	QUAD $0x0000028024848948                   // movq	%rax, 640(%rsp)
	QUAD $0x0000008024848b48                   // movq	128(%rsp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq	(%rax), %rax
	LONG $0xb80f48f3; BYTE $0xc0               // popcntq	%rax, %rax
	QUAD $0x00000080248c8b48                   // movq	128(%rsp), %rcx
	LONG $0x08498b48                           // movq	8(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	QUAD $0x00000080248c8b48                   // movq	128(%rsp), %rcx
	LONG $0x10498b48                           // movq	16(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	QUAD $0x00000080248c8b48                   // movq	128(%rsp), %rcx
	LONG $0x18498b48                           // movq	24(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	WORD $0x9848                               // cltq
	QUAD $0x0000028024840348                   // addq	640(%rsp), %rax
	QUAD $0x0000028024848948                   // movq	%rax, 640(%rsp)
	LONG $0x9424848b; WORD $0x0002; BYTE $0x00 // movl	660(%rsp), %eax
	WORD $0xe883; BYTE $0x10                   // subl	$16, %eax
	LONG $0x94248489; WORD $0x0002; BYTE $0x00 // movl	%eax, 660(%rsp)
	QUAD $0x000002b024848b48                   // movq	688(%rsp), %rax
	LONG $0x00800548; WORD $0x0000             // addq	$128, %rax
	QUAD $0x000002b024848948                   // movq	%rax, 688(%rsp)
	QUAD $0x000002a824848b48                   // movq	680(%rsp), %rax
	LONG $0x00800548; WORD $0x0000             // addq	$128, %rax
	QUAD $0x000002a824848948                   // movq	%rax, 680(%rsp)
	JMP  LBB0_6

LBB0_8:
	JMP LBB0_9

LBB0_9:
	QUAD $0x040000029424bc83                   // cmpl	$4, 660(%rsp)
	JL   LBB0_11
	QUAD $0x000002b024848b48                   // movq	688(%rsp), %rax
	QUAD $0x000002f824848948                   // movq	%rax, 760(%rsp)
	QUAD $0x000002f824848b48                   // movq	760(%rsp), %rax
	LONG $0x006ffec5                           // vmovdqu	(%rax), %ymm0
	LONG $0x447ffdc5; WORD $0x6024             // vmovdqa	%ymm0, 96(%rsp)
	QUAD $0x000002a824848b48                   // movq	680(%rsp), %rax
	QUAD $0x000002f024848948                   // movq	%rax, 752(%rsp)
	QUAD $0x000002f024848b48                   // movq	752(%rsp), %rax
	LONG $0x006ffec5                           // vmovdqu	(%rax), %ymm0
	LONG $0x447ffdc5; WORD $0x4024             // vmovdqa	%ymm0, 64(%rsp)
	LONG $0x4c6ffdc5; WORD $0x6024             // vmovdqa	96(%rsp), %ymm1
	LONG $0x446ffdc5; WORD $0x4024             // vmovdqa	64(%rsp), %ymm0
	QUAD $0x000360248c7ffdc5; BYTE $0x00       // vmovdqa	%ymm1, 864(%rsp)
	QUAD $0x00034024847ffdc5; BYTE $0x00       // vmovdqa	%ymm0, 832(%rsp)
	QUAD $0x00036024846ffdc5; BYTE $0x00       // vmovdqa	864(%rsp), %ymm0
	QUAD $0x0003402484effdc5; BYTE $0x00       // vpxor	832(%rsp), %ymm0, %ymm0
	LONG $0x447ffdc5; WORD $0x2024             // vmovdqa	%ymm0, 32(%rsp)
	LONG $0x24448d48; BYTE $0x20               // leaq	32(%rsp), %rax
	LONG $0x24448948; BYTE $0x18               // movq	%rax, 24(%rsp)
	LONG $0x24448b48; BYTE $0x18               // movq	24(%rsp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq	(%rax), %rax
	LONG $0xb80f48f3; BYTE $0xc0               // popcntq	%rax, %rax
	LONG $0x244c8b48; BYTE $0x18               // movq	24(%rsp), %rcx
	LONG $0x08498b48                           // movq	8(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	LONG $0x244c8b48; BYTE $0x18               // movq	24(%rsp), %rcx
	LONG $0x10498b48                           // movq	16(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	LONG $0x244c8b48; BYTE $0x18               // movq	24(%rsp), %rcx
	LONG $0x18498b48                           // movq	24(%rcx), %rcx
	LONG $0xb80f48f3; BYTE $0xc9               // popcntq	%rcx, %rcx
	WORD $0xc801                               // addl	%ecx, %eax
	WORD $0x9848                               // cltq
	QUAD $0x0000028024840348                   // addq	640(%rsp), %rax
	QUAD $0x0000028024848948                   // movq	%rax, 640(%rsp)
	LONG $0x9424848b; WORD $0x0002; BYTE $0x00 // movl	660(%rsp), %eax
	WORD $0xe883; BYTE $0x04                   // subl	$4, %eax
	LONG $0x94248489; WORD $0x0002; BYTE $0x00 // movl	%eax, 660(%rsp)
	QUAD $0x000002b024848b48                   // movq	688(%rsp), %rax
	LONG $0x20c08348                           // addq	$32, %rax
	QUAD $0x000002b024848948                   // movq	%rax, 688(%rsp)
	QUAD $0x000002a824848b48                   // movq	680(%rsp), %rax
	LONG $0x20c08348                           // addq	$32, %rax
	QUAD $0x000002a824848948                   // movq	%rax, 680(%rsp)
	JMP  LBB0_9

LBB0_11:
	JMP LBB0_12

LBB0_12:
	QUAD $0x000000029424bc83                   // cmpl	$0, 660(%rsp)
	JE   LBB0_14
	QUAD $0x000002b024848b48                   // movq	688(%rsp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq	(%rax), %rax
	QUAD $0x000002a8248c8b48                   // movq	680(%rsp), %rcx
	WORD $0x3348; BYTE $0x01                   // xorq	(%rcx), %rax
	LONG $0xb80f48f3; BYTE $0xc0               // popcntq	%rax, %rax
	WORD $0x9848                               // cltq
	QUAD $0x0000028024840348                   // addq	640(%rsp), %rax
	QUAD $0x0000028024848948                   // movq	%rax, 640(%rsp)
	LONG $0x9424848b; WORD $0x0002; BYTE $0x00 // movl	660(%rsp), %eax
	WORD $0xc083; BYTE $0xff                   // addl	$-1, %eax
	LONG $0x94248489; WORD $0x0002; BYTE $0x00 // movl	%eax, 660(%rsp)
	QUAD $0x000002b024848b48                   // movq	688(%rsp), %rax
	LONG $0x08c08348                           // addq	$8, %rax
	QUAD $0x000002b024848948                   // movq	%rax, 688(%rsp)
	QUAD $0x000002a824848b48                   // movq	680(%rsp), %rax
	LONG $0x08c08348                           // addq	$8, %rax
	QUAD $0x000002a824848948                   // movq	%rax, 680(%rsp)
	JMP  LBB0_12

LBB0_14:
	QUAD $0x0000028024848b48 // movq	640(%rsp), %rax
	QUAD $0x0000027824840348 // addq	632(%rsp), %rax
	QUAD $0x0000028824840348 // addq	648(%rsp), %rax
	QUAD $0x0000028824848948 // movq	%rax, 648(%rsp)
	QUAD $0x00000288248c8b48 // movq	648(%rsp), %rcx
	QUAD $0x000002a024848b48 // movq	672(%rsp), %rax
	WORD $0x8948; BYTE $0x08 // movq	%rcx, (%rax)

LBB0_15:
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq
