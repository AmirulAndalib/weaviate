//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package distancer

import mock "github.com/stretchr/testify/mock"

// MockDistancer is an autogenerated mock type for the Distancer type
type MockDistancer struct {
	mock.Mock
}

type MockDistancer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDistancer) EXPECT() *MockDistancer_Expecter {
	return &MockDistancer_Expecter{mock: &_m.Mock}
}

// Distance provides a mock function with given fields: vec
func (_m *MockDistancer) Distance(vec []float32) (float32, bool, error) {
	ret := _m.Called(vec)

	if len(ret) == 0 {
		panic("no return value specified for Distance")
	}

	var r0 float32
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func([]float32) (float32, bool, error)); ok {
		return rf(vec)
	}
	if rf, ok := ret.Get(0).(func([]float32) float32); ok {
		r0 = rf(vec)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func([]float32) bool); ok {
		r1 = rf(vec)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func([]float32) error); ok {
		r2 = rf(vec)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDistancer_Distance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Distance'
type MockDistancer_Distance_Call struct {
	*mock.Call
}

// Distance is a helper method to define mock.On call
//   - vec []float32
func (_e *MockDistancer_Expecter) Distance(vec interface{}) *MockDistancer_Distance_Call {
	return &MockDistancer_Distance_Call{Call: _e.mock.On("Distance", vec)}
}

func (_c *MockDistancer_Distance_Call) Run(run func(vec []float32)) *MockDistancer_Distance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32))
	})
	return _c
}

func (_c *MockDistancer_Distance_Call) Return(_a0 float32, _a1 bool, _a2 error) *MockDistancer_Distance_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDistancer_Distance_Call) RunAndReturn(run func([]float32) (float32, bool, error)) *MockDistancer_Distance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDistancer creates a new instance of MockDistancer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDistancer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDistancer {
	mock := &MockDistancer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
