//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package flat

import mock "github.com/stretchr/testify/mock"

// MockdistanceCalc is an autogenerated mock type for the distanceCalc type
type MockdistanceCalc struct {
	mock.Mock
}

type MockdistanceCalc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdistanceCalc) EXPECT() *MockdistanceCalc_Expecter {
	return &MockdistanceCalc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: vecAsBytes
func (_m *MockdistanceCalc) Execute(vecAsBytes []byte) (float32, error) {
	ret := _m.Called(vecAsBytes)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (float32, error)); ok {
		return rf(vecAsBytes)
	}
	if rf, ok := ret.Get(0).(func([]byte) float32); ok {
		r0 = rf(vecAsBytes)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(vecAsBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdistanceCalc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockdistanceCalc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - vecAsBytes []byte
func (_e *MockdistanceCalc_Expecter) Execute(vecAsBytes interface{}) *MockdistanceCalc_Execute_Call {
	return &MockdistanceCalc_Execute_Call{Call: _e.mock.On("Execute", vecAsBytes)}
}

func (_c *MockdistanceCalc_Execute_Call) Run(run func(vecAsBytes []byte)) *MockdistanceCalc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockdistanceCalc_Execute_Call) Return(_a0 float32, _a1 error) *MockdistanceCalc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdistanceCalc_Execute_Call) RunAndReturn(run func([]byte) (float32, error)) *MockdistanceCalc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdistanceCalc creates a new instance of MockdistanceCalc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdistanceCalc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdistanceCalc {
	mock := &MockdistanceCalc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
