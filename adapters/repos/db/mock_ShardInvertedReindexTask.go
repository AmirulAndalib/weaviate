//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockShardInvertedReindexTask is an autogenerated mock type for the ShardInvertedReindexTask type
type MockShardInvertedReindexTask struct {
	mock.Mock
}

type MockShardInvertedReindexTask_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShardInvertedReindexTask) EXPECT() *MockShardInvertedReindexTask_Expecter {
	return &MockShardInvertedReindexTask_Expecter{mock: &_m.Mock}
}

// GetPropertiesToReindex provides a mock function with given fields: ctx, shard
func (_m *MockShardInvertedReindexTask) GetPropertiesToReindex(ctx context.Context, shard ShardLike) ([]ReindexableProperty, error) {
	ret := _m.Called(ctx, shard)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertiesToReindex")
	}

	var r0 []ReindexableProperty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ShardLike) ([]ReindexableProperty, error)); ok {
		return rf(ctx, shard)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ShardLike) []ReindexableProperty); ok {
		r0 = rf(ctx, shard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ReindexableProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ShardLike) error); ok {
		r1 = rf(ctx, shard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShardInvertedReindexTask_GetPropertiesToReindex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertiesToReindex'
type MockShardInvertedReindexTask_GetPropertiesToReindex_Call struct {
	*mock.Call
}

// GetPropertiesToReindex is a helper method to define mock.On call
//   - ctx context.Context
//   - shard ShardLike
func (_e *MockShardInvertedReindexTask_Expecter) GetPropertiesToReindex(ctx interface{}, shard interface{}) *MockShardInvertedReindexTask_GetPropertiesToReindex_Call {
	return &MockShardInvertedReindexTask_GetPropertiesToReindex_Call{Call: _e.mock.On("GetPropertiesToReindex", ctx, shard)}
}

func (_c *MockShardInvertedReindexTask_GetPropertiesToReindex_Call) Run(run func(ctx context.Context, shard ShardLike)) *MockShardInvertedReindexTask_GetPropertiesToReindex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ShardLike))
	})
	return _c
}

func (_c *MockShardInvertedReindexTask_GetPropertiesToReindex_Call) Return(_a0 []ReindexableProperty, _a1 error) *MockShardInvertedReindexTask_GetPropertiesToReindex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShardInvertedReindexTask_GetPropertiesToReindex_Call) RunAndReturn(run func(context.Context, ShardLike) ([]ReindexableProperty, error)) *MockShardInvertedReindexTask_GetPropertiesToReindex_Call {
	_c.Call.Return(run)
	return _c
}

// OnPostResumeStore provides a mock function with given fields: ctx, shard
func (_m *MockShardInvertedReindexTask) OnPostResumeStore(ctx context.Context, shard ShardLike) error {
	ret := _m.Called(ctx, shard)

	if len(ret) == 0 {
		panic("no return value specified for OnPostResumeStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ShardLike) error); ok {
		r0 = rf(ctx, shard)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockShardInvertedReindexTask_OnPostResumeStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnPostResumeStore'
type MockShardInvertedReindexTask_OnPostResumeStore_Call struct {
	*mock.Call
}

// OnPostResumeStore is a helper method to define mock.On call
//   - ctx context.Context
//   - shard ShardLike
func (_e *MockShardInvertedReindexTask_Expecter) OnPostResumeStore(ctx interface{}, shard interface{}) *MockShardInvertedReindexTask_OnPostResumeStore_Call {
	return &MockShardInvertedReindexTask_OnPostResumeStore_Call{Call: _e.mock.On("OnPostResumeStore", ctx, shard)}
}

func (_c *MockShardInvertedReindexTask_OnPostResumeStore_Call) Run(run func(ctx context.Context, shard ShardLike)) *MockShardInvertedReindexTask_OnPostResumeStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ShardLike))
	})
	return _c
}

func (_c *MockShardInvertedReindexTask_OnPostResumeStore_Call) Return(_a0 error) *MockShardInvertedReindexTask_OnPostResumeStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShardInvertedReindexTask_OnPostResumeStore_Call) RunAndReturn(run func(context.Context, ShardLike) error) *MockShardInvertedReindexTask_OnPostResumeStore_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShardInvertedReindexTask creates a new instance of MockShardInvertedReindexTask. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShardInvertedReindexTask(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShardInvertedReindexTask {
	mock := &MockShardInvertedReindexTask{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
