//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package roaringset

import mock "github.com/stretchr/testify/mock"

// MockInnerCursor is an autogenerated mock type for the InnerCursor type
type MockInnerCursor struct {
	mock.Mock
}

type MockInnerCursor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInnerCursor) EXPECT() *MockInnerCursor_Expecter {
	return &MockInnerCursor_Expecter{mock: &_m.Mock}
}

// First provides a mock function with given fields:
func (_m *MockInnerCursor) First() ([]byte, BitmapLayer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 []byte
	var r1 BitmapLayer
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]byte, BitmapLayer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() BitmapLayer); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(BitmapLayer)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockInnerCursor_First_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'First'
type MockInnerCursor_First_Call struct {
	*mock.Call
}

// First is a helper method to define mock.On call
func (_e *MockInnerCursor_Expecter) First() *MockInnerCursor_First_Call {
	return &MockInnerCursor_First_Call{Call: _e.mock.On("First")}
}

func (_c *MockInnerCursor_First_Call) Run(run func()) *MockInnerCursor_First_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInnerCursor_First_Call) Return(_a0 []byte, _a1 BitmapLayer, _a2 error) *MockInnerCursor_First_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockInnerCursor_First_Call) RunAndReturn(run func() ([]byte, BitmapLayer, error)) *MockInnerCursor_First_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields:
func (_m *MockInnerCursor) Next() ([]byte, BitmapLayer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 []byte
	var r1 BitmapLayer
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]byte, BitmapLayer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() BitmapLayer); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(BitmapLayer)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockInnerCursor_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockInnerCursor_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockInnerCursor_Expecter) Next() *MockInnerCursor_Next_Call {
	return &MockInnerCursor_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockInnerCursor_Next_Call) Run(run func()) *MockInnerCursor_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInnerCursor_Next_Call) Return(_a0 []byte, _a1 BitmapLayer, _a2 error) *MockInnerCursor_Next_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockInnerCursor_Next_Call) RunAndReturn(run func() ([]byte, BitmapLayer, error)) *MockInnerCursor_Next_Call {
	_c.Call.Return(run)
	return _c
}

// Seek provides a mock function with given fields: key
func (_m *MockInnerCursor) Seek(key []byte) ([]byte, BitmapLayer, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Seek")
	}

	var r0 []byte
	var r1 BitmapLayer
	var r2 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, BitmapLayer, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) BitmapLayer); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(BitmapLayer)
	}

	if rf, ok := ret.Get(2).(func([]byte) error); ok {
		r2 = rf(key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockInnerCursor_Seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seek'
type MockInnerCursor_Seek_Call struct {
	*mock.Call
}

// Seek is a helper method to define mock.On call
//   - key []byte
func (_e *MockInnerCursor_Expecter) Seek(key interface{}) *MockInnerCursor_Seek_Call {
	return &MockInnerCursor_Seek_Call{Call: _e.mock.On("Seek", key)}
}

func (_c *MockInnerCursor_Seek_Call) Run(run func(key []byte)) *MockInnerCursor_Seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockInnerCursor_Seek_Call) Return(_a0 []byte, _a1 BitmapLayer, _a2 error) *MockInnerCursor_Seek_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockInnerCursor_Seek_Call) RunAndReturn(run func([]byte) ([]byte, BitmapLayer, error)) *MockInnerCursor_Seek_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInnerCursor creates a new instance of MockInnerCursor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInnerCursor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInnerCursor {
	mock := &MockInnerCursor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
