//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package roaringset

import mock "github.com/stretchr/testify/mock"

// MockcursorRun is an autogenerated mock type for the cursorRun type
type MockcursorRun struct {
	mock.Mock
}

type MockcursorRun_Expecter struct {
	mock *mock.Mock
}

func (_m *MockcursorRun) EXPECT() *MockcursorRun_Expecter {
	return &MockcursorRun_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ic
func (_m *MockcursorRun) Execute(ic InnerCursor) ([]byte, BitmapLayer, error) {
	ret := _m.Called(ic)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []byte
	var r1 BitmapLayer
	var r2 error
	if rf, ok := ret.Get(0).(func(InnerCursor) ([]byte, BitmapLayer, error)); ok {
		return rf(ic)
	}
	if rf, ok := ret.Get(0).(func(InnerCursor) []byte); ok {
		r0 = rf(ic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(InnerCursor) BitmapLayer); ok {
		r1 = rf(ic)
	} else {
		r1 = ret.Get(1).(BitmapLayer)
	}

	if rf, ok := ret.Get(2).(func(InnerCursor) error); ok {
		r2 = rf(ic)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockcursorRun_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockcursorRun_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ic InnerCursor
func (_e *MockcursorRun_Expecter) Execute(ic interface{}) *MockcursorRun_Execute_Call {
	return &MockcursorRun_Execute_Call{Call: _e.mock.On("Execute", ic)}
}

func (_c *MockcursorRun_Execute_Call) Run(run func(ic InnerCursor)) *MockcursorRun_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(InnerCursor))
	})
	return _c
}

func (_c *MockcursorRun_Execute_Call) Return(_a0 []byte, _a1 BitmapLayer, _a2 error) *MockcursorRun_Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockcursorRun_Execute_Call) RunAndReturn(run func(InnerCursor) ([]byte, BitmapLayer, error)) *MockcursorRun_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockcursorRun creates a new instance of MockcursorRun. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockcursorRun(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockcursorRun {
	mock := &MockcursorRun{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
