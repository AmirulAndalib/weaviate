//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package refcache

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	mock "github.com/stretchr/testify/mock"

	multi "github.com/weaviate/weaviate/entities/multi"

	search "github.com/weaviate/weaviate/entities/search"
)

// Mockcacher is an autogenerated mock type for the cacher type
type Mockcacher struct {
	mock.Mock
}

type Mockcacher_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockcacher) EXPECT() *Mockcacher_Expecter {
	return &Mockcacher_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: ctx, objects, properties, _a3
func (_m *Mockcacher) Build(ctx context.Context, objects []search.Result, properties search.SelectProperties, _a3 additional.Properties) error {
	ret := _m.Called(ctx, objects, properties, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []search.Result, search.SelectProperties, additional.Properties) error); ok {
		r0 = rf(ctx, objects, properties, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockcacher_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type Mockcacher_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - ctx context.Context
//   - objects []search.Result
//   - properties search.SelectProperties
//   - _a3 additional.Properties
func (_e *Mockcacher_Expecter) Build(ctx interface{}, objects interface{}, properties interface{}, _a3 interface{}) *Mockcacher_Build_Call {
	return &Mockcacher_Build_Call{Call: _e.mock.On("Build", ctx, objects, properties, _a3)}
}

func (_c *Mockcacher_Build_Call) Run(run func(ctx context.Context, objects []search.Result, properties search.SelectProperties, _a3 additional.Properties)) *Mockcacher_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]search.Result), args[2].(search.SelectProperties), args[3].(additional.Properties))
	})
	return _c
}

func (_c *Mockcacher_Build_Call) Return(_a0 error) *Mockcacher_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockcacher_Build_Call) RunAndReturn(run func(context.Context, []search.Result, search.SelectProperties, additional.Properties) error) *Mockcacher_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: si
func (_m *Mockcacher) Get(si multi.Identifier) (search.Result, bool) {
	ret := _m.Called(si)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 search.Result
	var r1 bool
	if rf, ok := ret.Get(0).(func(multi.Identifier) (search.Result, bool)); ok {
		return rf(si)
	}
	if rf, ok := ret.Get(0).(func(multi.Identifier) search.Result); ok {
		r0 = rf(si)
	} else {
		r0 = ret.Get(0).(search.Result)
	}

	if rf, ok := ret.Get(1).(func(multi.Identifier) bool); ok {
		r1 = rf(si)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Mockcacher_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Mockcacher_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - si multi.Identifier
func (_e *Mockcacher_Expecter) Get(si interface{}) *Mockcacher_Get_Call {
	return &Mockcacher_Get_Call{Call: _e.mock.On("Get", si)}
}

func (_c *Mockcacher_Get_Call) Run(run func(si multi.Identifier)) *Mockcacher_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(multi.Identifier))
	})
	return _c
}

func (_c *Mockcacher_Get_Call) Return(_a0 search.Result, _a1 bool) *Mockcacher_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockcacher_Get_Call) RunAndReturn(run func(multi.Identifier) (search.Result, bool)) *Mockcacher_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockcacher creates a new instance of Mockcacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockcacher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockcacher {
	mock := &Mockcacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
