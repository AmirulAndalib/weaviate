//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package refcache

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	mock "github.com/stretchr/testify/mock"

	multi "github.com/weaviate/weaviate/entities/multi"

	search "github.com/weaviate/weaviate/entities/search"
)

// Mockrepo is an autogenerated mock type for the repo type
type Mockrepo struct {
	mock.Mock
}

type Mockrepo_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockrepo) EXPECT() *Mockrepo_Expecter {
	return &Mockrepo_Expecter{mock: &_m.Mock}
}

// MultiGet provides a mock function with given fields: ctx, query, _a2, tenant
func (_m *Mockrepo) MultiGet(ctx context.Context, query []multi.Identifier, _a2 additional.Properties, tenant string) ([]search.Result, error) {
	ret := _m.Called(ctx, query, _a2, tenant)

	if len(ret) == 0 {
		panic("no return value specified for MultiGet")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []multi.Identifier, additional.Properties, string) ([]search.Result, error)); ok {
		return rf(ctx, query, _a2, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []multi.Identifier, additional.Properties, string) []search.Result); ok {
		r0 = rf(ctx, query, _a2, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []multi.Identifier, additional.Properties, string) error); ok {
		r1 = rf(ctx, query, _a2, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockrepo_MultiGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiGet'
type Mockrepo_MultiGet_Call struct {
	*mock.Call
}

// MultiGet is a helper method to define mock.On call
//   - ctx context.Context
//   - query []multi.Identifier
//   - _a2 additional.Properties
//   - tenant string
func (_e *Mockrepo_Expecter) MultiGet(ctx interface{}, query interface{}, _a2 interface{}, tenant interface{}) *Mockrepo_MultiGet_Call {
	return &Mockrepo_MultiGet_Call{Call: _e.mock.On("MultiGet", ctx, query, _a2, tenant)}
}

func (_c *Mockrepo_MultiGet_Call) Run(run func(ctx context.Context, query []multi.Identifier, _a2 additional.Properties, tenant string)) *Mockrepo_MultiGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]multi.Identifier), args[2].(additional.Properties), args[3].(string))
	})
	return _c
}

func (_c *Mockrepo_MultiGet_Call) Return(_a0 []search.Result, _a1 error) *Mockrepo_MultiGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockrepo_MultiGet_Call) RunAndReturn(run func(context.Context, []multi.Identifier, additional.Properties, string) ([]search.Result, error)) *Mockrepo_MultiGet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockrepo creates a new instance of Mockrepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockrepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockrepo {
	mock := &Mockrepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
