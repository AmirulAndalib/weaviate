//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package db

import mock "github.com/stretchr/testify/mock"

// MockcompressedIndexer is an autogenerated mock type for the compressedIndexer type
type MockcompressedIndexer struct {
	mock.Mock
}

type MockcompressedIndexer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockcompressedIndexer) EXPECT() *MockcompressedIndexer_Expecter {
	return &MockcompressedIndexer_Expecter{mock: &_m.Mock}
}

// AlreadyIndexed provides a mock function with given fields:
func (_m *MockcompressedIndexer) AlreadyIndexed() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AlreadyIndexed")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockcompressedIndexer_AlreadyIndexed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AlreadyIndexed'
type MockcompressedIndexer_AlreadyIndexed_Call struct {
	*mock.Call
}

// AlreadyIndexed is a helper method to define mock.On call
func (_e *MockcompressedIndexer_Expecter) AlreadyIndexed() *MockcompressedIndexer_AlreadyIndexed_Call {
	return &MockcompressedIndexer_AlreadyIndexed_Call{Call: _e.mock.On("AlreadyIndexed")}
}

func (_c *MockcompressedIndexer_AlreadyIndexed_Call) Run(run func()) *MockcompressedIndexer_AlreadyIndexed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockcompressedIndexer_AlreadyIndexed_Call) Return(_a0 uint64) *MockcompressedIndexer_AlreadyIndexed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockcompressedIndexer_AlreadyIndexed_Call) RunAndReturn(run func() uint64) *MockcompressedIndexer_AlreadyIndexed_Call {
	_c.Call.Return(run)
	return _c
}

// Compressed provides a mock function with given fields:
func (_m *MockcompressedIndexer) Compressed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Compressed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockcompressedIndexer_Compressed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compressed'
type MockcompressedIndexer_Compressed_Call struct {
	*mock.Call
}

// Compressed is a helper method to define mock.On call
func (_e *MockcompressedIndexer_Expecter) Compressed() *MockcompressedIndexer_Compressed_Call {
	return &MockcompressedIndexer_Compressed_Call{Call: _e.mock.On("Compressed")}
}

func (_c *MockcompressedIndexer_Compressed_Call) Run(run func()) *MockcompressedIndexer_Compressed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockcompressedIndexer_Compressed_Call) Return(_a0 bool) *MockcompressedIndexer_Compressed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockcompressedIndexer_Compressed_Call) RunAndReturn(run func() bool) *MockcompressedIndexer_Compressed_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldCompress provides a mock function with given fields:
func (_m *MockcompressedIndexer) ShouldCompress() (bool, int) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShouldCompress")
	}

	var r0 bool
	var r1 int
	if rf, ok := ret.Get(0).(func() (bool, int)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// MockcompressedIndexer_ShouldCompress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldCompress'
type MockcompressedIndexer_ShouldCompress_Call struct {
	*mock.Call
}

// ShouldCompress is a helper method to define mock.On call
func (_e *MockcompressedIndexer_Expecter) ShouldCompress() *MockcompressedIndexer_ShouldCompress_Call {
	return &MockcompressedIndexer_ShouldCompress_Call{Call: _e.mock.On("ShouldCompress")}
}

func (_c *MockcompressedIndexer_ShouldCompress_Call) Run(run func()) *MockcompressedIndexer_ShouldCompress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockcompressedIndexer_ShouldCompress_Call) Return(_a0 bool, _a1 int) *MockcompressedIndexer_ShouldCompress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockcompressedIndexer_ShouldCompress_Call) RunAndReturn(run func() (bool, int)) *MockcompressedIndexer_ShouldCompress_Call {
	_c.Call.Return(run)
	return _c
}

// TurnOnCompression provides a mock function with given fields: callback
func (_m *MockcompressedIndexer) TurnOnCompression(callback func()) error {
	ret := _m.Called(callback)

	if len(ret) == 0 {
		panic("no return value specified for TurnOnCompression")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func()) error); ok {
		r0 = rf(callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockcompressedIndexer_TurnOnCompression_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TurnOnCompression'
type MockcompressedIndexer_TurnOnCompression_Call struct {
	*mock.Call
}

// TurnOnCompression is a helper method to define mock.On call
//   - callback func()
func (_e *MockcompressedIndexer_Expecter) TurnOnCompression(callback interface{}) *MockcompressedIndexer_TurnOnCompression_Call {
	return &MockcompressedIndexer_TurnOnCompression_Call{Call: _e.mock.On("TurnOnCompression", callback)}
}

func (_c *MockcompressedIndexer_TurnOnCompression_Call) Run(run func(callback func())) *MockcompressedIndexer_TurnOnCompression_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *MockcompressedIndexer_TurnOnCompression_Call) Return(_a0 error) *MockcompressedIndexer_TurnOnCompression_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockcompressedIndexer_TurnOnCompression_Call) RunAndReturn(run func(func()) error) *MockcompressedIndexer_TurnOnCompression_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockcompressedIndexer creates a new instance of MockcompressedIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockcompressedIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockcompressedIndexer {
	mock := &MockcompressedIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
