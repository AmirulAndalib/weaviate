//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package db

import (
	mock "github.com/stretchr/testify/mock"
	storagestate "github.com/weaviate/weaviate/entities/storagestate"
)

// MockshardStatusUpdater is an autogenerated mock type for the shardStatusUpdater type
type MockshardStatusUpdater struct {
	mock.Mock
}

type MockshardStatusUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockshardStatusUpdater) EXPECT() *MockshardStatusUpdater_Expecter {
	return &MockshardStatusUpdater_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockshardStatusUpdater) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockshardStatusUpdater_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockshardStatusUpdater_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockshardStatusUpdater_Expecter) Name() *MockshardStatusUpdater_Name_Call {
	return &MockshardStatusUpdater_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockshardStatusUpdater_Name_Call) Run(run func()) *MockshardStatusUpdater_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockshardStatusUpdater_Name_Call) Return(_a0 string) *MockshardStatusUpdater_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockshardStatusUpdater_Name_Call) RunAndReturn(run func() string) *MockshardStatusUpdater_Name_Call {
	_c.Call.Return(run)
	return _c
}

// compareAndSwapStatus provides a mock function with given fields: old, new
func (_m *MockshardStatusUpdater) compareAndSwapStatus(old string, new string) (storagestate.Status, error) {
	ret := _m.Called(old, new)

	if len(ret) == 0 {
		panic("no return value specified for compareAndSwapStatus")
	}

	var r0 storagestate.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (storagestate.Status, error)); ok {
		return rf(old, new)
	}
	if rf, ok := ret.Get(0).(func(string, string) storagestate.Status); ok {
		r0 = rf(old, new)
	} else {
		r0 = ret.Get(0).(storagestate.Status)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(old, new)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockshardStatusUpdater_compareAndSwapStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'compareAndSwapStatus'
type MockshardStatusUpdater_compareAndSwapStatus_Call struct {
	*mock.Call
}

// compareAndSwapStatus is a helper method to define mock.On call
//   - old string
//   - new string
func (_e *MockshardStatusUpdater_Expecter) compareAndSwapStatus(old interface{}, new interface{}) *MockshardStatusUpdater_compareAndSwapStatus_Call {
	return &MockshardStatusUpdater_compareAndSwapStatus_Call{Call: _e.mock.On("compareAndSwapStatus", old, new)}
}

func (_c *MockshardStatusUpdater_compareAndSwapStatus_Call) Run(run func(old string, new string)) *MockshardStatusUpdater_compareAndSwapStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockshardStatusUpdater_compareAndSwapStatus_Call) Return(_a0 storagestate.Status, _a1 error) *MockshardStatusUpdater_compareAndSwapStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockshardStatusUpdater_compareAndSwapStatus_Call) RunAndReturn(run func(string, string) (storagestate.Status, error)) *MockshardStatusUpdater_compareAndSwapStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockshardStatusUpdater creates a new instance of MockshardStatusUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockshardStatusUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockshardStatusUpdater {
	mock := &MockshardStatusUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
