//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package aggregator

import (
	mock "github.com/stretchr/testify/mock"
	helpers "github.com/weaviate/weaviate/adapters/repos/db/helpers"
)

// MockvectorIndex is an autogenerated mock type for the vectorIndex type
type MockvectorIndex struct {
	mock.Mock
}

type MockvectorIndex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockvectorIndex) EXPECT() *MockvectorIndex_Expecter {
	return &MockvectorIndex_Expecter{mock: &_m.Mock}
}

// SearchByVector provides a mock function with given fields: vector, k, allowList
func (_m *MockvectorIndex) SearchByVector(vector []float32, k int, allowList helpers.AllowList) ([]uint64, []float32, error) {
	ret := _m.Called(vector, k, allowList)

	if len(ret) == 0 {
		panic("no return value specified for SearchByVector")
	}

	var r0 []uint64
	var r1 []float32
	var r2 error
	if rf, ok := ret.Get(0).(func([]float32, int, helpers.AllowList) ([]uint64, []float32, error)); ok {
		return rf(vector, k, allowList)
	}
	if rf, ok := ret.Get(0).(func([]float32, int, helpers.AllowList) []uint64); ok {
		r0 = rf(vector, k, allowList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint64)
		}
	}

	if rf, ok := ret.Get(1).(func([]float32, int, helpers.AllowList) []float32); ok {
		r1 = rf(vector, k, allowList)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float32)
		}
	}

	if rf, ok := ret.Get(2).(func([]float32, int, helpers.AllowList) error); ok {
		r2 = rf(vector, k, allowList)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockvectorIndex_SearchByVector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchByVector'
type MockvectorIndex_SearchByVector_Call struct {
	*mock.Call
}

// SearchByVector is a helper method to define mock.On call
//   - vector []float32
//   - k int
//   - allowList helpers.AllowList
func (_e *MockvectorIndex_Expecter) SearchByVector(vector interface{}, k interface{}, allowList interface{}) *MockvectorIndex_SearchByVector_Call {
	return &MockvectorIndex_SearchByVector_Call{Call: _e.mock.On("SearchByVector", vector, k, allowList)}
}

func (_c *MockvectorIndex_SearchByVector_Call) Run(run func(vector []float32, k int, allowList helpers.AllowList)) *MockvectorIndex_SearchByVector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32), args[1].(int), args[2].(helpers.AllowList))
	})
	return _c
}

func (_c *MockvectorIndex_SearchByVector_Call) Return(_a0 []uint64, _a1 []float32, _a2 error) *MockvectorIndex_SearchByVector_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockvectorIndex_SearchByVector_Call) RunAndReturn(run func([]float32, int, helpers.AllowList) ([]uint64, []float32, error)) *MockvectorIndex_SearchByVector_Call {
	_c.Call.Return(run)
	return _c
}

// SearchByVectorDistance provides a mock function with given fields: vector, targetDistance, maxLimit, allowList
func (_m *MockvectorIndex) SearchByVectorDistance(vector []float32, targetDistance float32, maxLimit int64, allowList helpers.AllowList) ([]uint64, []float32, error) {
	ret := _m.Called(vector, targetDistance, maxLimit, allowList)

	if len(ret) == 0 {
		panic("no return value specified for SearchByVectorDistance")
	}

	var r0 []uint64
	var r1 []float32
	var r2 error
	if rf, ok := ret.Get(0).(func([]float32, float32, int64, helpers.AllowList) ([]uint64, []float32, error)); ok {
		return rf(vector, targetDistance, maxLimit, allowList)
	}
	if rf, ok := ret.Get(0).(func([]float32, float32, int64, helpers.AllowList) []uint64); ok {
		r0 = rf(vector, targetDistance, maxLimit, allowList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint64)
		}
	}

	if rf, ok := ret.Get(1).(func([]float32, float32, int64, helpers.AllowList) []float32); ok {
		r1 = rf(vector, targetDistance, maxLimit, allowList)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float32)
		}
	}

	if rf, ok := ret.Get(2).(func([]float32, float32, int64, helpers.AllowList) error); ok {
		r2 = rf(vector, targetDistance, maxLimit, allowList)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockvectorIndex_SearchByVectorDistance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchByVectorDistance'
type MockvectorIndex_SearchByVectorDistance_Call struct {
	*mock.Call
}

// SearchByVectorDistance is a helper method to define mock.On call
//   - vector []float32
//   - targetDistance float32
//   - maxLimit int64
//   - allowList helpers.AllowList
func (_e *MockvectorIndex_Expecter) SearchByVectorDistance(vector interface{}, targetDistance interface{}, maxLimit interface{}, allowList interface{}) *MockvectorIndex_SearchByVectorDistance_Call {
	return &MockvectorIndex_SearchByVectorDistance_Call{Call: _e.mock.On("SearchByVectorDistance", vector, targetDistance, maxLimit, allowList)}
}

func (_c *MockvectorIndex_SearchByVectorDistance_Call) Run(run func(vector []float32, targetDistance float32, maxLimit int64, allowList helpers.AllowList)) *MockvectorIndex_SearchByVectorDistance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32), args[1].(float32), args[2].(int64), args[3].(helpers.AllowList))
	})
	return _c
}

func (_c *MockvectorIndex_SearchByVectorDistance_Call) Return(_a0 []uint64, _a1 []float32, _a2 error) *MockvectorIndex_SearchByVectorDistance_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockvectorIndex_SearchByVectorDistance_Call) RunAndReturn(run func([]float32, float32, int64, helpers.AllowList) ([]uint64, []float32, error)) *MockvectorIndex_SearchByVectorDistance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockvectorIndex creates a new instance of MockvectorIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockvectorIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockvectorIndex {
	mock := &MockvectorIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
