//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package lsmkv

import mock "github.com/stretchr/testify/mock"

// MockexistsOnLowerSegmentsFn is an autogenerated mock type for the existsOnLowerSegmentsFn type
type MockexistsOnLowerSegmentsFn struct {
	mock.Mock
}

type MockexistsOnLowerSegmentsFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockexistsOnLowerSegmentsFn) EXPECT() *MockexistsOnLowerSegmentsFn_Expecter {
	return &MockexistsOnLowerSegmentsFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: key
func (_m *MockexistsOnLowerSegmentsFn) Execute(key []byte) (bool, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockexistsOnLowerSegmentsFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockexistsOnLowerSegmentsFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - key []byte
func (_e *MockexistsOnLowerSegmentsFn_Expecter) Execute(key interface{}) *MockexistsOnLowerSegmentsFn_Execute_Call {
	return &MockexistsOnLowerSegmentsFn_Execute_Call{Call: _e.mock.On("Execute", key)}
}

func (_c *MockexistsOnLowerSegmentsFn_Execute_Call) Run(run func(key []byte)) *MockexistsOnLowerSegmentsFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockexistsOnLowerSegmentsFn_Execute_Call) Return(_a0 bool, _a1 error) *MockexistsOnLowerSegmentsFn_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockexistsOnLowerSegmentsFn_Execute_Call) RunAndReturn(run func([]byte) (bool, error)) *MockexistsOnLowerSegmentsFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockexistsOnLowerSegmentsFn creates a new instance of MockexistsOnLowerSegmentsFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockexistsOnLowerSegmentsFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockexistsOnLowerSegmentsFn {
	mock := &MockexistsOnLowerSegmentsFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
