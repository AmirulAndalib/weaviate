//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package rbtree

import mock "github.com/stretchr/testify/mock"

// MockNode is an autogenerated mock type for the Node type
type MockNode struct {
	mock.Mock
}

type MockNode_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNode) EXPECT() *MockNode_Expecter {
	return &MockNode_Expecter{mock: &_m.Mock}
}

// IsNil provides a mock function with given fields:
func (_m *MockNode) IsNil() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNil")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockNode_IsNil_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNil'
type MockNode_IsNil_Call struct {
	*mock.Call
}

// IsNil is a helper method to define mock.On call
func (_e *MockNode_Expecter) IsNil() *MockNode_IsNil_Call {
	return &MockNode_IsNil_Call{Call: _e.mock.On("IsNil")}
}

func (_c *MockNode_IsNil_Call) Run(run func()) *MockNode_IsNil_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNode_IsNil_Call) Return(_a0 bool) *MockNode_IsNil_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNode_IsNil_Call) RunAndReturn(run func() bool) *MockNode_IsNil_Call {
	_c.Call.Return(run)
	return _c
}

// IsRed provides a mock function with given fields:
func (_m *MockNode) IsRed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockNode_IsRed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRed'
type MockNode_IsRed_Call struct {
	*mock.Call
}

// IsRed is a helper method to define mock.On call
func (_e *MockNode_Expecter) IsRed() *MockNode_IsRed_Call {
	return &MockNode_IsRed_Call{Call: _e.mock.On("IsRed")}
}

func (_c *MockNode_IsRed_Call) Run(run func()) *MockNode_IsRed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNode_IsRed_Call) Return(_a0 bool) *MockNode_IsRed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNode_IsRed_Call) RunAndReturn(run func() bool) *MockNode_IsRed_Call {
	_c.Call.Return(run)
	return _c
}

// Left provides a mock function with given fields:
func (_m *MockNode) Left() Node {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Left")
	}

	var r0 Node
	if rf, ok := ret.Get(0).(func() Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Node)
		}
	}

	return r0
}

// MockNode_Left_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Left'
type MockNode_Left_Call struct {
	*mock.Call
}

// Left is a helper method to define mock.On call
func (_e *MockNode_Expecter) Left() *MockNode_Left_Call {
	return &MockNode_Left_Call{Call: _e.mock.On("Left")}
}

func (_c *MockNode_Left_Call) Run(run func()) *MockNode_Left_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNode_Left_Call) Return(_a0 Node) *MockNode_Left_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNode_Left_Call) RunAndReturn(run func() Node) *MockNode_Left_Call {
	_c.Call.Return(run)
	return _c
}

// Parent provides a mock function with given fields:
func (_m *MockNode) Parent() Node {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parent")
	}

	var r0 Node
	if rf, ok := ret.Get(0).(func() Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Node)
		}
	}

	return r0
}

// MockNode_Parent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parent'
type MockNode_Parent_Call struct {
	*mock.Call
}

// Parent is a helper method to define mock.On call
func (_e *MockNode_Expecter) Parent() *MockNode_Parent_Call {
	return &MockNode_Parent_Call{Call: _e.mock.On("Parent")}
}

func (_c *MockNode_Parent_Call) Run(run func()) *MockNode_Parent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNode_Parent_Call) Return(_a0 Node) *MockNode_Parent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNode_Parent_Call) RunAndReturn(run func() Node) *MockNode_Parent_Call {
	_c.Call.Return(run)
	return _c
}

// Right provides a mock function with given fields:
func (_m *MockNode) Right() Node {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Right")
	}

	var r0 Node
	if rf, ok := ret.Get(0).(func() Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Node)
		}
	}

	return r0
}

// MockNode_Right_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Right'
type MockNode_Right_Call struct {
	*mock.Call
}

// Right is a helper method to define mock.On call
func (_e *MockNode_Expecter) Right() *MockNode_Right_Call {
	return &MockNode_Right_Call{Call: _e.mock.On("Right")}
}

func (_c *MockNode_Right_Call) Run(run func()) *MockNode_Right_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNode_Right_Call) Return(_a0 Node) *MockNode_Right_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNode_Right_Call) RunAndReturn(run func() Node) *MockNode_Right_Call {
	_c.Call.Return(run)
	return _c
}

// SetLeft provides a mock function with given fields: _a0
func (_m *MockNode) SetLeft(_a0 Node) {
	_m.Called(_a0)
}

// MockNode_SetLeft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLeft'
type MockNode_SetLeft_Call struct {
	*mock.Call
}

// SetLeft is a helper method to define mock.On call
//   - _a0 Node
func (_e *MockNode_Expecter) SetLeft(_a0 interface{}) *MockNode_SetLeft_Call {
	return &MockNode_SetLeft_Call{Call: _e.mock.On("SetLeft", _a0)}
}

func (_c *MockNode_SetLeft_Call) Run(run func(_a0 Node)) *MockNode_SetLeft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Node))
	})
	return _c
}

func (_c *MockNode_SetLeft_Call) Return() *MockNode_SetLeft_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNode_SetLeft_Call) RunAndReturn(run func(Node)) *MockNode_SetLeft_Call {
	_c.Call.Return(run)
	return _c
}

// SetParent provides a mock function with given fields: _a0
func (_m *MockNode) SetParent(_a0 Node) {
	_m.Called(_a0)
}

// MockNode_SetParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParent'
type MockNode_SetParent_Call struct {
	*mock.Call
}

// SetParent is a helper method to define mock.On call
//   - _a0 Node
func (_e *MockNode_Expecter) SetParent(_a0 interface{}) *MockNode_SetParent_Call {
	return &MockNode_SetParent_Call{Call: _e.mock.On("SetParent", _a0)}
}

func (_c *MockNode_SetParent_Call) Run(run func(_a0 Node)) *MockNode_SetParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Node))
	})
	return _c
}

func (_c *MockNode_SetParent_Call) Return() *MockNode_SetParent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNode_SetParent_Call) RunAndReturn(run func(Node)) *MockNode_SetParent_Call {
	_c.Call.Return(run)
	return _c
}

// SetRed provides a mock function with given fields: _a0
func (_m *MockNode) SetRed(_a0 bool) {
	_m.Called(_a0)
}

// MockNode_SetRed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRed'
type MockNode_SetRed_Call struct {
	*mock.Call
}

// SetRed is a helper method to define mock.On call
//   - _a0 bool
func (_e *MockNode_Expecter) SetRed(_a0 interface{}) *MockNode_SetRed_Call {
	return &MockNode_SetRed_Call{Call: _e.mock.On("SetRed", _a0)}
}

func (_c *MockNode_SetRed_Call) Run(run func(_a0 bool)) *MockNode_SetRed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockNode_SetRed_Call) Return() *MockNode_SetRed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNode_SetRed_Call) RunAndReturn(run func(bool)) *MockNode_SetRed_Call {
	_c.Call.Return(run)
	return _c
}

// SetRight provides a mock function with given fields: _a0
func (_m *MockNode) SetRight(_a0 Node) {
	_m.Called(_a0)
}

// MockNode_SetRight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRight'
type MockNode_SetRight_Call struct {
	*mock.Call
}

// SetRight is a helper method to define mock.On call
//   - _a0 Node
func (_e *MockNode_Expecter) SetRight(_a0 interface{}) *MockNode_SetRight_Call {
	return &MockNode_SetRight_Call{Call: _e.mock.On("SetRight", _a0)}
}

func (_c *MockNode_SetRight_Call) Run(run func(_a0 Node)) *MockNode_SetRight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Node))
	})
	return _c
}

func (_c *MockNode_SetRight_Call) Return() *MockNode_SetRight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNode_SetRight_Call) RunAndReturn(run func(Node)) *MockNode_SetRight_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNode creates a new instance of MockNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNode {
	mock := &MockNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
