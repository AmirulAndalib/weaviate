//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package rwhasher

import mock "github.com/stretchr/testify/mock"

// MockReaderHasher is an autogenerated mock type for the ReaderHasher type
type MockReaderHasher struct {
	mock.Mock
}

type MockReaderHasher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReaderHasher) EXPECT() *MockReaderHasher_Expecter {
	return &MockReaderHasher_Expecter{mock: &_m.Mock}
}

// Hash provides a mock function with given fields:
func (_m *MockReaderHasher) Hash() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockReaderHasher_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockReaderHasher_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
func (_e *MockReaderHasher_Expecter) Hash() *MockReaderHasher_Hash_Call {
	return &MockReaderHasher_Hash_Call{Call: _e.mock.On("Hash")}
}

func (_c *MockReaderHasher_Hash_Call) Run(run func()) *MockReaderHasher_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReaderHasher_Hash_Call) Return(_a0 []byte) *MockReaderHasher_Hash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReaderHasher_Hash_Call) RunAndReturn(run func() []byte) *MockReaderHasher_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// N provides a mock function with given fields:
func (_m *MockReaderHasher) N() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for N")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockReaderHasher_N_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'N'
type MockReaderHasher_N_Call struct {
	*mock.Call
}

// N is a helper method to define mock.On call
func (_e *MockReaderHasher_Expecter) N() *MockReaderHasher_N_Call {
	return &MockReaderHasher_N_Call{Call: _e.mock.On("N")}
}

func (_c *MockReaderHasher_N_Call) Run(run func()) *MockReaderHasher_N_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReaderHasher_N_Call) Return(_a0 int) *MockReaderHasher_N_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReaderHasher_N_Call) RunAndReturn(run func() int) *MockReaderHasher_N_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: p
func (_m *MockReaderHasher) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReaderHasher_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockReaderHasher_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *MockReaderHasher_Expecter) Read(p interface{}) *MockReaderHasher_Read_Call {
	return &MockReaderHasher_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *MockReaderHasher_Read_Call) Run(run func(p []byte)) *MockReaderHasher_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockReaderHasher_Read_Call) Return(n int, err error) *MockReaderHasher_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockReaderHasher_Read_Call) RunAndReturn(run func([]byte) (int, error)) *MockReaderHasher_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *MockReaderHasher) Reset() {
	_m.Called()
}

// MockReaderHasher_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockReaderHasher_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockReaderHasher_Expecter) Reset() *MockReaderHasher_Reset_Call {
	return &MockReaderHasher_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockReaderHasher_Reset_Call) Run(run func()) *MockReaderHasher_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReaderHasher_Reset_Call) Return() *MockReaderHasher_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReaderHasher_Reset_Call) RunAndReturn(run func()) *MockReaderHasher_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReaderHasher creates a new instance of MockReaderHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReaderHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReaderHasher {
	mock := &MockReaderHasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
