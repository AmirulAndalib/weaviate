//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package lsmkv

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockTimeObserver is an autogenerated mock type for the TimeObserver type
type MockTimeObserver struct {
	mock.Mock
}

type MockTimeObserver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimeObserver) EXPECT() *MockTimeObserver_Expecter {
	return &MockTimeObserver_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: start
func (_m *MockTimeObserver) Execute(start time.Time) {
	_m.Called(start)
}

// MockTimeObserver_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockTimeObserver_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - start time.Time
func (_e *MockTimeObserver_Expecter) Execute(start interface{}) *MockTimeObserver_Execute_Call {
	return &MockTimeObserver_Execute_Call{Call: _e.mock.On("Execute", start)}
}

func (_c *MockTimeObserver_Execute_Call) Run(run func(start time.Time)) *MockTimeObserver_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockTimeObserver_Execute_Call) Return() *MockTimeObserver_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimeObserver_Execute_Call) RunAndReturn(run func(time.Time)) *MockTimeObserver_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTimeObserver creates a new instance of MockTimeObserver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimeObserver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimeObserver {
	mock := &MockTimeObserver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
