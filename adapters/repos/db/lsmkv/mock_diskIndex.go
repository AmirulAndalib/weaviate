//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package lsmkv

import (
	mock "github.com/stretchr/testify/mock"
	segmentindex "github.com/weaviate/weaviate/adapters/repos/db/lsmkv/segmentindex"
)

// MockdiskIndex is an autogenerated mock type for the diskIndex type
type MockdiskIndex struct {
	mock.Mock
}

type MockdiskIndex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdiskIndex) EXPECT() *MockdiskIndex_Expecter {
	return &MockdiskIndex_Expecter{mock: &_m.Mock}
}

// AllKeys provides a mock function with given fields:
func (_m *MockdiskIndex) AllKeys() ([][]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllKeys")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([][]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdiskIndex_AllKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllKeys'
type MockdiskIndex_AllKeys_Call struct {
	*mock.Call
}

// AllKeys is a helper method to define mock.On call
func (_e *MockdiskIndex_Expecter) AllKeys() *MockdiskIndex_AllKeys_Call {
	return &MockdiskIndex_AllKeys_Call{Call: _e.mock.On("AllKeys")}
}

func (_c *MockdiskIndex_AllKeys_Call) Run(run func()) *MockdiskIndex_AllKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockdiskIndex_AllKeys_Call) Return(_a0 [][]byte, _a1 error) *MockdiskIndex_AllKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdiskIndex_AllKeys_Call) RunAndReturn(run func() ([][]byte, error)) *MockdiskIndex_AllKeys_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockdiskIndex) Get(key []byte) (segmentindex.Node, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 segmentindex.Node
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (segmentindex.Node, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) segmentindex.Node); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(segmentindex.Node)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdiskIndex_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockdiskIndex_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key []byte
func (_e *MockdiskIndex_Expecter) Get(key interface{}) *MockdiskIndex_Get_Call {
	return &MockdiskIndex_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockdiskIndex_Get_Call) Run(run func(key []byte)) *MockdiskIndex_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockdiskIndex_Get_Call) Return(_a0 segmentindex.Node, _a1 error) *MockdiskIndex_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdiskIndex_Get_Call) RunAndReturn(run func([]byte) (segmentindex.Node, error)) *MockdiskIndex_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Seek provides a mock function with given fields: key
func (_m *MockdiskIndex) Seek(key []byte) (segmentindex.Node, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Seek")
	}

	var r0 segmentindex.Node
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (segmentindex.Node, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) segmentindex.Node); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(segmentindex.Node)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdiskIndex_Seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seek'
type MockdiskIndex_Seek_Call struct {
	*mock.Call
}

// Seek is a helper method to define mock.On call
//   - key []byte
func (_e *MockdiskIndex_Expecter) Seek(key interface{}) *MockdiskIndex_Seek_Call {
	return &MockdiskIndex_Seek_Call{Call: _e.mock.On("Seek", key)}
}

func (_c *MockdiskIndex_Seek_Call) Run(run func(key []byte)) *MockdiskIndex_Seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockdiskIndex_Seek_Call) Return(_a0 segmentindex.Node, _a1 error) *MockdiskIndex_Seek_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdiskIndex_Seek_Call) RunAndReturn(run func([]byte) (segmentindex.Node, error)) *MockdiskIndex_Seek_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with given fields:
func (_m *MockdiskIndex) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockdiskIndex_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockdiskIndex_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockdiskIndex_Expecter) Size() *MockdiskIndex_Size_Call {
	return &MockdiskIndex_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockdiskIndex_Size_Call) Run(run func()) *MockdiskIndex_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockdiskIndex_Size_Call) Return(_a0 int) *MockdiskIndex_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdiskIndex_Size_Call) RunAndReturn(run func() int) *MockdiskIndex_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdiskIndex creates a new instance of MockdiskIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdiskIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdiskIndex {
	mock := &MockdiskIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
