//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package lsmkv

import mock "github.com/stretchr/testify/mock"

// MockinnerCursorMap is an autogenerated mock type for the innerCursorMap type
type MockinnerCursorMap struct {
	mock.Mock
}

type MockinnerCursorMap_Expecter struct {
	mock *mock.Mock
}

func (_m *MockinnerCursorMap) EXPECT() *MockinnerCursorMap_Expecter {
	return &MockinnerCursorMap_Expecter{mock: &_m.Mock}
}

// first provides a mock function with given fields:
func (_m *MockinnerCursorMap) first() ([]byte, []MapPair, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for first")
	}

	var r0 []byte
	var r1 []MapPair
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]byte, []MapPair, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() []MapPair); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]MapPair)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockinnerCursorMap_first_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'first'
type MockinnerCursorMap_first_Call struct {
	*mock.Call
}

// first is a helper method to define mock.On call
func (_e *MockinnerCursorMap_Expecter) first() *MockinnerCursorMap_first_Call {
	return &MockinnerCursorMap_first_Call{Call: _e.mock.On("first")}
}

func (_c *MockinnerCursorMap_first_Call) Run(run func()) *MockinnerCursorMap_first_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockinnerCursorMap_first_Call) Return(_a0 []byte, _a1 []MapPair, _a2 error) *MockinnerCursorMap_first_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockinnerCursorMap_first_Call) RunAndReturn(run func() ([]byte, []MapPair, error)) *MockinnerCursorMap_first_Call {
	_c.Call.Return(run)
	return _c
}

// next provides a mock function with given fields:
func (_m *MockinnerCursorMap) next() ([]byte, []MapPair, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for next")
	}

	var r0 []byte
	var r1 []MapPair
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]byte, []MapPair, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() []MapPair); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]MapPair)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockinnerCursorMap_next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'next'
type MockinnerCursorMap_next_Call struct {
	*mock.Call
}

// next is a helper method to define mock.On call
func (_e *MockinnerCursorMap_Expecter) next() *MockinnerCursorMap_next_Call {
	return &MockinnerCursorMap_next_Call{Call: _e.mock.On("next")}
}

func (_c *MockinnerCursorMap_next_Call) Run(run func()) *MockinnerCursorMap_next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockinnerCursorMap_next_Call) Return(_a0 []byte, _a1 []MapPair, _a2 error) *MockinnerCursorMap_next_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockinnerCursorMap_next_Call) RunAndReturn(run func() ([]byte, []MapPair, error)) *MockinnerCursorMap_next_Call {
	_c.Call.Return(run)
	return _c
}

// seek provides a mock function with given fields: _a0
func (_m *MockinnerCursorMap) seek(_a0 []byte) ([]byte, []MapPair, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for seek")
	}

	var r0 []byte
	var r1 []MapPair
	var r2 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, []MapPair, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) []MapPair); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]MapPair)
		}
	}

	if rf, ok := ret.Get(2).(func([]byte) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockinnerCursorMap_seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'seek'
type MockinnerCursorMap_seek_Call struct {
	*mock.Call
}

// seek is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockinnerCursorMap_Expecter) seek(_a0 interface{}) *MockinnerCursorMap_seek_Call {
	return &MockinnerCursorMap_seek_Call{Call: _e.mock.On("seek", _a0)}
}

func (_c *MockinnerCursorMap_seek_Call) Run(run func(_a0 []byte)) *MockinnerCursorMap_seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockinnerCursorMap_seek_Call) Return(_a0 []byte, _a1 []MapPair, _a2 error) *MockinnerCursorMap_seek_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockinnerCursorMap_seek_Call) RunAndReturn(run func([]byte) ([]byte, []MapPair, error)) *MockinnerCursorMap_seek_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockinnerCursorMap creates a new instance of MockinnerCursorMap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockinnerCursorMap(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockinnerCursorMap {
	mock := &MockinnerCursorMap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
