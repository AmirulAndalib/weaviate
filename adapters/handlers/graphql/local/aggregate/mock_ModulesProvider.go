//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package aggregate

import (
	mock "github.com/stretchr/testify/mock"
	graphql "github.com/tailor-inc/graphql"

	models "github.com/weaviate/weaviate/entities/models"
)

// MockModulesProvider is an autogenerated mock type for the ModulesProvider type
type MockModulesProvider struct {
	mock.Mock
}

type MockModulesProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModulesProvider) EXPECT() *MockModulesProvider_Expecter {
	return &MockModulesProvider_Expecter{mock: &_m.Mock}
}

// AggregateArguments provides a mock function with given fields: class
func (_m *MockModulesProvider) AggregateArguments(class *models.Class) map[string]*graphql.ArgumentConfig {
	ret := _m.Called(class)

	if len(ret) == 0 {
		panic("no return value specified for AggregateArguments")
	}

	var r0 map[string]*graphql.ArgumentConfig
	if rf, ok := ret.Get(0).(func(*models.Class) map[string]*graphql.ArgumentConfig); ok {
		r0 = rf(class)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*graphql.ArgumentConfig)
		}
	}

	return r0
}

// MockModulesProvider_AggregateArguments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AggregateArguments'
type MockModulesProvider_AggregateArguments_Call struct {
	*mock.Call
}

// AggregateArguments is a helper method to define mock.On call
//   - class *models.Class
func (_e *MockModulesProvider_Expecter) AggregateArguments(class interface{}) *MockModulesProvider_AggregateArguments_Call {
	return &MockModulesProvider_AggregateArguments_Call{Call: _e.mock.On("AggregateArguments", class)}
}

func (_c *MockModulesProvider_AggregateArguments_Call) Run(run func(class *models.Class)) *MockModulesProvider_AggregateArguments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Class))
	})
	return _c
}

func (_c *MockModulesProvider_AggregateArguments_Call) Return(_a0 map[string]*graphql.ArgumentConfig) *MockModulesProvider_AggregateArguments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_AggregateArguments_Call) RunAndReturn(run func(*models.Class) map[string]*graphql.ArgumentConfig) *MockModulesProvider_AggregateArguments_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractSearchParams provides a mock function with given fields: arguments, className
func (_m *MockModulesProvider) ExtractSearchParams(arguments map[string]interface{}, className string) map[string]interface{} {
	ret := _m.Called(arguments, className)

	if len(ret) == 0 {
		panic("no return value specified for ExtractSearchParams")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string) map[string]interface{}); ok {
		r0 = rf(arguments, className)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockModulesProvider_ExtractSearchParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractSearchParams'
type MockModulesProvider_ExtractSearchParams_Call struct {
	*mock.Call
}

// ExtractSearchParams is a helper method to define mock.On call
//   - arguments map[string]interface{}
//   - className string
func (_e *MockModulesProvider_Expecter) ExtractSearchParams(arguments interface{}, className interface{}) *MockModulesProvider_ExtractSearchParams_Call {
	return &MockModulesProvider_ExtractSearchParams_Call{Call: _e.mock.On("ExtractSearchParams", arguments, className)}
}

func (_c *MockModulesProvider_ExtractSearchParams_Call) Run(run func(arguments map[string]interface{}, className string)) *MockModulesProvider_ExtractSearchParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].(string))
	})
	return _c
}

func (_c *MockModulesProvider_ExtractSearchParams_Call) Return(_a0 map[string]interface{}) *MockModulesProvider_ExtractSearchParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_ExtractSearchParams_Call) RunAndReturn(run func(map[string]interface{}, string) map[string]interface{}) *MockModulesProvider_ExtractSearchParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModulesProvider creates a new instance of MockModulesProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModulesProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModulesProvider {
	mock := &MockModulesProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
