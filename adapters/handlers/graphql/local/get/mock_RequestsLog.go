//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package get

import mock "github.com/stretchr/testify/mock"

// MockRequestsLog is an autogenerated mock type for the RequestsLog type
type MockRequestsLog struct {
	mock.Mock
}

type MockRequestsLog_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestsLog) EXPECT() *MockRequestsLog_Expecter {
	return &MockRequestsLog_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: requestType, identifier
func (_m *MockRequestsLog) Register(requestType string, identifier string) {
	_m.Called(requestType, identifier)
}

// MockRequestsLog_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockRequestsLog_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - requestType string
//   - identifier string
func (_e *MockRequestsLog_Expecter) Register(requestType interface{}, identifier interface{}) *MockRequestsLog_Register_Call {
	return &MockRequestsLog_Register_Call{Call: _e.mock.On("Register", requestType, identifier)}
}

func (_c *MockRequestsLog_Register_Call) Run(run func(requestType string, identifier string)) *MockRequestsLog_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRequestsLog_Register_Call) Return() *MockRequestsLog_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRequestsLog_Register_Call) RunAndReturn(run func(string, string)) *MockRequestsLog_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestsLog creates a new instance of MockRequestsLog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestsLog(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestsLog {
	mock := &MockRequestsLog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
