//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package get

import (
	graphql "github.com/tailor-inc/graphql"
	ast "github.com/tailor-inc/graphql/language/ast"

	mock "github.com/stretchr/testify/mock"

	models "github.com/weaviate/weaviate/entities/models"

	modulecapabilities "github.com/weaviate/weaviate/entities/modulecapabilities"
)

// MockModulesProvider is an autogenerated mock type for the ModulesProvider type
type MockModulesProvider struct {
	mock.Mock
}

type MockModulesProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModulesProvider) EXPECT() *MockModulesProvider_Expecter {
	return &MockModulesProvider_Expecter{mock: &_m.Mock}
}

// ExtractAdditionalField provides a mock function with given fields: className, name, params
func (_m *MockModulesProvider) ExtractAdditionalField(className string, name string, params []*ast.Argument) interface{} {
	ret := _m.Called(className, name, params)

	if len(ret) == 0 {
		panic("no return value specified for ExtractAdditionalField")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string, []*ast.Argument) interface{}); ok {
		r0 = rf(className, name, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockModulesProvider_ExtractAdditionalField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractAdditionalField'
type MockModulesProvider_ExtractAdditionalField_Call struct {
	*mock.Call
}

// ExtractAdditionalField is a helper method to define mock.On call
//   - className string
//   - name string
//   - params []*ast.Argument
func (_e *MockModulesProvider_Expecter) ExtractAdditionalField(className interface{}, name interface{}, params interface{}) *MockModulesProvider_ExtractAdditionalField_Call {
	return &MockModulesProvider_ExtractAdditionalField_Call{Call: _e.mock.On("ExtractAdditionalField", className, name, params)}
}

func (_c *MockModulesProvider_ExtractAdditionalField_Call) Run(run func(className string, name string, params []*ast.Argument)) *MockModulesProvider_ExtractAdditionalField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]*ast.Argument))
	})
	return _c
}

func (_c *MockModulesProvider_ExtractAdditionalField_Call) Return(_a0 interface{}) *MockModulesProvider_ExtractAdditionalField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_ExtractAdditionalField_Call) RunAndReturn(run func(string, string, []*ast.Argument) interface{}) *MockModulesProvider_ExtractAdditionalField_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractSearchParams provides a mock function with given fields: arguments, className
func (_m *MockModulesProvider) ExtractSearchParams(arguments map[string]interface{}, className string) map[string]interface{} {
	ret := _m.Called(arguments, className)

	if len(ret) == 0 {
		panic("no return value specified for ExtractSearchParams")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, string) map[string]interface{}); ok {
		r0 = rf(arguments, className)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockModulesProvider_ExtractSearchParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractSearchParams'
type MockModulesProvider_ExtractSearchParams_Call struct {
	*mock.Call
}

// ExtractSearchParams is a helper method to define mock.On call
//   - arguments map[string]interface{}
//   - className string
func (_e *MockModulesProvider_Expecter) ExtractSearchParams(arguments interface{}, className interface{}) *MockModulesProvider_ExtractSearchParams_Call {
	return &MockModulesProvider_ExtractSearchParams_Call{Call: _e.mock.On("ExtractSearchParams", arguments, className)}
}

func (_c *MockModulesProvider_ExtractSearchParams_Call) Run(run func(arguments map[string]interface{}, className string)) *MockModulesProvider_ExtractSearchParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].(string))
	})
	return _c
}

func (_c *MockModulesProvider_ExtractSearchParams_Call) Return(_a0 map[string]interface{}) *MockModulesProvider_ExtractSearchParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_ExtractSearchParams_Call) RunAndReturn(run func(map[string]interface{}, string) map[string]interface{}) *MockModulesProvider_ExtractSearchParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAdditionalFields provides a mock function with given fields: class
func (_m *MockModulesProvider) GetAdditionalFields(class *models.Class) map[string]*graphql.Field {
	ret := _m.Called(class)

	if len(ret) == 0 {
		panic("no return value specified for GetAdditionalFields")
	}

	var r0 map[string]*graphql.Field
	if rf, ok := ret.Get(0).(func(*models.Class) map[string]*graphql.Field); ok {
		r0 = rf(class)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*graphql.Field)
		}
	}

	return r0
}

// MockModulesProvider_GetAdditionalFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdditionalFields'
type MockModulesProvider_GetAdditionalFields_Call struct {
	*mock.Call
}

// GetAdditionalFields is a helper method to define mock.On call
//   - class *models.Class
func (_e *MockModulesProvider_Expecter) GetAdditionalFields(class interface{}) *MockModulesProvider_GetAdditionalFields_Call {
	return &MockModulesProvider_GetAdditionalFields_Call{Call: _e.mock.On("GetAdditionalFields", class)}
}

func (_c *MockModulesProvider_GetAdditionalFields_Call) Run(run func(class *models.Class)) *MockModulesProvider_GetAdditionalFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Class))
	})
	return _c
}

func (_c *MockModulesProvider_GetAdditionalFields_Call) Return(_a0 map[string]*graphql.Field) *MockModulesProvider_GetAdditionalFields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_GetAdditionalFields_Call) RunAndReturn(run func(*models.Class) map[string]*graphql.Field) *MockModulesProvider_GetAdditionalFields_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *MockModulesProvider) GetAll() []modulecapabilities.Module {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []modulecapabilities.Module
	if rf, ok := ret.Get(0).(func() []modulecapabilities.Module); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]modulecapabilities.Module)
		}
	}

	return r0
}

// MockModulesProvider_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockModulesProvider_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockModulesProvider_Expecter) GetAll() *MockModulesProvider_GetAll_Call {
	return &MockModulesProvider_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockModulesProvider_GetAll_Call) Run(run func()) *MockModulesProvider_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModulesProvider_GetAll_Call) Return(_a0 []modulecapabilities.Module) *MockModulesProvider_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_GetAll_Call) RunAndReturn(run func() []modulecapabilities.Module) *MockModulesProvider_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetArguments provides a mock function with given fields: class
func (_m *MockModulesProvider) GetArguments(class *models.Class) map[string]*graphql.ArgumentConfig {
	ret := _m.Called(class)

	if len(ret) == 0 {
		panic("no return value specified for GetArguments")
	}

	var r0 map[string]*graphql.ArgumentConfig
	if rf, ok := ret.Get(0).(func(*models.Class) map[string]*graphql.ArgumentConfig); ok {
		r0 = rf(class)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*graphql.ArgumentConfig)
		}
	}

	return r0
}

// MockModulesProvider_GetArguments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArguments'
type MockModulesProvider_GetArguments_Call struct {
	*mock.Call
}

// GetArguments is a helper method to define mock.On call
//   - class *models.Class
func (_e *MockModulesProvider_Expecter) GetArguments(class interface{}) *MockModulesProvider_GetArguments_Call {
	return &MockModulesProvider_GetArguments_Call{Call: _e.mock.On("GetArguments", class)}
}

func (_c *MockModulesProvider_GetArguments_Call) Run(run func(class *models.Class)) *MockModulesProvider_GetArguments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Class))
	})
	return _c
}

func (_c *MockModulesProvider_GetArguments_Call) Return(_a0 map[string]*graphql.ArgumentConfig) *MockModulesProvider_GetArguments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_GetArguments_Call) RunAndReturn(run func(*models.Class) map[string]*graphql.ArgumentConfig) *MockModulesProvider_GetArguments_Call {
	_c.Call.Return(run)
	return _c
}

// GraphQLAdditionalFieldNames provides a mock function with given fields:
func (_m *MockModulesProvider) GraphQLAdditionalFieldNames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GraphQLAdditionalFieldNames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockModulesProvider_GraphQLAdditionalFieldNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GraphQLAdditionalFieldNames'
type MockModulesProvider_GraphQLAdditionalFieldNames_Call struct {
	*mock.Call
}

// GraphQLAdditionalFieldNames is a helper method to define mock.On call
func (_e *MockModulesProvider_Expecter) GraphQLAdditionalFieldNames() *MockModulesProvider_GraphQLAdditionalFieldNames_Call {
	return &MockModulesProvider_GraphQLAdditionalFieldNames_Call{Call: _e.mock.On("GraphQLAdditionalFieldNames")}
}

func (_c *MockModulesProvider_GraphQLAdditionalFieldNames_Call) Run(run func()) *MockModulesProvider_GraphQLAdditionalFieldNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModulesProvider_GraphQLAdditionalFieldNames_Call) Return(_a0 []string) *MockModulesProvider_GraphQLAdditionalFieldNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_GraphQLAdditionalFieldNames_Call) RunAndReturn(run func() []string) *MockModulesProvider_GraphQLAdditionalFieldNames_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModulesProvider creates a new instance of MockModulesProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModulesProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModulesProvider {
	mock := &MockModulesProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
