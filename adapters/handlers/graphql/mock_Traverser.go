//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package graphql

import (
	context "context"

	aggregation "github.com/weaviate/weaviate/entities/aggregation"

	dto "github.com/weaviate/weaviate/entities/dto"

	mock "github.com/stretchr/testify/mock"

	models "github.com/weaviate/weaviate/entities/models"
)

// MockTraverser is an autogenerated mock type for the Traverser type
type MockTraverser struct {
	mock.Mock
}

type MockTraverser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTraverser) EXPECT() *MockTraverser_Expecter {
	return &MockTraverser_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with given fields: ctx, principal, info
func (_m *MockTraverser) Aggregate(ctx context.Context, principal *models.Principal, info *aggregation.Params) (interface{}, error) {
	ret := _m.Called(ctx, principal, info)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *aggregation.Params) (interface{}, error)); ok {
		return rf(ctx, principal, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *aggregation.Params) interface{}); ok {
		r0 = rf(ctx, principal, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Principal, *aggregation.Params) error); ok {
		r1 = rf(ctx, principal, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTraverser_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockTraverser_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - principal *models.Principal
//   - info *aggregation.Params
func (_e *MockTraverser_Expecter) Aggregate(ctx interface{}, principal interface{}, info interface{}) *MockTraverser_Aggregate_Call {
	return &MockTraverser_Aggregate_Call{Call: _e.mock.On("Aggregate", ctx, principal, info)}
}

func (_c *MockTraverser_Aggregate_Call) Run(run func(ctx context.Context, principal *models.Principal, info *aggregation.Params)) *MockTraverser_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(*aggregation.Params))
	})
	return _c
}

func (_c *MockTraverser_Aggregate_Call) Return(_a0 interface{}, _a1 error) *MockTraverser_Aggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTraverser_Aggregate_Call) RunAndReturn(run func(context.Context, *models.Principal, *aggregation.Params) (interface{}, error)) *MockTraverser_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// GetClass provides a mock function with given fields: ctx, principal, info
func (_m *MockTraverser) GetClass(ctx context.Context, principal *models.Principal, info dto.GetParams) ([]interface{}, error) {
	ret := _m.Called(ctx, principal, info)

	if len(ret) == 0 {
		panic("no return value specified for GetClass")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, dto.GetParams) ([]interface{}, error)); ok {
		return rf(ctx, principal, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, dto.GetParams) []interface{}); ok {
		r0 = rf(ctx, principal, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Principal, dto.GetParams) error); ok {
		r1 = rf(ctx, principal, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTraverser_GetClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClass'
type MockTraverser_GetClass_Call struct {
	*mock.Call
}

// GetClass is a helper method to define mock.On call
//   - ctx context.Context
//   - principal *models.Principal
//   - info dto.GetParams
func (_e *MockTraverser_Expecter) GetClass(ctx interface{}, principal interface{}, info interface{}) *MockTraverser_GetClass_Call {
	return &MockTraverser_GetClass_Call{Call: _e.mock.On("GetClass", ctx, principal, info)}
}

func (_c *MockTraverser_GetClass_Call) Run(run func(ctx context.Context, principal *models.Principal, info dto.GetParams)) *MockTraverser_GetClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(dto.GetParams))
	})
	return _c
}

func (_c *MockTraverser_GetClass_Call) Return(_a0 []interface{}, _a1 error) *MockTraverser_GetClass_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTraverser_GetClass_Call) RunAndReturn(run func(context.Context, *models.Principal, dto.GetParams) ([]interface{}, error)) *MockTraverser_GetClass_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTraverser creates a new instance of MockTraverser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTraverser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTraverser {
	mock := &MockTraverser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
