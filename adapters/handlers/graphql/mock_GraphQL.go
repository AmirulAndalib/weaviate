//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package graphql

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	tailor_incgraphql "github.com/tailor-inc/graphql"
)

// MockGraphQL is an autogenerated mock type for the GraphQL type
type MockGraphQL struct {
	mock.Mock
}

type MockGraphQL_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGraphQL) EXPECT() *MockGraphQL_Expecter {
	return &MockGraphQL_Expecter{mock: &_m.Mock}
}

// Resolve provides a mock function with given fields: _a0, query, operationName, variables
func (_m *MockGraphQL) Resolve(_a0 context.Context, query string, operationName string, variables map[string]interface{}) *tailor_incgraphql.Result {
	ret := _m.Called(_a0, query, operationName, variables)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 *tailor_incgraphql.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) *tailor_incgraphql.Result); ok {
		r0 = rf(_a0, query, operationName, variables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tailor_incgraphql.Result)
		}
	}

	return r0
}

// MockGraphQL_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockGraphQL_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - _a0 context.Context
//   - query string
//   - operationName string
//   - variables map[string]interface{}
func (_e *MockGraphQL_Expecter) Resolve(_a0 interface{}, query interface{}, operationName interface{}, variables interface{}) *MockGraphQL_Resolve_Call {
	return &MockGraphQL_Resolve_Call{Call: _e.mock.On("Resolve", _a0, query, operationName, variables)}
}

func (_c *MockGraphQL_Resolve_Call) Run(run func(_a0 context.Context, query string, operationName string, variables map[string]interface{})) *MockGraphQL_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string]interface{}))
	})
	return _c
}

func (_c *MockGraphQL_Resolve_Call) Return(_a0 *tailor_incgraphql.Result) *MockGraphQL_Resolve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGraphQL_Resolve_Call) RunAndReturn(run func(context.Context, string, string, map[string]interface{}) *tailor_incgraphql.Result) *MockGraphQL_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGraphQL creates a new instance of MockGraphQL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGraphQL(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGraphQL {
	mock := &MockGraphQL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
