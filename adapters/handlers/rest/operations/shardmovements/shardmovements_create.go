//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package shardmovements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/weaviate/weaviate/entities/models"
)

// ShardmovementsCreateHandlerFunc turns a function with the right signature into a shardmovements create handler
type ShardmovementsCreateHandlerFunc func(ShardmovementsCreateParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ShardmovementsCreateHandlerFunc) Handle(params ShardmovementsCreateParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ShardmovementsCreateHandler interface for that can handle valid shardmovements create params
type ShardmovementsCreateHandler interface {
	Handle(ShardmovementsCreateParams, *models.Principal) middleware.Responder
}

// NewShardmovementsCreate creates a new http.Handler for the shardmovements create operation
func NewShardmovementsCreate(ctx *middleware.Context, handler ShardmovementsCreateHandler) *ShardmovementsCreate {
	return &ShardmovementsCreate{Context: ctx, Handler: handler}
}

/*
	ShardmovementsCreate swagger:route POST /shardmovements shardmovements shardmovementsCreate

# Create shard movement

Creates a shard movement operation
*/
type ShardmovementsCreate struct {
	Context *middleware.Context
	Handler ShardmovementsCreateHandler
}

func (o *ShardmovementsCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewShardmovementsCreateParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
