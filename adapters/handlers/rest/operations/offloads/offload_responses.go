//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package offloads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/weaviate/weaviate/entities/models"
)

// OffloadOKCode is the HTTP code returned for type OffloadOK
const OffloadOKCode int = 200

/*
OffloadOK Backup create process successfully started.

swagger:response offloadOK
*/
type OffloadOK struct {

	/*
	  In: Body
	*/
	Payload *models.OffloadResponse `json:"body,omitempty"`
}

// NewOffloadOK creates OffloadOK with default headers values
func NewOffloadOK() *OffloadOK {

	return &OffloadOK{}
}

// WithPayload adds the payload to the offload o k response
func (o *OffloadOK) WithPayload(payload *models.OffloadResponse) *OffloadOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the offload o k response
func (o *OffloadOK) SetPayload(payload *models.OffloadResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OffloadOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// OffloadUnauthorizedCode is the HTTP code returned for type OffloadUnauthorized
const OffloadUnauthorizedCode int = 401

/*
OffloadUnauthorized Unauthorized or invalid credentials.

swagger:response offloadUnauthorized
*/
type OffloadUnauthorized struct {
}

// NewOffloadUnauthorized creates OffloadUnauthorized with default headers values
func NewOffloadUnauthorized() *OffloadUnauthorized {

	return &OffloadUnauthorized{}
}

// WriteResponse to the client
func (o *OffloadUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// OffloadForbiddenCode is the HTTP code returned for type OffloadForbidden
const OffloadForbiddenCode int = 403

/*
OffloadForbidden Forbidden

swagger:response offloadForbidden
*/
type OffloadForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewOffloadForbidden creates OffloadForbidden with default headers values
func NewOffloadForbidden() *OffloadForbidden {

	return &OffloadForbidden{}
}

// WithPayload adds the payload to the offload forbidden response
func (o *OffloadForbidden) WithPayload(payload *models.ErrorResponse) *OffloadForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the offload forbidden response
func (o *OffloadForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OffloadForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// OffloadUnprocessableEntityCode is the HTTP code returned for type OffloadUnprocessableEntity
const OffloadUnprocessableEntityCode int = 422

/*
OffloadUnprocessableEntity Invalid offload attempt.

swagger:response offloadUnprocessableEntity
*/
type OffloadUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewOffloadUnprocessableEntity creates OffloadUnprocessableEntity with default headers values
func NewOffloadUnprocessableEntity() *OffloadUnprocessableEntity {

	return &OffloadUnprocessableEntity{}
}

// WithPayload adds the payload to the offload unprocessable entity response
func (o *OffloadUnprocessableEntity) WithPayload(payload *models.ErrorResponse) *OffloadUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the offload unprocessable entity response
func (o *OffloadUnprocessableEntity) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OffloadUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// OffloadInternalServerErrorCode is the HTTP code returned for type OffloadInternalServerError
const OffloadInternalServerErrorCode int = 500

/*
OffloadInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response offloadInternalServerError
*/
type OffloadInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewOffloadInternalServerError creates OffloadInternalServerError with default headers values
func NewOffloadInternalServerError() *OffloadInternalServerError {

	return &OffloadInternalServerError{}
}

// WithPayload adds the payload to the offload internal server error response
func (o *OffloadInternalServerError) WithPayload(payload *models.ErrorResponse) *OffloadInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the offload internal server error response
func (o *OffloadInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OffloadInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
