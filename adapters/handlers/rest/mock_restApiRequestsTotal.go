//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package rest

import mock "github.com/stretchr/testify/mock"

// MockrestApiRequestsTotal is an autogenerated mock type for the restApiRequestsTotal type
type MockrestApiRequestsTotal struct {
	mock.Mock
}

type MockrestApiRequestsTotal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockrestApiRequestsTotal) EXPECT() *MockrestApiRequestsTotal_Expecter {
	return &MockrestApiRequestsTotal_Expecter{mock: &_m.Mock}
}

// logError provides a mock function with given fields: className, err
func (_m *MockrestApiRequestsTotal) logError(className string, err error) {
	_m.Called(className, err)
}

// MockrestApiRequestsTotal_logError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'logError'
type MockrestApiRequestsTotal_logError_Call struct {
	*mock.Call
}

// logError is a helper method to define mock.On call
//   - className string
//   - err error
func (_e *MockrestApiRequestsTotal_Expecter) logError(className interface{}, err interface{}) *MockrestApiRequestsTotal_logError_Call {
	return &MockrestApiRequestsTotal_logError_Call{Call: _e.mock.On("logError", className, err)}
}

func (_c *MockrestApiRequestsTotal_logError_Call) Run(run func(className string, err error)) *MockrestApiRequestsTotal_logError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(error))
	})
	return _c
}

func (_c *MockrestApiRequestsTotal_logError_Call) Return() *MockrestApiRequestsTotal_logError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockrestApiRequestsTotal_logError_Call) RunAndReturn(run func(string, error)) *MockrestApiRequestsTotal_logError_Call {
	_c.Call.Return(run)
	return _c
}

// logOk provides a mock function with given fields: className
func (_m *MockrestApiRequestsTotal) logOk(className string) {
	_m.Called(className)
}

// MockrestApiRequestsTotal_logOk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'logOk'
type MockrestApiRequestsTotal_logOk_Call struct {
	*mock.Call
}

// logOk is a helper method to define mock.On call
//   - className string
func (_e *MockrestApiRequestsTotal_Expecter) logOk(className interface{}) *MockrestApiRequestsTotal_logOk_Call {
	return &MockrestApiRequestsTotal_logOk_Call{Call: _e.mock.On("logOk", className)}
}

func (_c *MockrestApiRequestsTotal_logOk_Call) Run(run func(className string)) *MockrestApiRequestsTotal_logOk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockrestApiRequestsTotal_logOk_Call) Return() *MockrestApiRequestsTotal_logOk_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockrestApiRequestsTotal_logOk_Call) RunAndReturn(run func(string)) *MockrestApiRequestsTotal_logOk_Call {
	_c.Call.Return(run)
	return _c
}

// logServerError provides a mock function with given fields: className, err
func (_m *MockrestApiRequestsTotal) logServerError(className string, err error) {
	_m.Called(className, err)
}

// MockrestApiRequestsTotal_logServerError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'logServerError'
type MockrestApiRequestsTotal_logServerError_Call struct {
	*mock.Call
}

// logServerError is a helper method to define mock.On call
//   - className string
//   - err error
func (_e *MockrestApiRequestsTotal_Expecter) logServerError(className interface{}, err interface{}) *MockrestApiRequestsTotal_logServerError_Call {
	return &MockrestApiRequestsTotal_logServerError_Call{Call: _e.mock.On("logServerError", className, err)}
}

func (_c *MockrestApiRequestsTotal_logServerError_Call) Run(run func(className string, err error)) *MockrestApiRequestsTotal_logServerError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(error))
	})
	return _c
}

func (_c *MockrestApiRequestsTotal_logServerError_Call) Return() *MockrestApiRequestsTotal_logServerError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockrestApiRequestsTotal_logServerError_Call) RunAndReturn(run func(string, error)) *MockrestApiRequestsTotal_logServerError_Call {
	_c.Call.Return(run)
	return _c
}

// logUserError provides a mock function with given fields: className
func (_m *MockrestApiRequestsTotal) logUserError(className string) {
	_m.Called(className)
}

// MockrestApiRequestsTotal_logUserError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'logUserError'
type MockrestApiRequestsTotal_logUserError_Call struct {
	*mock.Call
}

// logUserError is a helper method to define mock.On call
//   - className string
func (_e *MockrestApiRequestsTotal_Expecter) logUserError(className interface{}) *MockrestApiRequestsTotal_logUserError_Call {
	return &MockrestApiRequestsTotal_logUserError_Call{Call: _e.mock.On("logUserError", className)}
}

func (_c *MockrestApiRequestsTotal_logUserError_Call) Run(run func(className string)) *MockrestApiRequestsTotal_logUserError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockrestApiRequestsTotal_logUserError_Call) Return() *MockrestApiRequestsTotal_logUserError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockrestApiRequestsTotal_logUserError_Call) RunAndReturn(run func(string)) *MockrestApiRequestsTotal_logUserError_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockrestApiRequestsTotal creates a new instance of MockrestApiRequestsTotal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockrestApiRequestsTotal(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockrestApiRequestsTotal {
	mock := &MockrestApiRequestsTotal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
