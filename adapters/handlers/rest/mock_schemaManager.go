//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package rest

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"

	schema "github.com/weaviate/weaviate/entities/schema"
)

// MockschemaManager is an autogenerated mock type for the schemaManager type
type MockschemaManager struct {
	mock.Mock
}

type MockschemaManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockschemaManager) EXPECT() *MockschemaManager_Expecter {
	return &MockschemaManager_Expecter{mock: &_m.Mock}
}

// GetSchema provides a mock function with given fields: principal
func (_m *MockschemaManager) GetSchema(principal *models.Principal) (schema.Schema, error) {
	ret := _m.Called(principal)

	if len(ret) == 0 {
		panic("no return value specified for GetSchema")
	}

	var r0 schema.Schema
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Principal) (schema.Schema, error)); ok {
		return rf(principal)
	}
	if rf, ok := ret.Get(0).(func(*models.Principal) schema.Schema); ok {
		r0 = rf(principal)
	} else {
		r0 = ret.Get(0).(schema.Schema)
	}

	if rf, ok := ret.Get(1).(func(*models.Principal) error); ok {
		r1 = rf(principal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockschemaManager_GetSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchema'
type MockschemaManager_GetSchema_Call struct {
	*mock.Call
}

// GetSchema is a helper method to define mock.On call
//   - principal *models.Principal
func (_e *MockschemaManager_Expecter) GetSchema(principal interface{}) *MockschemaManager_GetSchema_Call {
	return &MockschemaManager_GetSchema_Call{Call: _e.mock.On("GetSchema", principal)}
}

func (_c *MockschemaManager_GetSchema_Call) Run(run func(principal *models.Principal)) *MockschemaManager_GetSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Principal))
	})
	return _c
}

func (_c *MockschemaManager_GetSchema_Call) Return(_a0 schema.Schema, _a1 error) *MockschemaManager_GetSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockschemaManager_GetSchema_Call) RunAndReturn(run func(*models.Principal) (schema.Schema, error)) *MockschemaManager_GetSchema_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchemaSkipAuth provides a mock function with given fields:
func (_m *MockschemaManager) GetSchemaSkipAuth() schema.Schema {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSchemaSkipAuth")
	}

	var r0 schema.Schema
	if rf, ok := ret.Get(0).(func() schema.Schema); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(schema.Schema)
	}

	return r0
}

// MockschemaManager_GetSchemaSkipAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchemaSkipAuth'
type MockschemaManager_GetSchemaSkipAuth_Call struct {
	*mock.Call
}

// GetSchemaSkipAuth is a helper method to define mock.On call
func (_e *MockschemaManager_Expecter) GetSchemaSkipAuth() *MockschemaManager_GetSchemaSkipAuth_Call {
	return &MockschemaManager_GetSchemaSkipAuth_Call{Call: _e.mock.On("GetSchemaSkipAuth")}
}

func (_c *MockschemaManager_GetSchemaSkipAuth_Call) Run(run func()) *MockschemaManager_GetSchemaSkipAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockschemaManager_GetSchemaSkipAuth_Call) Return(_a0 schema.Schema) *MockschemaManager_GetSchemaSkipAuth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockschemaManager_GetSchemaSkipAuth_Call) RunAndReturn(run func() schema.Schema) *MockschemaManager_GetSchemaSkipAuth_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockschemaManager creates a new instance of MockschemaManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockschemaManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockschemaManager {
	mock := &MockschemaManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
