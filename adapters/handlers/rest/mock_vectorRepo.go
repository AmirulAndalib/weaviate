//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package rest

import (
	additional "github.com/weaviate/weaviate/entities/additional"
	aggregation "github.com/weaviate/weaviate/entities/aggregation"

	backup "github.com/weaviate/weaviate/entities/backup"

	classification "github.com/weaviate/weaviate/usecases/classification"

	context "context"

	crossref "github.com/weaviate/weaviate/entities/schema/crossref"

	dto "github.com/weaviate/weaviate/entities/dto"

	filters "github.com/weaviate/weaviate/entities/filters"

	mock "github.com/stretchr/testify/mock"

	models "github.com/weaviate/weaviate/entities/models"

	objects "github.com/weaviate/weaviate/usecases/objects"

	schema "github.com/weaviate/weaviate/usecases/schema"

	search "github.com/weaviate/weaviate/entities/search"

	strfmt "github.com/go-openapi/strfmt"
)

// MockvectorRepo is an autogenerated mock type for the vectorRepo type
type MockvectorRepo struct {
	mock.Mock
}

type MockvectorRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockvectorRepo) EXPECT() *MockvectorRepo_Expecter {
	return &MockvectorRepo_Expecter{mock: &_m.Mock}
}

// AddBatchReferences provides a mock function with given fields: ctx, references, repl
func (_m *MockvectorRepo) AddBatchReferences(ctx context.Context, references objects.BatchReferences, repl *additional.ReplicationProperties) (objects.BatchReferences, error) {
	ret := _m.Called(ctx, references, repl)

	if len(ret) == 0 {
		panic("no return value specified for AddBatchReferences")
	}

	var r0 objects.BatchReferences
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, objects.BatchReferences, *additional.ReplicationProperties) (objects.BatchReferences, error)); ok {
		return rf(ctx, references, repl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, objects.BatchReferences, *additional.ReplicationProperties) objects.BatchReferences); ok {
		r0 = rf(ctx, references, repl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(objects.BatchReferences)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, objects.BatchReferences, *additional.ReplicationProperties) error); ok {
		r1 = rf(ctx, references, repl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_AddBatchReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBatchReferences'
type MockvectorRepo_AddBatchReferences_Call struct {
	*mock.Call
}

// AddBatchReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - references objects.BatchReferences
//   - repl *additional.ReplicationProperties
func (_e *MockvectorRepo_Expecter) AddBatchReferences(ctx interface{}, references interface{}, repl interface{}) *MockvectorRepo_AddBatchReferences_Call {
	return &MockvectorRepo_AddBatchReferences_Call{Call: _e.mock.On("AddBatchReferences", ctx, references, repl)}
}

func (_c *MockvectorRepo_AddBatchReferences_Call) Run(run func(ctx context.Context, references objects.BatchReferences, repl *additional.ReplicationProperties)) *MockvectorRepo_AddBatchReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(objects.BatchReferences), args[2].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockvectorRepo_AddBatchReferences_Call) Return(_a0 objects.BatchReferences, _a1 error) *MockvectorRepo_AddBatchReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_AddBatchReferences_Call) RunAndReturn(run func(context.Context, objects.BatchReferences, *additional.ReplicationProperties) (objects.BatchReferences, error)) *MockvectorRepo_AddBatchReferences_Call {
	_c.Call.Return(run)
	return _c
}

// AddReference provides a mock function with given fields: ctx, source, target, repl, tenant
func (_m *MockvectorRepo) AddReference(ctx context.Context, source *crossref.RefSource, target *crossref.Ref, repl *additional.ReplicationProperties, tenant string) error {
	ret := _m.Called(ctx, source, target, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for AddReference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *crossref.RefSource, *crossref.Ref, *additional.ReplicationProperties, string) error); ok {
		r0 = rf(ctx, source, target, repl, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockvectorRepo_AddReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReference'
type MockvectorRepo_AddReference_Call struct {
	*mock.Call
}

// AddReference is a helper method to define mock.On call
//   - ctx context.Context
//   - source *crossref.RefSource
//   - target *crossref.Ref
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockvectorRepo_Expecter) AddReference(ctx interface{}, source interface{}, target interface{}, repl interface{}, tenant interface{}) *MockvectorRepo_AddReference_Call {
	return &MockvectorRepo_AddReference_Call{Call: _e.mock.On("AddReference", ctx, source, target, repl, tenant)}
}

func (_c *MockvectorRepo_AddReference_Call) Run(run func(ctx context.Context, source *crossref.RefSource, target *crossref.Ref, repl *additional.ReplicationProperties, tenant string)) *MockvectorRepo_AddReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*crossref.RefSource), args[2].(*crossref.Ref), args[3].(*additional.ReplicationProperties), args[4].(string))
	})
	return _c
}

func (_c *MockvectorRepo_AddReference_Call) Return(_a0 error) *MockvectorRepo_AddReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockvectorRepo_AddReference_Call) RunAndReturn(run func(context.Context, *crossref.RefSource, *crossref.Ref, *additional.ReplicationProperties, string) error) *MockvectorRepo_AddReference_Call {
	_c.Call.Return(run)
	return _c
}

// Aggregate provides a mock function with given fields: ctx, params
func (_m *MockvectorRepo) Aggregate(ctx context.Context, params aggregation.Params) (*aggregation.Result, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 *aggregation.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aggregation.Params) (*aggregation.Result, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aggregation.Params) *aggregation.Result); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregation.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aggregation.Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockvectorRepo_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - params aggregation.Params
func (_e *MockvectorRepo_Expecter) Aggregate(ctx interface{}, params interface{}) *MockvectorRepo_Aggregate_Call {
	return &MockvectorRepo_Aggregate_Call{Call: _e.mock.On("Aggregate", ctx, params)}
}

func (_c *MockvectorRepo_Aggregate_Call) Run(run func(ctx context.Context, params aggregation.Params)) *MockvectorRepo_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aggregation.Params))
	})
	return _c
}

func (_c *MockvectorRepo_Aggregate_Call) Return(_a0 *aggregation.Result, _a1 error) *MockvectorRepo_Aggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_Aggregate_Call) RunAndReturn(run func(context.Context, aggregation.Params) (*aggregation.Result, error)) *MockvectorRepo_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// AggregateNeighbors provides a mock function with given fields: ctx, vector, class, properties, k, filter
func (_m *MockvectorRepo) AggregateNeighbors(ctx context.Context, vector []float32, class string, properties []string, k int, filter *filters.LocalFilter) ([]classification.NeighborRef, error) {
	ret := _m.Called(ctx, vector, class, properties, k, filter)

	if len(ret) == 0 {
		panic("no return value specified for AggregateNeighbors")
	}

	var r0 []classification.NeighborRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []float32, string, []string, int, *filters.LocalFilter) ([]classification.NeighborRef, error)); ok {
		return rf(ctx, vector, class, properties, k, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []float32, string, []string, int, *filters.LocalFilter) []classification.NeighborRef); ok {
		r0 = rf(ctx, vector, class, properties, k, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]classification.NeighborRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []float32, string, []string, int, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, vector, class, properties, k, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_AggregateNeighbors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AggregateNeighbors'
type MockvectorRepo_AggregateNeighbors_Call struct {
	*mock.Call
}

// AggregateNeighbors is a helper method to define mock.On call
//   - ctx context.Context
//   - vector []float32
//   - class string
//   - properties []string
//   - k int
//   - filter *filters.LocalFilter
func (_e *MockvectorRepo_Expecter) AggregateNeighbors(ctx interface{}, vector interface{}, class interface{}, properties interface{}, k interface{}, filter interface{}) *MockvectorRepo_AggregateNeighbors_Call {
	return &MockvectorRepo_AggregateNeighbors_Call{Call: _e.mock.On("AggregateNeighbors", ctx, vector, class, properties, k, filter)}
}

func (_c *MockvectorRepo_AggregateNeighbors_Call) Run(run func(ctx context.Context, vector []float32, class string, properties []string, k int, filter *filters.LocalFilter)) *MockvectorRepo_AggregateNeighbors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]float32), args[2].(string), args[3].([]string), args[4].(int), args[5].(*filters.LocalFilter))
	})
	return _c
}

func (_c *MockvectorRepo_AggregateNeighbors_Call) Return(_a0 []classification.NeighborRef, _a1 error) *MockvectorRepo_AggregateNeighbors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_AggregateNeighbors_Call) RunAndReturn(run func(context.Context, []float32, string, []string, int, *filters.LocalFilter) ([]classification.NeighborRef, error)) *MockvectorRepo_AggregateNeighbors_Call {
	_c.Call.Return(run)
	return _c
}

// BatchDeleteObjects provides a mock function with given fields: ctx, params, repl, tenant
func (_m *MockvectorRepo) BatchDeleteObjects(ctx context.Context, params objects.BatchDeleteParams, repl *additional.ReplicationProperties, tenant string) (objects.BatchDeleteResult, error) {
	ret := _m.Called(ctx, params, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteObjects")
	}

	var r0 objects.BatchDeleteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, objects.BatchDeleteParams, *additional.ReplicationProperties, string) (objects.BatchDeleteResult, error)); ok {
		return rf(ctx, params, repl, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, objects.BatchDeleteParams, *additional.ReplicationProperties, string) objects.BatchDeleteResult); ok {
		r0 = rf(ctx, params, repl, tenant)
	} else {
		r0 = ret.Get(0).(objects.BatchDeleteResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, objects.BatchDeleteParams, *additional.ReplicationProperties, string) error); ok {
		r1 = rf(ctx, params, repl, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_BatchDeleteObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchDeleteObjects'
type MockvectorRepo_BatchDeleteObjects_Call struct {
	*mock.Call
}

// BatchDeleteObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - params objects.BatchDeleteParams
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockvectorRepo_Expecter) BatchDeleteObjects(ctx interface{}, params interface{}, repl interface{}, tenant interface{}) *MockvectorRepo_BatchDeleteObjects_Call {
	return &MockvectorRepo_BatchDeleteObjects_Call{Call: _e.mock.On("BatchDeleteObjects", ctx, params, repl, tenant)}
}

func (_c *MockvectorRepo_BatchDeleteObjects_Call) Run(run func(ctx context.Context, params objects.BatchDeleteParams, repl *additional.ReplicationProperties, tenant string)) *MockvectorRepo_BatchDeleteObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(objects.BatchDeleteParams), args[2].(*additional.ReplicationProperties), args[3].(string))
	})
	return _c
}

func (_c *MockvectorRepo_BatchDeleteObjects_Call) Return(_a0 objects.BatchDeleteResult, _a1 error) *MockvectorRepo_BatchDeleteObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_BatchDeleteObjects_Call) RunAndReturn(run func(context.Context, objects.BatchDeleteParams, *additional.ReplicationProperties, string) (objects.BatchDeleteResult, error)) *MockvectorRepo_BatchDeleteObjects_Call {
	_c.Call.Return(run)
	return _c
}

// BatchPutObjects provides a mock function with given fields: ctx, _a1, repl
func (_m *MockvectorRepo) BatchPutObjects(ctx context.Context, _a1 objects.BatchObjects, repl *additional.ReplicationProperties) (objects.BatchObjects, error) {
	ret := _m.Called(ctx, _a1, repl)

	if len(ret) == 0 {
		panic("no return value specified for BatchPutObjects")
	}

	var r0 objects.BatchObjects
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, objects.BatchObjects, *additional.ReplicationProperties) (objects.BatchObjects, error)); ok {
		return rf(ctx, _a1, repl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, objects.BatchObjects, *additional.ReplicationProperties) objects.BatchObjects); ok {
		r0 = rf(ctx, _a1, repl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(objects.BatchObjects)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, objects.BatchObjects, *additional.ReplicationProperties) error); ok {
		r1 = rf(ctx, _a1, repl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_BatchPutObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchPutObjects'
type MockvectorRepo_BatchPutObjects_Call struct {
	*mock.Call
}

// BatchPutObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 objects.BatchObjects
//   - repl *additional.ReplicationProperties
func (_e *MockvectorRepo_Expecter) BatchPutObjects(ctx interface{}, _a1 interface{}, repl interface{}) *MockvectorRepo_BatchPutObjects_Call {
	return &MockvectorRepo_BatchPutObjects_Call{Call: _e.mock.On("BatchPutObjects", ctx, _a1, repl)}
}

func (_c *MockvectorRepo_BatchPutObjects_Call) Run(run func(ctx context.Context, _a1 objects.BatchObjects, repl *additional.ReplicationProperties)) *MockvectorRepo_BatchPutObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(objects.BatchObjects), args[2].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockvectorRepo_BatchPutObjects_Call) Return(_a0 objects.BatchObjects, _a1 error) *MockvectorRepo_BatchPutObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_BatchPutObjects_Call) RunAndReturn(run func(context.Context, objects.BatchObjects, *additional.ReplicationProperties) (objects.BatchObjects, error)) *MockvectorRepo_BatchPutObjects_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function with given fields: ctx, className, id, repl, tenant
func (_m *MockvectorRepo) DeleteObject(ctx context.Context, className string, id strfmt.UUID, repl *additional.ReplicationProperties, tenant string) error {
	ret := _m.Called(ctx, className, id, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) error); ok {
		r0 = rf(ctx, className, id, repl, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockvectorRepo_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type MockvectorRepo_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - id strfmt.UUID
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockvectorRepo_Expecter) DeleteObject(ctx interface{}, className interface{}, id interface{}, repl interface{}, tenant interface{}) *MockvectorRepo_DeleteObject_Call {
	return &MockvectorRepo_DeleteObject_Call{Call: _e.mock.On("DeleteObject", ctx, className, id, repl, tenant)}
}

func (_c *MockvectorRepo_DeleteObject_Call) Run(run func(ctx context.Context, className string, id strfmt.UUID, repl *additional.ReplicationProperties, tenant string)) *MockvectorRepo_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID), args[3].(*additional.ReplicationProperties), args[4].(string))
	})
	return _c
}

func (_c *MockvectorRepo_DeleteObject_Call) Return(_a0 error) *MockvectorRepo_DeleteObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockvectorRepo_DeleteObject_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) error) *MockvectorRepo_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, class, id, repl, tenant
func (_m *MockvectorRepo) Exists(ctx context.Context, class string, id strfmt.UUID, repl *additional.ReplicationProperties, tenant string) (bool, error) {
	ret := _m.Called(ctx, class, id, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) (bool, error)); ok {
		return rf(ctx, class, id, repl, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) bool); ok {
		r0 = rf(ctx, class, id, repl, tenant)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) error); ok {
		r1 = rf(ctx, class, id, repl, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockvectorRepo_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
//   - id strfmt.UUID
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockvectorRepo_Expecter) Exists(ctx interface{}, class interface{}, id interface{}, repl interface{}, tenant interface{}) *MockvectorRepo_Exists_Call {
	return &MockvectorRepo_Exists_Call{Call: _e.mock.On("Exists", ctx, class, id, repl, tenant)}
}

func (_c *MockvectorRepo_Exists_Call) Run(run func(ctx context.Context, class string, id strfmt.UUID, repl *additional.ReplicationProperties, tenant string)) *MockvectorRepo_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID), args[3].(*additional.ReplicationProperties), args[4].(string))
	})
	return _c
}

func (_c *MockvectorRepo_Exists_Call) Return(_a0 bool, _a1 error) *MockvectorRepo_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_Exists_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) (bool, error)) *MockvectorRepo_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnclassified provides a mock function with given fields: ctx, class, properties, filter
func (_m *MockvectorRepo) GetUnclassified(ctx context.Context, class string, properties []string, filter *filters.LocalFilter) ([]search.Result, error) {
	ret := _m.Called(ctx, class, properties, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetUnclassified")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, *filters.LocalFilter) ([]search.Result, error)); ok {
		return rf(ctx, class, properties, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, *filters.LocalFilter) []search.Result); ok {
		r0 = rf(ctx, class, properties, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, class, properties, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_GetUnclassified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnclassified'
type MockvectorRepo_GetUnclassified_Call struct {
	*mock.Call
}

// GetUnclassified is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
//   - properties []string
//   - filter *filters.LocalFilter
func (_e *MockvectorRepo_Expecter) GetUnclassified(ctx interface{}, class interface{}, properties interface{}, filter interface{}) *MockvectorRepo_GetUnclassified_Call {
	return &MockvectorRepo_GetUnclassified_Call{Call: _e.mock.On("GetUnclassified", ctx, class, properties, filter)}
}

func (_c *MockvectorRepo_GetUnclassified_Call) Run(run func(ctx context.Context, class string, properties []string, filter *filters.LocalFilter)) *MockvectorRepo_GetUnclassified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].(*filters.LocalFilter))
	})
	return _c
}

func (_c *MockvectorRepo_GetUnclassified_Call) Return(_a0 []search.Result, _a1 error) *MockvectorRepo_GetUnclassified_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_GetUnclassified_Call) RunAndReturn(run func(context.Context, string, []string, *filters.LocalFilter) ([]search.Result, error)) *MockvectorRepo_GetUnclassified_Call {
	_c.Call.Return(run)
	return _c
}

// Merge provides a mock function with given fields: ctx, merge, repl, tenant
func (_m *MockvectorRepo) Merge(ctx context.Context, merge objects.MergeDocument, repl *additional.ReplicationProperties, tenant string) error {
	ret := _m.Called(ctx, merge, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for Merge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, objects.MergeDocument, *additional.ReplicationProperties, string) error); ok {
		r0 = rf(ctx, merge, repl, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockvectorRepo_Merge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Merge'
type MockvectorRepo_Merge_Call struct {
	*mock.Call
}

// Merge is a helper method to define mock.On call
//   - ctx context.Context
//   - merge objects.MergeDocument
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockvectorRepo_Expecter) Merge(ctx interface{}, merge interface{}, repl interface{}, tenant interface{}) *MockvectorRepo_Merge_Call {
	return &MockvectorRepo_Merge_Call{Call: _e.mock.On("Merge", ctx, merge, repl, tenant)}
}

func (_c *MockvectorRepo_Merge_Call) Run(run func(ctx context.Context, merge objects.MergeDocument, repl *additional.ReplicationProperties, tenant string)) *MockvectorRepo_Merge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(objects.MergeDocument), args[2].(*additional.ReplicationProperties), args[3].(string))
	})
	return _c
}

func (_c *MockvectorRepo_Merge_Call) Return(_a0 error) *MockvectorRepo_Merge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockvectorRepo_Merge_Call) RunAndReturn(run func(context.Context, objects.MergeDocument, *additional.ReplicationProperties, string) error) *MockvectorRepo_Merge_Call {
	_c.Call.Return(run)
	return _c
}

// Object provides a mock function with given fields: ctx, class, id, props, _a4, repl, tenant
func (_m *MockvectorRepo) Object(ctx context.Context, class string, id strfmt.UUID, props search.SelectProperties, _a4 additional.Properties, repl *additional.ReplicationProperties, tenant string) (*search.Result, error) {
	ret := _m.Called(ctx, class, id, props, _a4, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for Object")
	}

	var r0 *search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) (*search.Result, error)); ok {
		return rf(ctx, class, id, props, _a4, repl, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) *search.Result); ok {
		r0 = rf(ctx, class, id, props, _a4, repl, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) error); ok {
		r1 = rf(ctx, class, id, props, _a4, repl, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_Object_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Object'
type MockvectorRepo_Object_Call struct {
	*mock.Call
}

// Object is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a4 additional.Properties
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockvectorRepo_Expecter) Object(ctx interface{}, class interface{}, id interface{}, props interface{}, _a4 interface{}, repl interface{}, tenant interface{}) *MockvectorRepo_Object_Call {
	return &MockvectorRepo_Object_Call{Call: _e.mock.On("Object", ctx, class, id, props, _a4, repl, tenant)}
}

func (_c *MockvectorRepo_Object_Call) Run(run func(ctx context.Context, class string, id strfmt.UUID, props search.SelectProperties, _a4 additional.Properties, repl *additional.ReplicationProperties, tenant string)) *MockvectorRepo_Object_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID), args[3].(search.SelectProperties), args[4].(additional.Properties), args[5].(*additional.ReplicationProperties), args[6].(string))
	})
	return _c
}

func (_c *MockvectorRepo_Object_Call) Return(_a0 *search.Result, _a1 error) *MockvectorRepo_Object_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_Object_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) (*search.Result, error)) *MockvectorRepo_Object_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectByID provides a mock function with given fields: ctx, id, props, _a3, tenant
func (_m *MockvectorRepo) ObjectByID(ctx context.Context, id strfmt.UUID, props search.SelectProperties, _a3 additional.Properties, tenant string) (*search.Result, error) {
	ret := _m.Called(ctx, id, props, _a3, tenant)

	if len(ret) == 0 {
		panic("no return value specified for ObjectByID")
	}

	var r0 *search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) (*search.Result, error)); ok {
		return rf(ctx, id, props, _a3, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) *search.Result); ok {
		r0 = rf(ctx, id, props, _a3, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) error); ok {
		r1 = rf(ctx, id, props, _a3, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_ObjectByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectByID'
type MockvectorRepo_ObjectByID_Call struct {
	*mock.Call
}

// ObjectByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a3 additional.Properties
//   - tenant string
func (_e *MockvectorRepo_Expecter) ObjectByID(ctx interface{}, id interface{}, props interface{}, _a3 interface{}, tenant interface{}) *MockvectorRepo_ObjectByID_Call {
	return &MockvectorRepo_ObjectByID_Call{Call: _e.mock.On("ObjectByID", ctx, id, props, _a3, tenant)}
}

func (_c *MockvectorRepo_ObjectByID_Call) Run(run func(ctx context.Context, id strfmt.UUID, props search.SelectProperties, _a3 additional.Properties, tenant string)) *MockvectorRepo_ObjectByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(strfmt.UUID), args[2].(search.SelectProperties), args[3].(additional.Properties), args[4].(string))
	})
	return _c
}

func (_c *MockvectorRepo_ObjectByID_Call) Return(_a0 *search.Result, _a1 error) *MockvectorRepo_ObjectByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_ObjectByID_Call) RunAndReturn(run func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) (*search.Result, error)) *MockvectorRepo_ObjectByID_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectSearch provides a mock function with given fields: ctx, offset, limit, _a3, sort, _a5, tenant
func (_m *MockvectorRepo) ObjectSearch(ctx context.Context, offset int, limit int, _a3 *filters.LocalFilter, sort []filters.Sort, _a5 additional.Properties, tenant string) (search.Results, error) {
	ret := _m.Called(ctx, offset, limit, _a3, sort, _a5, tenant)

	if len(ret) == 0 {
		panic("no return value specified for ObjectSearch")
	}

	var r0 search.Results
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *filters.LocalFilter, []filters.Sort, additional.Properties, string) (search.Results, error)); ok {
		return rf(ctx, offset, limit, _a3, sort, _a5, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *filters.LocalFilter, []filters.Sort, additional.Properties, string) search.Results); ok {
		r0 = rf(ctx, offset, limit, _a3, sort, _a5, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(search.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *filters.LocalFilter, []filters.Sort, additional.Properties, string) error); ok {
		r1 = rf(ctx, offset, limit, _a3, sort, _a5, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_ObjectSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectSearch'
type MockvectorRepo_ObjectSearch_Call struct {
	*mock.Call
}

// ObjectSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - limit int
//   - _a3 *filters.LocalFilter
//   - sort []filters.Sort
//   - _a5 additional.Properties
//   - tenant string
func (_e *MockvectorRepo_Expecter) ObjectSearch(ctx interface{}, offset interface{}, limit interface{}, _a3 interface{}, sort interface{}, _a5 interface{}, tenant interface{}) *MockvectorRepo_ObjectSearch_Call {
	return &MockvectorRepo_ObjectSearch_Call{Call: _e.mock.On("ObjectSearch", ctx, offset, limit, _a3, sort, _a5, tenant)}
}

func (_c *MockvectorRepo_ObjectSearch_Call) Run(run func(ctx context.Context, offset int, limit int, _a3 *filters.LocalFilter, sort []filters.Sort, _a5 additional.Properties, tenant string)) *MockvectorRepo_ObjectSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*filters.LocalFilter), args[4].([]filters.Sort), args[5].(additional.Properties), args[6].(string))
	})
	return _c
}

func (_c *MockvectorRepo_ObjectSearch_Call) Return(_a0 search.Results, _a1 error) *MockvectorRepo_ObjectSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_ObjectSearch_Call) RunAndReturn(run func(context.Context, int, int, *filters.LocalFilter, []filters.Sort, additional.Properties, string) (search.Results, error)) *MockvectorRepo_ObjectSearch_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsByID provides a mock function with given fields: ctx, id, props, _a3, tenant
func (_m *MockvectorRepo) ObjectsByID(ctx context.Context, id strfmt.UUID, props search.SelectProperties, _a3 additional.Properties, tenant string) (search.Results, error) {
	ret := _m.Called(ctx, id, props, _a3, tenant)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsByID")
	}

	var r0 search.Results
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) (search.Results, error)); ok {
		return rf(ctx, id, props, _a3, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) search.Results); ok {
		r0 = rf(ctx, id, props, _a3, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(search.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) error); ok {
		r1 = rf(ctx, id, props, _a3, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_ObjectsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsByID'
type MockvectorRepo_ObjectsByID_Call struct {
	*mock.Call
}

// ObjectsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a3 additional.Properties
//   - tenant string
func (_e *MockvectorRepo_Expecter) ObjectsByID(ctx interface{}, id interface{}, props interface{}, _a3 interface{}, tenant interface{}) *MockvectorRepo_ObjectsByID_Call {
	return &MockvectorRepo_ObjectsByID_Call{Call: _e.mock.On("ObjectsByID", ctx, id, props, _a3, tenant)}
}

func (_c *MockvectorRepo_ObjectsByID_Call) Run(run func(ctx context.Context, id strfmt.UUID, props search.SelectProperties, _a3 additional.Properties, tenant string)) *MockvectorRepo_ObjectsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(strfmt.UUID), args[2].(search.SelectProperties), args[3].(additional.Properties), args[4].(string))
	})
	return _c
}

func (_c *MockvectorRepo_ObjectsByID_Call) Return(_a0 search.Results, _a1 error) *MockvectorRepo_ObjectsByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_ObjectsByID_Call) RunAndReturn(run func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) (search.Results, error)) *MockvectorRepo_ObjectsByID_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, concept, vector, vectors, repl
func (_m *MockvectorRepo) PutObject(ctx context.Context, concept *models.Object, vector []float32, vectors models.Vectors, repl *additional.ReplicationProperties) error {
	ret := _m.Called(ctx, concept, vector, vectors, repl)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Object, []float32, models.Vectors, *additional.ReplicationProperties) error); ok {
		r0 = rf(ctx, concept, vector, vectors, repl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockvectorRepo_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type MockvectorRepo_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - concept *models.Object
//   - vector []float32
//   - vectors models.Vectors
//   - repl *additional.ReplicationProperties
func (_e *MockvectorRepo_Expecter) PutObject(ctx interface{}, concept interface{}, vector interface{}, vectors interface{}, repl interface{}) *MockvectorRepo_PutObject_Call {
	return &MockvectorRepo_PutObject_Call{Call: _e.mock.On("PutObject", ctx, concept, vector, vectors, repl)}
}

func (_c *MockvectorRepo_PutObject_Call) Run(run func(ctx context.Context, concept *models.Object, vector []float32, vectors models.Vectors, repl *additional.ReplicationProperties)) *MockvectorRepo_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Object), args[2].([]float32), args[3].(models.Vectors), args[4].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockvectorRepo_PutObject_Call) Return(_a0 error) *MockvectorRepo_PutObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockvectorRepo_PutObject_Call) RunAndReturn(run func(context.Context, *models.Object, []float32, models.Vectors, *additional.ReplicationProperties) error) *MockvectorRepo_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *MockvectorRepo) Query(_a0 context.Context, _a1 *objects.QueryInput) (search.Results, *objects.Error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 search.Results
	var r1 *objects.Error
	if rf, ok := ret.Get(0).(func(context.Context, *objects.QueryInput) (search.Results, *objects.Error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *objects.QueryInput) search.Results); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(search.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *objects.QueryInput) *objects.Error); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*objects.Error)
		}
	}

	return r0, r1
}

// MockvectorRepo_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockvectorRepo_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *objects.QueryInput
func (_e *MockvectorRepo_Expecter) Query(_a0 interface{}, _a1 interface{}) *MockvectorRepo_Query_Call {
	return &MockvectorRepo_Query_Call{Call: _e.mock.On("Query", _a0, _a1)}
}

func (_c *MockvectorRepo_Query_Call) Run(run func(_a0 context.Context, _a1 *objects.QueryInput)) *MockvectorRepo_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*objects.QueryInput))
	})
	return _c
}

func (_c *MockvectorRepo_Query_Call) Return(_a0 search.Results, _a1 *objects.Error) *MockvectorRepo_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_Query_Call) RunAndReturn(run func(context.Context, *objects.QueryInput) (search.Results, *objects.Error)) *MockvectorRepo_Query_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseBackup provides a mock function with given fields: ctx, id, className
func (_m *MockvectorRepo) ReleaseBackup(ctx context.Context, id string, className string) error {
	ret := _m.Called(ctx, id, className)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseBackup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, className)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockvectorRepo_ReleaseBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseBackup'
type MockvectorRepo_ReleaseBackup_Call struct {
	*mock.Call
}

// ReleaseBackup is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - className string
func (_e *MockvectorRepo_Expecter) ReleaseBackup(ctx interface{}, id interface{}, className interface{}) *MockvectorRepo_ReleaseBackup_Call {
	return &MockvectorRepo_ReleaseBackup_Call{Call: _e.mock.On("ReleaseBackup", ctx, id, className)}
}

func (_c *MockvectorRepo_ReleaseBackup_Call) Run(run func(ctx context.Context, id string, className string)) *MockvectorRepo_ReleaseBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockvectorRepo_ReleaseBackup_Call) Return(_a0 error) *MockvectorRepo_ReleaseBackup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockvectorRepo_ReleaseBackup_Call) RunAndReturn(run func(context.Context, string, string) error) *MockvectorRepo_ReleaseBackup_Call {
	_c.Call.Return(run)
	return _c
}

// SetSchemaGetter provides a mock function with given fields: _a0
func (_m *MockvectorRepo) SetSchemaGetter(_a0 schema.SchemaGetter) {
	_m.Called(_a0)
}

// MockvectorRepo_SetSchemaGetter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSchemaGetter'
type MockvectorRepo_SetSchemaGetter_Call struct {
	*mock.Call
}

// SetSchemaGetter is a helper method to define mock.On call
//   - _a0 schema.SchemaGetter
func (_e *MockvectorRepo_Expecter) SetSchemaGetter(_a0 interface{}) *MockvectorRepo_SetSchemaGetter_Call {
	return &MockvectorRepo_SetSchemaGetter_Call{Call: _e.mock.On("SetSchemaGetter", _a0)}
}

func (_c *MockvectorRepo_SetSchemaGetter_Call) Run(run func(_a0 schema.SchemaGetter)) *MockvectorRepo_SetSchemaGetter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.SchemaGetter))
	})
	return _c
}

func (_c *MockvectorRepo_SetSchemaGetter_Call) Return() *MockvectorRepo_SetSchemaGetter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockvectorRepo_SetSchemaGetter_Call) RunAndReturn(run func(schema.SchemaGetter)) *MockvectorRepo_SetSchemaGetter_Call {
	_c.Call.Return(run)
	return _c
}

// ShardsBackup provides a mock function with given fields: _a0, id, class, shards
func (_m *MockvectorRepo) ShardsBackup(_a0 context.Context, id string, class string, shards []string) (backup.ClassDescriptor, error) {
	ret := _m.Called(_a0, id, class, shards)

	if len(ret) == 0 {
		panic("no return value specified for ShardsBackup")
	}

	var r0 backup.ClassDescriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (backup.ClassDescriptor, error)); ok {
		return rf(_a0, id, class, shards)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) backup.ClassDescriptor); ok {
		r0 = rf(_a0, id, class, shards)
	} else {
		r0 = ret.Get(0).(backup.ClassDescriptor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(_a0, id, class, shards)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_ShardsBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShardsBackup'
type MockvectorRepo_ShardsBackup_Call struct {
	*mock.Call
}

// ShardsBackup is a helper method to define mock.On call
//   - _a0 context.Context
//   - id string
//   - class string
//   - shards []string
func (_e *MockvectorRepo_Expecter) ShardsBackup(_a0 interface{}, id interface{}, class interface{}, shards interface{}) *MockvectorRepo_ShardsBackup_Call {
	return &MockvectorRepo_ShardsBackup_Call{Call: _e.mock.On("ShardsBackup", _a0, id, class, shards)}
}

func (_c *MockvectorRepo_ShardsBackup_Call) Run(run func(_a0 context.Context, id string, class string, shards []string)) *MockvectorRepo_ShardsBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *MockvectorRepo_ShardsBackup_Call) Return(_a0 backup.ClassDescriptor, _a1 error) *MockvectorRepo_ShardsBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_ShardsBackup_Call) RunAndReturn(run func(context.Context, string, string, []string) (backup.ClassDescriptor, error)) *MockvectorRepo_ShardsBackup_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *MockvectorRepo) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockvectorRepo_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockvectorRepo_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockvectorRepo_Expecter) Shutdown(ctx interface{}) *MockvectorRepo_Shutdown_Call {
	return &MockvectorRepo_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockvectorRepo_Shutdown_Call) Run(run func(ctx context.Context)) *MockvectorRepo_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockvectorRepo_Shutdown_Call) Return(_a0 error) *MockvectorRepo_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockvectorRepo_Shutdown_Call) RunAndReturn(run func(context.Context) error) *MockvectorRepo_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// VectorSearch provides a mock function with given fields: ctx, params
func (_m *MockvectorRepo) VectorSearch(ctx context.Context, params dto.GetParams) ([]search.Result, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for VectorSearch")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetParams) ([]search.Result, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetParams) []search.Result); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_VectorSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorSearch'
type MockvectorRepo_VectorSearch_Call struct {
	*mock.Call
}

// VectorSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - params dto.GetParams
func (_e *MockvectorRepo_Expecter) VectorSearch(ctx interface{}, params interface{}) *MockvectorRepo_VectorSearch_Call {
	return &MockvectorRepo_VectorSearch_Call{Call: _e.mock.On("VectorSearch", ctx, params)}
}

func (_c *MockvectorRepo_VectorSearch_Call) Run(run func(ctx context.Context, params dto.GetParams)) *MockvectorRepo_VectorSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.GetParams))
	})
	return _c
}

func (_c *MockvectorRepo_VectorSearch_Call) Return(_a0 []search.Result, _a1 error) *MockvectorRepo_VectorSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_VectorSearch_Call) RunAndReturn(run func(context.Context, dto.GetParams) ([]search.Result, error)) *MockvectorRepo_VectorSearch_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForStartup provides a mock function with given fields: ctx
func (_m *MockvectorRepo) WaitForStartup(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitForStartup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockvectorRepo_WaitForStartup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForStartup'
type MockvectorRepo_WaitForStartup_Call struct {
	*mock.Call
}

// WaitForStartup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockvectorRepo_Expecter) WaitForStartup(ctx interface{}) *MockvectorRepo_WaitForStartup_Call {
	return &MockvectorRepo_WaitForStartup_Call{Call: _e.mock.On("WaitForStartup", ctx)}
}

func (_c *MockvectorRepo_WaitForStartup_Call) Run(run func(ctx context.Context)) *MockvectorRepo_WaitForStartup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockvectorRepo_WaitForStartup_Call) Return(_a0 error) *MockvectorRepo_WaitForStartup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockvectorRepo_WaitForStartup_Call) RunAndReturn(run func(context.Context) error) *MockvectorRepo_WaitForStartup_Call {
	_c.Call.Return(run)
	return _c
}

// ZeroShotSearch provides a mock function with given fields: ctx, vector, class, properties, filter
func (_m *MockvectorRepo) ZeroShotSearch(ctx context.Context, vector []float32, class string, properties []string, filter *filters.LocalFilter) ([]search.Result, error) {
	ret := _m.Called(ctx, vector, class, properties, filter)

	if len(ret) == 0 {
		panic("no return value specified for ZeroShotSearch")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []float32, string, []string, *filters.LocalFilter) ([]search.Result, error)); ok {
		return rf(ctx, vector, class, properties, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []float32, string, []string, *filters.LocalFilter) []search.Result); ok {
		r0 = rf(ctx, vector, class, properties, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []float32, string, []string, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, vector, class, properties, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_ZeroShotSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZeroShotSearch'
type MockvectorRepo_ZeroShotSearch_Call struct {
	*mock.Call
}

// ZeroShotSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - vector []float32
//   - class string
//   - properties []string
//   - filter *filters.LocalFilter
func (_e *MockvectorRepo_Expecter) ZeroShotSearch(ctx interface{}, vector interface{}, class interface{}, properties interface{}, filter interface{}) *MockvectorRepo_ZeroShotSearch_Call {
	return &MockvectorRepo_ZeroShotSearch_Call{Call: _e.mock.On("ZeroShotSearch", ctx, vector, class, properties, filter)}
}

func (_c *MockvectorRepo_ZeroShotSearch_Call) Run(run func(ctx context.Context, vector []float32, class string, properties []string, filter *filters.LocalFilter)) *MockvectorRepo_ZeroShotSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]float32), args[2].(string), args[3].([]string), args[4].(*filters.LocalFilter))
	})
	return _c
}

func (_c *MockvectorRepo_ZeroShotSearch_Call) Return(_a0 []search.Result, _a1 error) *MockvectorRepo_ZeroShotSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_ZeroShotSearch_Call) RunAndReturn(run func(context.Context, []float32, string, []string, *filters.LocalFilter) ([]search.Result, error)) *MockvectorRepo_ZeroShotSearch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockvectorRepo creates a new instance of MockvectorRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockvectorRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockvectorRepo {
	mock := &MockvectorRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
