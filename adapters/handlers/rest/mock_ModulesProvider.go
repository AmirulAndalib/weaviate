//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package rest

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"
)

// MockModulesProvider is an autogenerated mock type for the ModulesProvider type
type MockModulesProvider struct {
	mock.Mock
}

type MockModulesProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModulesProvider) EXPECT() *MockModulesProvider_Expecter {
	return &MockModulesProvider_Expecter{mock: &_m.Mock}
}

// GetMeta provides a mock function with given fields:
func (_m *MockModulesProvider) GetMeta() (map[string]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMeta")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModulesProvider_GetMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMeta'
type MockModulesProvider_GetMeta_Call struct {
	*mock.Call
}

// GetMeta is a helper method to define mock.On call
func (_e *MockModulesProvider_Expecter) GetMeta() *MockModulesProvider_GetMeta_Call {
	return &MockModulesProvider_GetMeta_Call{Call: _e.mock.On("GetMeta")}
}

func (_c *MockModulesProvider_GetMeta_Call) Run(run func()) *MockModulesProvider_GetMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModulesProvider_GetMeta_Call) Return(_a0 map[string]interface{}, _a1 error) *MockModulesProvider_GetMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModulesProvider_GetMeta_Call) RunAndReturn(run func() (map[string]interface{}, error)) *MockModulesProvider_GetMeta_Call {
	_c.Call.Return(run)
	return _c
}

// HasMultipleVectorizers provides a mock function with given fields:
func (_m *MockModulesProvider) HasMultipleVectorizers() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasMultipleVectorizers")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockModulesProvider_HasMultipleVectorizers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasMultipleVectorizers'
type MockModulesProvider_HasMultipleVectorizers_Call struct {
	*mock.Call
}

// HasMultipleVectorizers is a helper method to define mock.On call
func (_e *MockModulesProvider_Expecter) HasMultipleVectorizers() *MockModulesProvider_HasMultipleVectorizers_Call {
	return &MockModulesProvider_HasMultipleVectorizers_Call{Call: _e.mock.On("HasMultipleVectorizers")}
}

func (_c *MockModulesProvider_HasMultipleVectorizers_Call) Run(run func()) *MockModulesProvider_HasMultipleVectorizers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModulesProvider_HasMultipleVectorizers_Call) Return(_a0 bool) *MockModulesProvider_HasMultipleVectorizers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_HasMultipleVectorizers_Call) RunAndReturn(run func() bool) *MockModulesProvider_HasMultipleVectorizers_Call {
	_c.Call.Return(run)
	return _c
}

// RestApiAdditionalProperties provides a mock function with given fields: includeProp, class
func (_m *MockModulesProvider) RestApiAdditionalProperties(includeProp string, class *models.Class) map[string]interface{} {
	ret := _m.Called(includeProp, class)

	if len(ret) == 0 {
		panic("no return value specified for RestApiAdditionalProperties")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, *models.Class) map[string]interface{}); ok {
		r0 = rf(includeProp, class)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockModulesProvider_RestApiAdditionalProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestApiAdditionalProperties'
type MockModulesProvider_RestApiAdditionalProperties_Call struct {
	*mock.Call
}

// RestApiAdditionalProperties is a helper method to define mock.On call
//   - includeProp string
//   - class *models.Class
func (_e *MockModulesProvider_Expecter) RestApiAdditionalProperties(includeProp interface{}, class interface{}) *MockModulesProvider_RestApiAdditionalProperties_Call {
	return &MockModulesProvider_RestApiAdditionalProperties_Call{Call: _e.mock.On("RestApiAdditionalProperties", includeProp, class)}
}

func (_c *MockModulesProvider_RestApiAdditionalProperties_Call) Run(run func(includeProp string, class *models.Class)) *MockModulesProvider_RestApiAdditionalProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*models.Class))
	})
	return _c
}

func (_c *MockModulesProvider_RestApiAdditionalProperties_Call) Return(_a0 map[string]interface{}) *MockModulesProvider_RestApiAdditionalProperties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_RestApiAdditionalProperties_Call) RunAndReturn(run func(string, *models.Class) map[string]interface{}) *MockModulesProvider_RestApiAdditionalProperties_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModulesProvider creates a new instance of MockModulesProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModulesProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModulesProvider {
	mock := &MockModulesProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
