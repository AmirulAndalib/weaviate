//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package rest

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	mock "github.com/stretchr/testify/mock"

	models "github.com/weaviate/weaviate/entities/models"

	objects "github.com/weaviate/weaviate/usecases/objects"

	strfmt "github.com/go-openapi/strfmt"
)

// MockobjectsManager is an autogenerated mock type for the objectsManager type
type MockobjectsManager struct {
	mock.Mock
}

type MockobjectsManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockobjectsManager) EXPECT() *MockobjectsManager_Expecter {
	return &MockobjectsManager_Expecter{mock: &_m.Mock}
}

// AddObject provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockobjectsManager) AddObject(_a0 context.Context, _a1 *models.Principal, _a2 *models.Object, _a3 *additional.ReplicationProperties) (*models.Object, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for AddObject")
	}

	var r0 *models.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *models.Object, *additional.ReplicationProperties) (*models.Object, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *models.Object, *additional.ReplicationProperties) *models.Object); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Principal, *models.Object, *additional.ReplicationProperties) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsManager_AddObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddObject'
type MockobjectsManager_AddObject_Call struct {
	*mock.Call
}

// AddObject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Principal
//   - _a2 *models.Object
//   - _a3 *additional.ReplicationProperties
func (_e *MockobjectsManager_Expecter) AddObject(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockobjectsManager_AddObject_Call {
	return &MockobjectsManager_AddObject_Call{Call: _e.mock.On("AddObject", _a0, _a1, _a2, _a3)}
}

func (_c *MockobjectsManager_AddObject_Call) Run(run func(_a0 context.Context, _a1 *models.Principal, _a2 *models.Object, _a3 *additional.ReplicationProperties)) *MockobjectsManager_AddObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(*models.Object), args[3].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockobjectsManager_AddObject_Call) Return(_a0 *models.Object, _a1 error) *MockobjectsManager_AddObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsManager_AddObject_Call) RunAndReturn(run func(context.Context, *models.Principal, *models.Object, *additional.ReplicationProperties) (*models.Object, error)) *MockobjectsManager_AddObject_Call {
	_c.Call.Return(run)
	return _c
}

// AddObjectReference provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockobjectsManager) AddObjectReference(_a0 context.Context, _a1 *models.Principal, _a2 *objects.AddReferenceInput, _a3 *additional.ReplicationProperties, _a4 string) *objects.Error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for AddObjectReference")
	}

	var r0 *objects.Error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *objects.AddReferenceInput, *additional.ReplicationProperties, string) *objects.Error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.Error)
		}
	}

	return r0
}

// MockobjectsManager_AddObjectReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddObjectReference'
type MockobjectsManager_AddObjectReference_Call struct {
	*mock.Call
}

// AddObjectReference is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Principal
//   - _a2 *objects.AddReferenceInput
//   - _a3 *additional.ReplicationProperties
//   - _a4 string
func (_e *MockobjectsManager_Expecter) AddObjectReference(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *MockobjectsManager_AddObjectReference_Call {
	return &MockobjectsManager_AddObjectReference_Call{Call: _e.mock.On("AddObjectReference", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *MockobjectsManager_AddObjectReference_Call) Run(run func(_a0 context.Context, _a1 *models.Principal, _a2 *objects.AddReferenceInput, _a3 *additional.ReplicationProperties, _a4 string)) *MockobjectsManager_AddObjectReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(*objects.AddReferenceInput), args[3].(*additional.ReplicationProperties), args[4].(string))
	})
	return _c
}

func (_c *MockobjectsManager_AddObjectReference_Call) Return(_a0 *objects.Error) *MockobjectsManager_AddObjectReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockobjectsManager_AddObjectReference_Call) RunAndReturn(run func(context.Context, *models.Principal, *objects.AddReferenceInput, *additional.ReplicationProperties, string) *objects.Error) *MockobjectsManager_AddObjectReference_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *MockobjectsManager) DeleteObject(_a0 context.Context, _a1 *models.Principal, _a2 string, _a3 strfmt.UUID, _a4 *additional.ReplicationProperties, _a5 string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, string, strfmt.UUID, *additional.ReplicationProperties, string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockobjectsManager_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type MockobjectsManager_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Principal
//   - _a2 string
//   - _a3 strfmt.UUID
//   - _a4 *additional.ReplicationProperties
//   - _a5 string
func (_e *MockobjectsManager_Expecter) DeleteObject(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}) *MockobjectsManager_DeleteObject_Call {
	return &MockobjectsManager_DeleteObject_Call{Call: _e.mock.On("DeleteObject", _a0, _a1, _a2, _a3, _a4, _a5)}
}

func (_c *MockobjectsManager_DeleteObject_Call) Run(run func(_a0 context.Context, _a1 *models.Principal, _a2 string, _a3 strfmt.UUID, _a4 *additional.ReplicationProperties, _a5 string)) *MockobjectsManager_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(string), args[3].(strfmt.UUID), args[4].(*additional.ReplicationProperties), args[5].(string))
	})
	return _c
}

func (_c *MockobjectsManager_DeleteObject_Call) Return(_a0 error) *MockobjectsManager_DeleteObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockobjectsManager_DeleteObject_Call) RunAndReturn(run func(context.Context, *models.Principal, string, strfmt.UUID, *additional.ReplicationProperties, string) error) *MockobjectsManager_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObjectReference provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockobjectsManager) DeleteObjectReference(_a0 context.Context, _a1 *models.Principal, _a2 *objects.DeleteReferenceInput, _a3 *additional.ReplicationProperties, _a4 string) *objects.Error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObjectReference")
	}

	var r0 *objects.Error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *objects.DeleteReferenceInput, *additional.ReplicationProperties, string) *objects.Error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.Error)
		}
	}

	return r0
}

// MockobjectsManager_DeleteObjectReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObjectReference'
type MockobjectsManager_DeleteObjectReference_Call struct {
	*mock.Call
}

// DeleteObjectReference is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Principal
//   - _a2 *objects.DeleteReferenceInput
//   - _a3 *additional.ReplicationProperties
//   - _a4 string
func (_e *MockobjectsManager_Expecter) DeleteObjectReference(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *MockobjectsManager_DeleteObjectReference_Call {
	return &MockobjectsManager_DeleteObjectReference_Call{Call: _e.mock.On("DeleteObjectReference", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *MockobjectsManager_DeleteObjectReference_Call) Run(run func(_a0 context.Context, _a1 *models.Principal, _a2 *objects.DeleteReferenceInput, _a3 *additional.ReplicationProperties, _a4 string)) *MockobjectsManager_DeleteObjectReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(*objects.DeleteReferenceInput), args[3].(*additional.ReplicationProperties), args[4].(string))
	})
	return _c
}

func (_c *MockobjectsManager_DeleteObjectReference_Call) Return(_a0 *objects.Error) *MockobjectsManager_DeleteObjectReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockobjectsManager_DeleteObjectReference_Call) RunAndReturn(run func(context.Context, *models.Principal, *objects.DeleteReferenceInput, *additional.ReplicationProperties, string) *objects.Error) *MockobjectsManager_DeleteObjectReference_Call {
	_c.Call.Return(run)
	return _c
}

// GetObject provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m *MockobjectsManager) GetObject(_a0 context.Context, _a1 *models.Principal, _a2 string, _a3 strfmt.UUID, _a4 additional.Properties, _a5 *additional.ReplicationProperties, _a6 string) (*models.Object, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 *models.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, string, strfmt.UUID, additional.Properties, *additional.ReplicationProperties, string) (*models.Object, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, string, strfmt.UUID, additional.Properties, *additional.ReplicationProperties, string) *models.Object); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Principal, string, strfmt.UUID, additional.Properties, *additional.ReplicationProperties, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsManager_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MockobjectsManager_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Principal
//   - _a2 string
//   - _a3 strfmt.UUID
//   - _a4 additional.Properties
//   - _a5 *additional.ReplicationProperties
//   - _a6 string
func (_e *MockobjectsManager_Expecter) GetObject(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}, _a6 interface{}) *MockobjectsManager_GetObject_Call {
	return &MockobjectsManager_GetObject_Call{Call: _e.mock.On("GetObject", _a0, _a1, _a2, _a3, _a4, _a5, _a6)}
}

func (_c *MockobjectsManager_GetObject_Call) Run(run func(_a0 context.Context, _a1 *models.Principal, _a2 string, _a3 strfmt.UUID, _a4 additional.Properties, _a5 *additional.ReplicationProperties, _a6 string)) *MockobjectsManager_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(string), args[3].(strfmt.UUID), args[4].(additional.Properties), args[5].(*additional.ReplicationProperties), args[6].(string))
	})
	return _c
}

func (_c *MockobjectsManager_GetObject_Call) Return(_a0 *models.Object, _a1 error) *MockobjectsManager_GetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsManager_GetObject_Call) RunAndReturn(run func(context.Context, *models.Principal, string, strfmt.UUID, additional.Properties, *additional.ReplicationProperties, string) (*models.Object, error)) *MockobjectsManager_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectClassFromName provides a mock function with given fields: ctx, principal, className
func (_m *MockobjectsManager) GetObjectClassFromName(ctx context.Context, principal *models.Principal, className string) (*models.Class, error) {
	ret := _m.Called(ctx, principal, className)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectClassFromName")
	}

	var r0 *models.Class
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, string) (*models.Class, error)); ok {
		return rf(ctx, principal, className)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, string) *models.Class); ok {
		r0 = rf(ctx, principal, className)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Class)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Principal, string) error); ok {
		r1 = rf(ctx, principal, className)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsManager_GetObjectClassFromName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectClassFromName'
type MockobjectsManager_GetObjectClassFromName_Call struct {
	*mock.Call
}

// GetObjectClassFromName is a helper method to define mock.On call
//   - ctx context.Context
//   - principal *models.Principal
//   - className string
func (_e *MockobjectsManager_Expecter) GetObjectClassFromName(ctx interface{}, principal interface{}, className interface{}) *MockobjectsManager_GetObjectClassFromName_Call {
	return &MockobjectsManager_GetObjectClassFromName_Call{Call: _e.mock.On("GetObjectClassFromName", ctx, principal, className)}
}

func (_c *MockobjectsManager_GetObjectClassFromName_Call) Run(run func(ctx context.Context, principal *models.Principal, className string)) *MockobjectsManager_GetObjectClassFromName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(string))
	})
	return _c
}

func (_c *MockobjectsManager_GetObjectClassFromName_Call) Return(_a0 *models.Class, _a1 error) *MockobjectsManager_GetObjectClassFromName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsManager_GetObjectClassFromName_Call) RunAndReturn(run func(context.Context, *models.Principal, string) (*models.Class, error)) *MockobjectsManager_GetObjectClassFromName_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjects provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8
func (_m *MockobjectsManager) GetObjects(_a0 context.Context, _a1 *models.Principal, _a2 *int64, _a3 *int64, _a4 *string, _a5 *string, _a6 *string, _a7 additional.Properties, _a8 string) ([]*models.Object, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)

	if len(ret) == 0 {
		panic("no return value specified for GetObjects")
	}

	var r0 []*models.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *int64, *int64, *string, *string, *string, additional.Properties, string) ([]*models.Object, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *int64, *int64, *string, *string, *string, additional.Properties, string) []*models.Object); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Principal, *int64, *int64, *string, *string, *string, additional.Properties, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsManager_GetObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjects'
type MockobjectsManager_GetObjects_Call struct {
	*mock.Call
}

// GetObjects is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Principal
//   - _a2 *int64
//   - _a3 *int64
//   - _a4 *string
//   - _a5 *string
//   - _a6 *string
//   - _a7 additional.Properties
//   - _a8 string
func (_e *MockobjectsManager_Expecter) GetObjects(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}, _a6 interface{}, _a7 interface{}, _a8 interface{}) *MockobjectsManager_GetObjects_Call {
	return &MockobjectsManager_GetObjects_Call{Call: _e.mock.On("GetObjects", _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)}
}

func (_c *MockobjectsManager_GetObjects_Call) Run(run func(_a0 context.Context, _a1 *models.Principal, _a2 *int64, _a3 *int64, _a4 *string, _a5 *string, _a6 *string, _a7 additional.Properties, _a8 string)) *MockobjectsManager_GetObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(*int64), args[3].(*int64), args[4].(*string), args[5].(*string), args[6].(*string), args[7].(additional.Properties), args[8].(string))
	})
	return _c
}

func (_c *MockobjectsManager_GetObjects_Call) Return(_a0 []*models.Object, _a1 error) *MockobjectsManager_GetObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsManager_GetObjects_Call) RunAndReturn(run func(context.Context, *models.Principal, *int64, *int64, *string, *string, *string, additional.Properties, string) ([]*models.Object, error)) *MockobjectsManager_GetObjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectsClass provides a mock function with given fields: ctx, principal, id
func (_m *MockobjectsManager) GetObjectsClass(ctx context.Context, principal *models.Principal, id strfmt.UUID) (*models.Class, error) {
	ret := _m.Called(ctx, principal, id)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectsClass")
	}

	var r0 *models.Class
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, strfmt.UUID) (*models.Class, error)); ok {
		return rf(ctx, principal, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, strfmt.UUID) *models.Class); ok {
		r0 = rf(ctx, principal, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Class)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Principal, strfmt.UUID) error); ok {
		r1 = rf(ctx, principal, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsManager_GetObjectsClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectsClass'
type MockobjectsManager_GetObjectsClass_Call struct {
	*mock.Call
}

// GetObjectsClass is a helper method to define mock.On call
//   - ctx context.Context
//   - principal *models.Principal
//   - id strfmt.UUID
func (_e *MockobjectsManager_Expecter) GetObjectsClass(ctx interface{}, principal interface{}, id interface{}) *MockobjectsManager_GetObjectsClass_Call {
	return &MockobjectsManager_GetObjectsClass_Call{Call: _e.mock.On("GetObjectsClass", ctx, principal, id)}
}

func (_c *MockobjectsManager_GetObjectsClass_Call) Run(run func(ctx context.Context, principal *models.Principal, id strfmt.UUID)) *MockobjectsManager_GetObjectsClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(strfmt.UUID))
	})
	return _c
}

func (_c *MockobjectsManager_GetObjectsClass_Call) Return(_a0 *models.Class, _a1 error) *MockobjectsManager_GetObjectsClass_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsManager_GetObjectsClass_Call) RunAndReturn(run func(context.Context, *models.Principal, strfmt.UUID) (*models.Class, error)) *MockobjectsManager_GetObjectsClass_Call {
	_c.Call.Return(run)
	return _c
}

// HeadObject provides a mock function with given fields: ctx, principal, class, id, repl, tenant
func (_m *MockobjectsManager) HeadObject(ctx context.Context, principal *models.Principal, class string, id strfmt.UUID, repl *additional.ReplicationProperties, tenant string) (bool, *objects.Error) {
	ret := _m.Called(ctx, principal, class, id, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for HeadObject")
	}

	var r0 bool
	var r1 *objects.Error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, string, strfmt.UUID, *additional.ReplicationProperties, string) (bool, *objects.Error)); ok {
		return rf(ctx, principal, class, id, repl, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, string, strfmt.UUID, *additional.ReplicationProperties, string) bool); ok {
		r0 = rf(ctx, principal, class, id, repl, tenant)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Principal, string, strfmt.UUID, *additional.ReplicationProperties, string) *objects.Error); ok {
		r1 = rf(ctx, principal, class, id, repl, tenant)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*objects.Error)
		}
	}

	return r0, r1
}

// MockobjectsManager_HeadObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadObject'
type MockobjectsManager_HeadObject_Call struct {
	*mock.Call
}

// HeadObject is a helper method to define mock.On call
//   - ctx context.Context
//   - principal *models.Principal
//   - class string
//   - id strfmt.UUID
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockobjectsManager_Expecter) HeadObject(ctx interface{}, principal interface{}, class interface{}, id interface{}, repl interface{}, tenant interface{}) *MockobjectsManager_HeadObject_Call {
	return &MockobjectsManager_HeadObject_Call{Call: _e.mock.On("HeadObject", ctx, principal, class, id, repl, tenant)}
}

func (_c *MockobjectsManager_HeadObject_Call) Run(run func(ctx context.Context, principal *models.Principal, class string, id strfmt.UUID, repl *additional.ReplicationProperties, tenant string)) *MockobjectsManager_HeadObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(string), args[3].(strfmt.UUID), args[4].(*additional.ReplicationProperties), args[5].(string))
	})
	return _c
}

func (_c *MockobjectsManager_HeadObject_Call) Return(_a0 bool, _a1 *objects.Error) *MockobjectsManager_HeadObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsManager_HeadObject_Call) RunAndReturn(run func(context.Context, *models.Principal, string, strfmt.UUID, *additional.ReplicationProperties, string) (bool, *objects.Error)) *MockobjectsManager_HeadObject_Call {
	_c.Call.Return(run)
	return _c
}

// MergeObject provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockobjectsManager) MergeObject(_a0 context.Context, _a1 *models.Principal, _a2 *models.Object, _a3 *additional.ReplicationProperties) *objects.Error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for MergeObject")
	}

	var r0 *objects.Error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *models.Object, *additional.ReplicationProperties) *objects.Error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.Error)
		}
	}

	return r0
}

// MockobjectsManager_MergeObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeObject'
type MockobjectsManager_MergeObject_Call struct {
	*mock.Call
}

// MergeObject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Principal
//   - _a2 *models.Object
//   - _a3 *additional.ReplicationProperties
func (_e *MockobjectsManager_Expecter) MergeObject(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockobjectsManager_MergeObject_Call {
	return &MockobjectsManager_MergeObject_Call{Call: _e.mock.On("MergeObject", _a0, _a1, _a2, _a3)}
}

func (_c *MockobjectsManager_MergeObject_Call) Run(run func(_a0 context.Context, _a1 *models.Principal, _a2 *models.Object, _a3 *additional.ReplicationProperties)) *MockobjectsManager_MergeObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(*models.Object), args[3].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockobjectsManager_MergeObject_Call) Return(_a0 *objects.Error) *MockobjectsManager_MergeObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockobjectsManager_MergeObject_Call) RunAndReturn(run func(context.Context, *models.Principal, *models.Object, *additional.ReplicationProperties) *objects.Error) *MockobjectsManager_MergeObject_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, principal, params
func (_m *MockobjectsManager) Query(ctx context.Context, principal *models.Principal, params *objects.QueryParams) ([]*models.Object, *objects.Error) {
	ret := _m.Called(ctx, principal, params)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []*models.Object
	var r1 *objects.Error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *objects.QueryParams) ([]*models.Object, *objects.Error)); ok {
		return rf(ctx, principal, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *objects.QueryParams) []*models.Object); ok {
		r0 = rf(ctx, principal, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Principal, *objects.QueryParams) *objects.Error); ok {
		r1 = rf(ctx, principal, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*objects.Error)
		}
	}

	return r0, r1
}

// MockobjectsManager_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockobjectsManager_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - principal *models.Principal
//   - params *objects.QueryParams
func (_e *MockobjectsManager_Expecter) Query(ctx interface{}, principal interface{}, params interface{}) *MockobjectsManager_Query_Call {
	return &MockobjectsManager_Query_Call{Call: _e.mock.On("Query", ctx, principal, params)}
}

func (_c *MockobjectsManager_Query_Call) Run(run func(ctx context.Context, principal *models.Principal, params *objects.QueryParams)) *MockobjectsManager_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(*objects.QueryParams))
	})
	return _c
}

func (_c *MockobjectsManager_Query_Call) Return(_a0 []*models.Object, _a1 *objects.Error) *MockobjectsManager_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsManager_Query_Call) RunAndReturn(run func(context.Context, *models.Principal, *objects.QueryParams) ([]*models.Object, *objects.Error)) *MockobjectsManager_Query_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateObject provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *MockobjectsManager) UpdateObject(_a0 context.Context, _a1 *models.Principal, _a2 string, _a3 strfmt.UUID, _a4 *models.Object, _a5 *additional.ReplicationProperties) (*models.Object, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	if len(ret) == 0 {
		panic("no return value specified for UpdateObject")
	}

	var r0 *models.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, string, strfmt.UUID, *models.Object, *additional.ReplicationProperties) (*models.Object, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, string, strfmt.UUID, *models.Object, *additional.ReplicationProperties) *models.Object); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Principal, string, strfmt.UUID, *models.Object, *additional.ReplicationProperties) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsManager_UpdateObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateObject'
type MockobjectsManager_UpdateObject_Call struct {
	*mock.Call
}

// UpdateObject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Principal
//   - _a2 string
//   - _a3 strfmt.UUID
//   - _a4 *models.Object
//   - _a5 *additional.ReplicationProperties
func (_e *MockobjectsManager_Expecter) UpdateObject(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}) *MockobjectsManager_UpdateObject_Call {
	return &MockobjectsManager_UpdateObject_Call{Call: _e.mock.On("UpdateObject", _a0, _a1, _a2, _a3, _a4, _a5)}
}

func (_c *MockobjectsManager_UpdateObject_Call) Run(run func(_a0 context.Context, _a1 *models.Principal, _a2 string, _a3 strfmt.UUID, _a4 *models.Object, _a5 *additional.ReplicationProperties)) *MockobjectsManager_UpdateObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(string), args[3].(strfmt.UUID), args[4].(*models.Object), args[5].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockobjectsManager_UpdateObject_Call) Return(_a0 *models.Object, _a1 error) *MockobjectsManager_UpdateObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsManager_UpdateObject_Call) RunAndReturn(run func(context.Context, *models.Principal, string, strfmt.UUID, *models.Object, *additional.ReplicationProperties) (*models.Object, error)) *MockobjectsManager_UpdateObject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateObjectReferences provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockobjectsManager) UpdateObjectReferences(_a0 context.Context, _a1 *models.Principal, _a2 *objects.PutReferenceInput, _a3 *additional.ReplicationProperties, _a4 string) *objects.Error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for UpdateObjectReferences")
	}

	var r0 *objects.Error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *objects.PutReferenceInput, *additional.ReplicationProperties, string) *objects.Error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.Error)
		}
	}

	return r0
}

// MockobjectsManager_UpdateObjectReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateObjectReferences'
type MockobjectsManager_UpdateObjectReferences_Call struct {
	*mock.Call
}

// UpdateObjectReferences is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Principal
//   - _a2 *objects.PutReferenceInput
//   - _a3 *additional.ReplicationProperties
//   - _a4 string
func (_e *MockobjectsManager_Expecter) UpdateObjectReferences(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *MockobjectsManager_UpdateObjectReferences_Call {
	return &MockobjectsManager_UpdateObjectReferences_Call{Call: _e.mock.On("UpdateObjectReferences", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *MockobjectsManager_UpdateObjectReferences_Call) Run(run func(_a0 context.Context, _a1 *models.Principal, _a2 *objects.PutReferenceInput, _a3 *additional.ReplicationProperties, _a4 string)) *MockobjectsManager_UpdateObjectReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(*objects.PutReferenceInput), args[3].(*additional.ReplicationProperties), args[4].(string))
	})
	return _c
}

func (_c *MockobjectsManager_UpdateObjectReferences_Call) Return(_a0 *objects.Error) *MockobjectsManager_UpdateObjectReferences_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockobjectsManager_UpdateObjectReferences_Call) RunAndReturn(run func(context.Context, *models.Principal, *objects.PutReferenceInput, *additional.ReplicationProperties, string) *objects.Error) *MockobjectsManager_UpdateObjectReferences_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateObject provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockobjectsManager) ValidateObject(_a0 context.Context, _a1 *models.Principal, _a2 *models.Object, _a3 *additional.ReplicationProperties) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for ValidateObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Principal, *models.Object, *additional.ReplicationProperties) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockobjectsManager_ValidateObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateObject'
type MockobjectsManager_ValidateObject_Call struct {
	*mock.Call
}

// ValidateObject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *models.Principal
//   - _a2 *models.Object
//   - _a3 *additional.ReplicationProperties
func (_e *MockobjectsManager_Expecter) ValidateObject(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockobjectsManager_ValidateObject_Call {
	return &MockobjectsManager_ValidateObject_Call{Call: _e.mock.On("ValidateObject", _a0, _a1, _a2, _a3)}
}

func (_c *MockobjectsManager_ValidateObject_Call) Run(run func(_a0 context.Context, _a1 *models.Principal, _a2 *models.Object, _a3 *additional.ReplicationProperties)) *MockobjectsManager_ValidateObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Principal), args[2].(*models.Object), args[3].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockobjectsManager_ValidateObject_Call) Return(_a0 error) *MockobjectsManager_ValidateObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockobjectsManager_ValidateObject_Call) RunAndReturn(run func(context.Context, *models.Principal, *models.Object, *additional.ReplicationProperties) error) *MockobjectsManager_ValidateObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockobjectsManager creates a new instance of MockobjectsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockobjectsManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockobjectsManager {
	mock := &MockobjectsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
