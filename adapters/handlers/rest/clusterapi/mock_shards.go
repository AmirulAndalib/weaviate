//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package clusterapi

import (
	additional "github.com/weaviate/weaviate/entities/additional"
	aggregation "github.com/weaviate/weaviate/entities/aggregation"

	context "context"

	filters "github.com/weaviate/weaviate/entities/filters"

	io "io"

	mock "github.com/stretchr/testify/mock"

	objects "github.com/weaviate/weaviate/usecases/objects"

	replica "github.com/weaviate/weaviate/usecases/replica"

	search "github.com/weaviate/weaviate/entities/search"

	searchparams "github.com/weaviate/weaviate/entities/searchparams"

	storobj "github.com/weaviate/weaviate/entities/storobj"

	strfmt "github.com/go-openapi/strfmt"
)

// Mockshards is an autogenerated mock type for the shards type
type Mockshards struct {
	mock.Mock
}

type Mockshards_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockshards) EXPECT() *Mockshards_Expecter {
	return &Mockshards_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with given fields: ctx, indexName, shardName, params
func (_m *Mockshards) Aggregate(ctx context.Context, indexName string, shardName string, params aggregation.Params) (*aggregation.Result, error) {
	ret := _m.Called(ctx, indexName, shardName, params)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 *aggregation.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, aggregation.Params) (*aggregation.Result, error)); ok {
		return rf(ctx, indexName, shardName, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, aggregation.Params) *aggregation.Result); ok {
		r0 = rf(ctx, indexName, shardName, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregation.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, aggregation.Params) error); ok {
		r1 = rf(ctx, indexName, shardName, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockshards_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type Mockshards_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - params aggregation.Params
func (_e *Mockshards_Expecter) Aggregate(ctx interface{}, indexName interface{}, shardName interface{}, params interface{}) *Mockshards_Aggregate_Call {
	return &Mockshards_Aggregate_Call{Call: _e.mock.On("Aggregate", ctx, indexName, shardName, params)}
}

func (_c *Mockshards_Aggregate_Call) Run(run func(ctx context.Context, indexName string, shardName string, params aggregation.Params)) *Mockshards_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(aggregation.Params))
	})
	return _c
}

func (_c *Mockshards_Aggregate_Call) Return(_a0 *aggregation.Result, _a1 error) *Mockshards_Aggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockshards_Aggregate_Call) RunAndReturn(run func(context.Context, string, string, aggregation.Params) (*aggregation.Result, error)) *Mockshards_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// BatchAddReferences provides a mock function with given fields: ctx, indexName, shardName, refs
func (_m *Mockshards) BatchAddReferences(ctx context.Context, indexName string, shardName string, refs objects.BatchReferences) []error {
	ret := _m.Called(ctx, indexName, shardName, refs)

	if len(ret) == 0 {
		panic("no return value specified for BatchAddReferences")
	}

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, objects.BatchReferences) []error); ok {
		r0 = rf(ctx, indexName, shardName, refs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// Mockshards_BatchAddReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchAddReferences'
type Mockshards_BatchAddReferences_Call struct {
	*mock.Call
}

// BatchAddReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - refs objects.BatchReferences
func (_e *Mockshards_Expecter) BatchAddReferences(ctx interface{}, indexName interface{}, shardName interface{}, refs interface{}) *Mockshards_BatchAddReferences_Call {
	return &Mockshards_BatchAddReferences_Call{Call: _e.mock.On("BatchAddReferences", ctx, indexName, shardName, refs)}
}

func (_c *Mockshards_BatchAddReferences_Call) Run(run func(ctx context.Context, indexName string, shardName string, refs objects.BatchReferences)) *Mockshards_BatchAddReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(objects.BatchReferences))
	})
	return _c
}

func (_c *Mockshards_BatchAddReferences_Call) Return(_a0 []error) *Mockshards_BatchAddReferences_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockshards_BatchAddReferences_Call) RunAndReturn(run func(context.Context, string, string, objects.BatchReferences) []error) *Mockshards_BatchAddReferences_Call {
	_c.Call.Return(run)
	return _c
}

// BatchPutObjects provides a mock function with given fields: ctx, indexName, shardName, objs
func (_m *Mockshards) BatchPutObjects(ctx context.Context, indexName string, shardName string, objs []*storobj.Object) []error {
	ret := _m.Called(ctx, indexName, shardName, objs)

	if len(ret) == 0 {
		panic("no return value specified for BatchPutObjects")
	}

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []*storobj.Object) []error); ok {
		r0 = rf(ctx, indexName, shardName, objs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// Mockshards_BatchPutObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchPutObjects'
type Mockshards_BatchPutObjects_Call struct {
	*mock.Call
}

// BatchPutObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - objs []*storobj.Object
func (_e *Mockshards_Expecter) BatchPutObjects(ctx interface{}, indexName interface{}, shardName interface{}, objs interface{}) *Mockshards_BatchPutObjects_Call {
	return &Mockshards_BatchPutObjects_Call{Call: _e.mock.On("BatchPutObjects", ctx, indexName, shardName, objs)}
}

func (_c *Mockshards_BatchPutObjects_Call) Run(run func(ctx context.Context, indexName string, shardName string, objs []*storobj.Object)) *Mockshards_BatchPutObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]*storobj.Object))
	})
	return _c
}

func (_c *Mockshards_BatchPutObjects_Call) Return(_a0 []error) *Mockshards_BatchPutObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockshards_BatchPutObjects_Call) RunAndReturn(run func(context.Context, string, string, []*storobj.Object) []error) *Mockshards_BatchPutObjects_Call {
	_c.Call.Return(run)
	return _c
}

// CreateShard provides a mock function with given fields: ctx, indexName, shardName
func (_m *Mockshards) CreateShard(ctx context.Context, indexName string, shardName string) error {
	ret := _m.Called(ctx, indexName, shardName)

	if len(ret) == 0 {
		panic("no return value specified for CreateShard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, indexName, shardName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockshards_CreateShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShard'
type Mockshards_CreateShard_Call struct {
	*mock.Call
}

// CreateShard is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
func (_e *Mockshards_Expecter) CreateShard(ctx interface{}, indexName interface{}, shardName interface{}) *Mockshards_CreateShard_Call {
	return &Mockshards_CreateShard_Call{Call: _e.mock.On("CreateShard", ctx, indexName, shardName)}
}

func (_c *Mockshards_CreateShard_Call) Run(run func(ctx context.Context, indexName string, shardName string)) *Mockshards_CreateShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Mockshards_CreateShard_Call) Return(_a0 error) *Mockshards_CreateShard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockshards_CreateShard_Call) RunAndReturn(run func(context.Context, string, string) error) *Mockshards_CreateShard_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function with given fields: ctx, indexName, shardName, id
func (_m *Mockshards) DeleteObject(ctx context.Context, indexName string, shardName string, id strfmt.UUID) error {
	ret := _m.Called(ctx, indexName, shardName, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, strfmt.UUID) error); ok {
		r0 = rf(ctx, indexName, shardName, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockshards_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type Mockshards_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - id strfmt.UUID
func (_e *Mockshards_Expecter) DeleteObject(ctx interface{}, indexName interface{}, shardName interface{}, id interface{}) *Mockshards_DeleteObject_Call {
	return &Mockshards_DeleteObject_Call{Call: _e.mock.On("DeleteObject", ctx, indexName, shardName, id)}
}

func (_c *Mockshards_DeleteObject_Call) Run(run func(ctx context.Context, indexName string, shardName string, id strfmt.UUID)) *Mockshards_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(strfmt.UUID))
	})
	return _c
}

func (_c *Mockshards_DeleteObject_Call) Return(_a0 error) *Mockshards_DeleteObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockshards_DeleteObject_Call) RunAndReturn(run func(context.Context, string, string, strfmt.UUID) error) *Mockshards_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObjectBatch provides a mock function with given fields: ctx, indexName, shardName, uuids, dryRun
func (_m *Mockshards) DeleteObjectBatch(ctx context.Context, indexName string, shardName string, uuids []strfmt.UUID, dryRun bool) objects.BatchSimpleObjects {
	ret := _m.Called(ctx, indexName, shardName, uuids, dryRun)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObjectBatch")
	}

	var r0 objects.BatchSimpleObjects
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []strfmt.UUID, bool) objects.BatchSimpleObjects); ok {
		r0 = rf(ctx, indexName, shardName, uuids, dryRun)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(objects.BatchSimpleObjects)
		}
	}

	return r0
}

// Mockshards_DeleteObjectBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObjectBatch'
type Mockshards_DeleteObjectBatch_Call struct {
	*mock.Call
}

// DeleteObjectBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - uuids []strfmt.UUID
//   - dryRun bool
func (_e *Mockshards_Expecter) DeleteObjectBatch(ctx interface{}, indexName interface{}, shardName interface{}, uuids interface{}, dryRun interface{}) *Mockshards_DeleteObjectBatch_Call {
	return &Mockshards_DeleteObjectBatch_Call{Call: _e.mock.On("DeleteObjectBatch", ctx, indexName, shardName, uuids, dryRun)}
}

func (_c *Mockshards_DeleteObjectBatch_Call) Run(run func(ctx context.Context, indexName string, shardName string, uuids []strfmt.UUID, dryRun bool)) *Mockshards_DeleteObjectBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]strfmt.UUID), args[4].(bool))
	})
	return _c
}

func (_c *Mockshards_DeleteObjectBatch_Call) Return(_a0 objects.BatchSimpleObjects) *Mockshards_DeleteObjectBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockshards_DeleteObjectBatch_Call) RunAndReturn(run func(context.Context, string, string, []strfmt.UUID, bool) objects.BatchSimpleObjects) *Mockshards_DeleteObjectBatch_Call {
	_c.Call.Return(run)
	return _c
}

// DigestObjects provides a mock function with given fields: ctx, indexName, shardName, ids
func (_m *Mockshards) DigestObjects(ctx context.Context, indexName string, shardName string, ids []strfmt.UUID) ([]replica.RepairResponse, error) {
	ret := _m.Called(ctx, indexName, shardName, ids)

	if len(ret) == 0 {
		panic("no return value specified for DigestObjects")
	}

	var r0 []replica.RepairResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []strfmt.UUID) ([]replica.RepairResponse, error)); ok {
		return rf(ctx, indexName, shardName, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []strfmt.UUID) []replica.RepairResponse); ok {
		r0 = rf(ctx, indexName, shardName, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]replica.RepairResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []strfmt.UUID) error); ok {
		r1 = rf(ctx, indexName, shardName, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockshards_DigestObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DigestObjects'
type Mockshards_DigestObjects_Call struct {
	*mock.Call
}

// DigestObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - ids []strfmt.UUID
func (_e *Mockshards_Expecter) DigestObjects(ctx interface{}, indexName interface{}, shardName interface{}, ids interface{}) *Mockshards_DigestObjects_Call {
	return &Mockshards_DigestObjects_Call{Call: _e.mock.On("DigestObjects", ctx, indexName, shardName, ids)}
}

func (_c *Mockshards_DigestObjects_Call) Run(run func(ctx context.Context, indexName string, shardName string, ids []strfmt.UUID)) *Mockshards_DigestObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]strfmt.UUID))
	})
	return _c
}

func (_c *Mockshards_DigestObjects_Call) Return(result []replica.RepairResponse, err error) *Mockshards_DigestObjects_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *Mockshards_DigestObjects_Call) RunAndReturn(run func(context.Context, string, string, []strfmt.UUID) ([]replica.RepairResponse, error)) *Mockshards_DigestObjects_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, indexName, shardName, id
func (_m *Mockshards) Exists(ctx context.Context, indexName string, shardName string, id strfmt.UUID) (bool, error) {
	ret := _m.Called(ctx, indexName, shardName, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, strfmt.UUID) (bool, error)); ok {
		return rf(ctx, indexName, shardName, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, strfmt.UUID) bool); ok {
		r0 = rf(ctx, indexName, shardName, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, strfmt.UUID) error); ok {
		r1 = rf(ctx, indexName, shardName, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockshards_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type Mockshards_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - id strfmt.UUID
func (_e *Mockshards_Expecter) Exists(ctx interface{}, indexName interface{}, shardName interface{}, id interface{}) *Mockshards_Exists_Call {
	return &Mockshards_Exists_Call{Call: _e.mock.On("Exists", ctx, indexName, shardName, id)}
}

func (_c *Mockshards_Exists_Call) Run(run func(ctx context.Context, indexName string, shardName string, id strfmt.UUID)) *Mockshards_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(strfmt.UUID))
	})
	return _c
}

func (_c *Mockshards_Exists_Call) Return(_a0 bool, _a1 error) *Mockshards_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockshards_Exists_Call) RunAndReturn(run func(context.Context, string, string, strfmt.UUID) (bool, error)) *Mockshards_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FilePutter provides a mock function with given fields: ctx, indexName, shardName, filePath
func (_m *Mockshards) FilePutter(ctx context.Context, indexName string, shardName string, filePath string) (io.WriteCloser, error) {
	ret := _m.Called(ctx, indexName, shardName, filePath)

	if len(ret) == 0 {
		panic("no return value specified for FilePutter")
	}

	var r0 io.WriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (io.WriteCloser, error)); ok {
		return rf(ctx, indexName, shardName, filePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) io.WriteCloser); ok {
		r0 = rf(ctx, indexName, shardName, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, indexName, shardName, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockshards_FilePutter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilePutter'
type Mockshards_FilePutter_Call struct {
	*mock.Call
}

// FilePutter is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - filePath string
func (_e *Mockshards_Expecter) FilePutter(ctx interface{}, indexName interface{}, shardName interface{}, filePath interface{}) *Mockshards_FilePutter_Call {
	return &Mockshards_FilePutter_Call{Call: _e.mock.On("FilePutter", ctx, indexName, shardName, filePath)}
}

func (_c *Mockshards_FilePutter_Call) Run(run func(ctx context.Context, indexName string, shardName string, filePath string)) *Mockshards_FilePutter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Mockshards_FilePutter_Call) Return(_a0 io.WriteCloser, _a1 error) *Mockshards_FilePutter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockshards_FilePutter_Call) RunAndReturn(run func(context.Context, string, string, string) (io.WriteCloser, error)) *Mockshards_FilePutter_Call {
	_c.Call.Return(run)
	return _c
}

// FindUUIDs provides a mock function with given fields: ctx, indexName, shardName, _a3
func (_m *Mockshards) FindUUIDs(ctx context.Context, indexName string, shardName string, _a3 *filters.LocalFilter) ([]strfmt.UUID, error) {
	ret := _m.Called(ctx, indexName, shardName, _a3)

	if len(ret) == 0 {
		panic("no return value specified for FindUUIDs")
	}

	var r0 []strfmt.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *filters.LocalFilter) ([]strfmt.UUID, error)); ok {
		return rf(ctx, indexName, shardName, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *filters.LocalFilter) []strfmt.UUID); ok {
		r0 = rf(ctx, indexName, shardName, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]strfmt.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, indexName, shardName, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockshards_FindUUIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUUIDs'
type Mockshards_FindUUIDs_Call struct {
	*mock.Call
}

// FindUUIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - _a3 *filters.LocalFilter
func (_e *Mockshards_Expecter) FindUUIDs(ctx interface{}, indexName interface{}, shardName interface{}, _a3 interface{}) *Mockshards_FindUUIDs_Call {
	return &Mockshards_FindUUIDs_Call{Call: _e.mock.On("FindUUIDs", ctx, indexName, shardName, _a3)}
}

func (_c *Mockshards_FindUUIDs_Call) Run(run func(ctx context.Context, indexName string, shardName string, _a3 *filters.LocalFilter)) *Mockshards_FindUUIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*filters.LocalFilter))
	})
	return _c
}

func (_c *Mockshards_FindUUIDs_Call) Return(_a0 []strfmt.UUID, _a1 error) *Mockshards_FindUUIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockshards_FindUUIDs_Call) RunAndReturn(run func(context.Context, string, string, *filters.LocalFilter) ([]strfmt.UUID, error)) *Mockshards_FindUUIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetObject provides a mock function with given fields: ctx, indexName, shardName, id, selectProperties, _a5
func (_m *Mockshards) GetObject(ctx context.Context, indexName string, shardName string, id strfmt.UUID, selectProperties search.SelectProperties, _a5 additional.Properties) (*storobj.Object, error) {
	ret := _m.Called(ctx, indexName, shardName, id, selectProperties, _a5)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 *storobj.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) (*storobj.Object, error)); ok {
		return rf(ctx, indexName, shardName, id, selectProperties, _a5)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) *storobj.Object); ok {
		r0 = rf(ctx, indexName, shardName, id, selectProperties, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) error); ok {
		r1 = rf(ctx, indexName, shardName, id, selectProperties, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockshards_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type Mockshards_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - id strfmt.UUID
//   - selectProperties search.SelectProperties
//   - _a5 additional.Properties
func (_e *Mockshards_Expecter) GetObject(ctx interface{}, indexName interface{}, shardName interface{}, id interface{}, selectProperties interface{}, _a5 interface{}) *Mockshards_GetObject_Call {
	return &Mockshards_GetObject_Call{Call: _e.mock.On("GetObject", ctx, indexName, shardName, id, selectProperties, _a5)}
}

func (_c *Mockshards_GetObject_Call) Run(run func(ctx context.Context, indexName string, shardName string, id strfmt.UUID, selectProperties search.SelectProperties, _a5 additional.Properties)) *Mockshards_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(strfmt.UUID), args[4].(search.SelectProperties), args[5].(additional.Properties))
	})
	return _c
}

func (_c *Mockshards_GetObject_Call) Return(_a0 *storobj.Object, _a1 error) *Mockshards_GetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockshards_GetObject_Call) RunAndReturn(run func(context.Context, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) (*storobj.Object, error)) *Mockshards_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetShardQueueSize provides a mock function with given fields: ctx, indexName, shardName
func (_m *Mockshards) GetShardQueueSize(ctx context.Context, indexName string, shardName string) (int64, error) {
	ret := _m.Called(ctx, indexName, shardName)

	if len(ret) == 0 {
		panic("no return value specified for GetShardQueueSize")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return rf(ctx, indexName, shardName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, indexName, shardName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, indexName, shardName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockshards_GetShardQueueSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShardQueueSize'
type Mockshards_GetShardQueueSize_Call struct {
	*mock.Call
}

// GetShardQueueSize is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
func (_e *Mockshards_Expecter) GetShardQueueSize(ctx interface{}, indexName interface{}, shardName interface{}) *Mockshards_GetShardQueueSize_Call {
	return &Mockshards_GetShardQueueSize_Call{Call: _e.mock.On("GetShardQueueSize", ctx, indexName, shardName)}
}

func (_c *Mockshards_GetShardQueueSize_Call) Run(run func(ctx context.Context, indexName string, shardName string)) *Mockshards_GetShardQueueSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Mockshards_GetShardQueueSize_Call) Return(_a0 int64, _a1 error) *Mockshards_GetShardQueueSize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockshards_GetShardQueueSize_Call) RunAndReturn(run func(context.Context, string, string) (int64, error)) *Mockshards_GetShardQueueSize_Call {
	_c.Call.Return(run)
	return _c
}

// GetShardStatus provides a mock function with given fields: ctx, indexName, shardName
func (_m *Mockshards) GetShardStatus(ctx context.Context, indexName string, shardName string) (string, error) {
	ret := _m.Called(ctx, indexName, shardName)

	if len(ret) == 0 {
		panic("no return value specified for GetShardStatus")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, indexName, shardName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, indexName, shardName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, indexName, shardName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockshards_GetShardStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShardStatus'
type Mockshards_GetShardStatus_Call struct {
	*mock.Call
}

// GetShardStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
func (_e *Mockshards_Expecter) GetShardStatus(ctx interface{}, indexName interface{}, shardName interface{}) *Mockshards_GetShardStatus_Call {
	return &Mockshards_GetShardStatus_Call{Call: _e.mock.On("GetShardStatus", ctx, indexName, shardName)}
}

func (_c *Mockshards_GetShardStatus_Call) Run(run func(ctx context.Context, indexName string, shardName string)) *Mockshards_GetShardStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Mockshards_GetShardStatus_Call) Return(_a0 string, _a1 error) *Mockshards_GetShardStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockshards_GetShardStatus_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *Mockshards_GetShardStatus_Call {
	_c.Call.Return(run)
	return _c
}

// MergeObject provides a mock function with given fields: ctx, indexName, shardName, mergeDoc
func (_m *Mockshards) MergeObject(ctx context.Context, indexName string, shardName string, mergeDoc objects.MergeDocument) error {
	ret := _m.Called(ctx, indexName, shardName, mergeDoc)

	if len(ret) == 0 {
		panic("no return value specified for MergeObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, objects.MergeDocument) error); ok {
		r0 = rf(ctx, indexName, shardName, mergeDoc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockshards_MergeObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeObject'
type Mockshards_MergeObject_Call struct {
	*mock.Call
}

// MergeObject is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - mergeDoc objects.MergeDocument
func (_e *Mockshards_Expecter) MergeObject(ctx interface{}, indexName interface{}, shardName interface{}, mergeDoc interface{}) *Mockshards_MergeObject_Call {
	return &Mockshards_MergeObject_Call{Call: _e.mock.On("MergeObject", ctx, indexName, shardName, mergeDoc)}
}

func (_c *Mockshards_MergeObject_Call) Run(run func(ctx context.Context, indexName string, shardName string, mergeDoc objects.MergeDocument)) *Mockshards_MergeObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(objects.MergeDocument))
	})
	return _c
}

func (_c *Mockshards_MergeObject_Call) Return(_a0 error) *Mockshards_MergeObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockshards_MergeObject_Call) RunAndReturn(run func(context.Context, string, string, objects.MergeDocument) error) *Mockshards_MergeObject_Call {
	_c.Call.Return(run)
	return _c
}

// MultiGetObjects provides a mock function with given fields: ctx, indexName, shardName, id
func (_m *Mockshards) MultiGetObjects(ctx context.Context, indexName string, shardName string, id []strfmt.UUID) ([]*storobj.Object, error) {
	ret := _m.Called(ctx, indexName, shardName, id)

	if len(ret) == 0 {
		panic("no return value specified for MultiGetObjects")
	}

	var r0 []*storobj.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []strfmt.UUID) ([]*storobj.Object, error)); ok {
		return rf(ctx, indexName, shardName, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []strfmt.UUID) []*storobj.Object); ok {
		r0 = rf(ctx, indexName, shardName, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []strfmt.UUID) error); ok {
		r1 = rf(ctx, indexName, shardName, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockshards_MultiGetObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiGetObjects'
type Mockshards_MultiGetObjects_Call struct {
	*mock.Call
}

// MultiGetObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - id []strfmt.UUID
func (_e *Mockshards_Expecter) MultiGetObjects(ctx interface{}, indexName interface{}, shardName interface{}, id interface{}) *Mockshards_MultiGetObjects_Call {
	return &Mockshards_MultiGetObjects_Call{Call: _e.mock.On("MultiGetObjects", ctx, indexName, shardName, id)}
}

func (_c *Mockshards_MultiGetObjects_Call) Run(run func(ctx context.Context, indexName string, shardName string, id []strfmt.UUID)) *Mockshards_MultiGetObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]strfmt.UUID))
	})
	return _c
}

func (_c *Mockshards_MultiGetObjects_Call) Return(_a0 []*storobj.Object, _a1 error) *Mockshards_MultiGetObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockshards_MultiGetObjects_Call) RunAndReturn(run func(context.Context, string, string, []strfmt.UUID) ([]*storobj.Object, error)) *Mockshards_MultiGetObjects_Call {
	_c.Call.Return(run)
	return _c
}

// OverwriteObjects provides a mock function with given fields: ctx, indexName, shardName, vobjects
func (_m *Mockshards) OverwriteObjects(ctx context.Context, indexName string, shardName string, vobjects []*objects.VObject) ([]replica.RepairResponse, error) {
	ret := _m.Called(ctx, indexName, shardName, vobjects)

	if len(ret) == 0 {
		panic("no return value specified for OverwriteObjects")
	}

	var r0 []replica.RepairResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []*objects.VObject) ([]replica.RepairResponse, error)); ok {
		return rf(ctx, indexName, shardName, vobjects)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []*objects.VObject) []replica.RepairResponse); ok {
		r0 = rf(ctx, indexName, shardName, vobjects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]replica.RepairResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []*objects.VObject) error); ok {
		r1 = rf(ctx, indexName, shardName, vobjects)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockshards_OverwriteObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OverwriteObjects'
type Mockshards_OverwriteObjects_Call struct {
	*mock.Call
}

// OverwriteObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - vobjects []*objects.VObject
func (_e *Mockshards_Expecter) OverwriteObjects(ctx interface{}, indexName interface{}, shardName interface{}, vobjects interface{}) *Mockshards_OverwriteObjects_Call {
	return &Mockshards_OverwriteObjects_Call{Call: _e.mock.On("OverwriteObjects", ctx, indexName, shardName, vobjects)}
}

func (_c *Mockshards_OverwriteObjects_Call) Run(run func(ctx context.Context, indexName string, shardName string, vobjects []*objects.VObject)) *Mockshards_OverwriteObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]*objects.VObject))
	})
	return _c
}

func (_c *Mockshards_OverwriteObjects_Call) Return(_a0 []replica.RepairResponse, _a1 error) *Mockshards_OverwriteObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockshards_OverwriteObjects_Call) RunAndReturn(run func(context.Context, string, string, []*objects.VObject) ([]replica.RepairResponse, error)) *Mockshards_OverwriteObjects_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, indexName, shardName, obj
func (_m *Mockshards) PutObject(ctx context.Context, indexName string, shardName string, obj *storobj.Object) error {
	ret := _m.Called(ctx, indexName, shardName, obj)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *storobj.Object) error); ok {
		r0 = rf(ctx, indexName, shardName, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockshards_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type Mockshards_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - obj *storobj.Object
func (_e *Mockshards_Expecter) PutObject(ctx interface{}, indexName interface{}, shardName interface{}, obj interface{}) *Mockshards_PutObject_Call {
	return &Mockshards_PutObject_Call{Call: _e.mock.On("PutObject", ctx, indexName, shardName, obj)}
}

func (_c *Mockshards_PutObject_Call) Run(run func(ctx context.Context, indexName string, shardName string, obj *storobj.Object)) *Mockshards_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*storobj.Object))
	})
	return _c
}

func (_c *Mockshards_PutObject_Call) Return(_a0 error) *Mockshards_PutObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockshards_PutObject_Call) RunAndReturn(run func(context.Context, string, string, *storobj.Object) error) *Mockshards_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// ReInitShard provides a mock function with given fields: ctx, indexName, shardName
func (_m *Mockshards) ReInitShard(ctx context.Context, indexName string, shardName string) error {
	ret := _m.Called(ctx, indexName, shardName)

	if len(ret) == 0 {
		panic("no return value specified for ReInitShard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, indexName, shardName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockshards_ReInitShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReInitShard'
type Mockshards_ReInitShard_Call struct {
	*mock.Call
}

// ReInitShard is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
func (_e *Mockshards_Expecter) ReInitShard(ctx interface{}, indexName interface{}, shardName interface{}) *Mockshards_ReInitShard_Call {
	return &Mockshards_ReInitShard_Call{Call: _e.mock.On("ReInitShard", ctx, indexName, shardName)}
}

func (_c *Mockshards_ReInitShard_Call) Run(run func(ctx context.Context, indexName string, shardName string)) *Mockshards_ReInitShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Mockshards_ReInitShard_Call) Return(_a0 error) *Mockshards_ReInitShard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockshards_ReInitShard_Call) RunAndReturn(run func(context.Context, string, string) error) *Mockshards_ReInitShard_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, indexName, shardName, vector, targetVector, distance, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12
func (_m *Mockshards) Search(ctx context.Context, indexName string, shardName string, vector []float32, targetVector string, distance float32, limit int, _a7 *filters.LocalFilter, keywordRanking *searchparams.KeywordRanking, sort []filters.Sort, cursor *filters.Cursor, groupBy *searchparams.GroupBy, _a12 additional.Properties) ([]*storobj.Object, []float32, error) {
	ret := _m.Called(ctx, indexName, shardName, vector, targetVector, distance, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*storobj.Object
	var r1 []float32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []float32, string, float32, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) ([]*storobj.Object, []float32, error)); ok {
		return rf(ctx, indexName, shardName, vector, targetVector, distance, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []float32, string, float32, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) []*storobj.Object); ok {
		r0 = rf(ctx, indexName, shardName, vector, targetVector, distance, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []float32, string, float32, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) []float32); ok {
		r1 = rf(ctx, indexName, shardName, vector, targetVector, distance, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float32)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, []float32, string, float32, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) error); ok {
		r2 = rf(ctx, indexName, shardName, vector, targetVector, distance, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Mockshards_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type Mockshards_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - vector []float32
//   - targetVector string
//   - distance float32
//   - limit int
//   - _a7 *filters.LocalFilter
//   - keywordRanking *searchparams.KeywordRanking
//   - sort []filters.Sort
//   - cursor *filters.Cursor
//   - groupBy *searchparams.GroupBy
//   - _a12 additional.Properties
func (_e *Mockshards_Expecter) Search(ctx interface{}, indexName interface{}, shardName interface{}, vector interface{}, targetVector interface{}, distance interface{}, limit interface{}, _a7 interface{}, keywordRanking interface{}, sort interface{}, cursor interface{}, groupBy interface{}, _a12 interface{}) *Mockshards_Search_Call {
	return &Mockshards_Search_Call{Call: _e.mock.On("Search", ctx, indexName, shardName, vector, targetVector, distance, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)}
}

func (_c *Mockshards_Search_Call) Run(run func(ctx context.Context, indexName string, shardName string, vector []float32, targetVector string, distance float32, limit int, _a7 *filters.LocalFilter, keywordRanking *searchparams.KeywordRanking, sort []filters.Sort, cursor *filters.Cursor, groupBy *searchparams.GroupBy, _a12 additional.Properties)) *Mockshards_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]float32), args[4].(string), args[5].(float32), args[6].(int), args[7].(*filters.LocalFilter), args[8].(*searchparams.KeywordRanking), args[9].([]filters.Sort), args[10].(*filters.Cursor), args[11].(*searchparams.GroupBy), args[12].(additional.Properties))
	})
	return _c
}

func (_c *Mockshards_Search_Call) Return(_a0 []*storobj.Object, _a1 []float32, _a2 error) *Mockshards_Search_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Mockshards_Search_Call) RunAndReturn(run func(context.Context, string, string, []float32, string, float32, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) ([]*storobj.Object, []float32, error)) *Mockshards_Search_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShardStatus provides a mock function with given fields: ctx, indexName, shardName, targetStatus
func (_m *Mockshards) UpdateShardStatus(ctx context.Context, indexName string, shardName string, targetStatus string) error {
	ret := _m.Called(ctx, indexName, shardName, targetStatus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShardStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, indexName, shardName, targetStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockshards_UpdateShardStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShardStatus'
type Mockshards_UpdateShardStatus_Call struct {
	*mock.Call
}

// UpdateShardStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - targetStatus string
func (_e *Mockshards_Expecter) UpdateShardStatus(ctx interface{}, indexName interface{}, shardName interface{}, targetStatus interface{}) *Mockshards_UpdateShardStatus_Call {
	return &Mockshards_UpdateShardStatus_Call{Call: _e.mock.On("UpdateShardStatus", ctx, indexName, shardName, targetStatus)}
}

func (_c *Mockshards_UpdateShardStatus_Call) Run(run func(ctx context.Context, indexName string, shardName string, targetStatus string)) *Mockshards_UpdateShardStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Mockshards_UpdateShardStatus_Call) Return(_a0 error) *Mockshards_UpdateShardStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockshards_UpdateShardStatus_Call) RunAndReturn(run func(context.Context, string, string, string) error) *Mockshards_UpdateShardStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockshards creates a new instance of Mockshards. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockshards(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockshards {
	mock := &Mockshards{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
