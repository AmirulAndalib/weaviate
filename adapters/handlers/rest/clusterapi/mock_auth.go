//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package clusterapi

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Mockauth is an autogenerated mock type for the auth type
type Mockauth struct {
	mock.Mock
}

type Mockauth_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockauth) EXPECT() *Mockauth_Expecter {
	return &Mockauth_Expecter{mock: &_m.Mock}
}

// handleFunc provides a mock function with given fields: handler
func (_m *Mockauth) handleFunc(handler http.HandlerFunc) http.HandlerFunc {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for handleFunc")
	}

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func(http.HandlerFunc) http.HandlerFunc); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// Mockauth_handleFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'handleFunc'
type Mockauth_handleFunc_Call struct {
	*mock.Call
}

// handleFunc is a helper method to define mock.On call
//   - handler http.HandlerFunc
func (_e *Mockauth_Expecter) handleFunc(handler interface{}) *Mockauth_handleFunc_Call {
	return &Mockauth_handleFunc_Call{Call: _e.mock.On("handleFunc", handler)}
}

func (_c *Mockauth_handleFunc_Call) Run(run func(handler http.HandlerFunc)) *Mockauth_handleFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.HandlerFunc))
	})
	return _c
}

func (_c *Mockauth_handleFunc_Call) Return(_a0 http.HandlerFunc) *Mockauth_handleFunc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockauth_handleFunc_Call) RunAndReturn(run func(http.HandlerFunc) http.HandlerFunc) *Mockauth_handleFunc_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockauth creates a new instance of Mockauth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockauth(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockauth {
	mock := &Mockauth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
