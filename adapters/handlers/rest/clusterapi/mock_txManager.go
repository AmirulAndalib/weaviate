//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package clusterapi

import (
	context "context"

	cluster "github.com/weaviate/weaviate/usecases/cluster"

	mock "github.com/stretchr/testify/mock"
)

// MocktxManager is an autogenerated mock type for the txManager type
type MocktxManager struct {
	mock.Mock
}

type MocktxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MocktxManager) EXPECT() *MocktxManager_Expecter {
	return &MocktxManager_Expecter{mock: &_m.Mock}
}

// IncomingAbortTransaction provides a mock function with given fields: ctx, tx
func (_m *MocktxManager) IncomingAbortTransaction(ctx context.Context, tx *cluster.Transaction) {
	_m.Called(ctx, tx)
}

// MocktxManager_IncomingAbortTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingAbortTransaction'
type MocktxManager_IncomingAbortTransaction_Call struct {
	*mock.Call
}

// IncomingAbortTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *cluster.Transaction
func (_e *MocktxManager_Expecter) IncomingAbortTransaction(ctx interface{}, tx interface{}) *MocktxManager_IncomingAbortTransaction_Call {
	return &MocktxManager_IncomingAbortTransaction_Call{Call: _e.mock.On("IncomingAbortTransaction", ctx, tx)}
}

func (_c *MocktxManager_IncomingAbortTransaction_Call) Run(run func(ctx context.Context, tx *cluster.Transaction)) *MocktxManager_IncomingAbortTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cluster.Transaction))
	})
	return _c
}

func (_c *MocktxManager_IncomingAbortTransaction_Call) Return() *MocktxManager_IncomingAbortTransaction_Call {
	_c.Call.Return()
	return _c
}

func (_c *MocktxManager_IncomingAbortTransaction_Call) RunAndReturn(run func(context.Context, *cluster.Transaction)) *MocktxManager_IncomingAbortTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingBeginTransaction provides a mock function with given fields: ctx, tx
func (_m *MocktxManager) IncomingBeginTransaction(ctx context.Context, tx *cluster.Transaction) ([]byte, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for IncomingBeginTransaction")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cluster.Transaction) ([]byte, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cluster.Transaction) []byte); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cluster.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MocktxManager_IncomingBeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingBeginTransaction'
type MocktxManager_IncomingBeginTransaction_Call struct {
	*mock.Call
}

// IncomingBeginTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *cluster.Transaction
func (_e *MocktxManager_Expecter) IncomingBeginTransaction(ctx interface{}, tx interface{}) *MocktxManager_IncomingBeginTransaction_Call {
	return &MocktxManager_IncomingBeginTransaction_Call{Call: _e.mock.On("IncomingBeginTransaction", ctx, tx)}
}

func (_c *MocktxManager_IncomingBeginTransaction_Call) Run(run func(ctx context.Context, tx *cluster.Transaction)) *MocktxManager_IncomingBeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cluster.Transaction))
	})
	return _c
}

func (_c *MocktxManager_IncomingBeginTransaction_Call) Return(_a0 []byte, _a1 error) *MocktxManager_IncomingBeginTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocktxManager_IncomingBeginTransaction_Call) RunAndReturn(run func(context.Context, *cluster.Transaction) ([]byte, error)) *MocktxManager_IncomingBeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingCommitTransaction provides a mock function with given fields: ctx, tx
func (_m *MocktxManager) IncomingCommitTransaction(ctx context.Context, tx *cluster.Transaction) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for IncomingCommitTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cluster.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MocktxManager_IncomingCommitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingCommitTransaction'
type MocktxManager_IncomingCommitTransaction_Call struct {
	*mock.Call
}

// IncomingCommitTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *cluster.Transaction
func (_e *MocktxManager_Expecter) IncomingCommitTransaction(ctx interface{}, tx interface{}) *MocktxManager_IncomingCommitTransaction_Call {
	return &MocktxManager_IncomingCommitTransaction_Call{Call: _e.mock.On("IncomingCommitTransaction", ctx, tx)}
}

func (_c *MocktxManager_IncomingCommitTransaction_Call) Run(run func(ctx context.Context, tx *cluster.Transaction)) *MocktxManager_IncomingCommitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cluster.Transaction))
	})
	return _c
}

func (_c *MocktxManager_IncomingCommitTransaction_Call) Return(_a0 error) *MocktxManager_IncomingCommitTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocktxManager_IncomingCommitTransaction_Call) RunAndReturn(run func(context.Context, *cluster.Transaction) error) *MocktxManager_IncomingCommitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocktxManager creates a new instance of MocktxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocktxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocktxManager {
	mock := &MocktxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
