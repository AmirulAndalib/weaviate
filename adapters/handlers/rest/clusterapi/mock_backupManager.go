//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package clusterapi

import (
	context "context"

	backup "github.com/weaviate/weaviate/usecases/backup"

	mock "github.com/stretchr/testify/mock"
)

// MockbackupManager is an autogenerated mock type for the backupManager type
type MockbackupManager struct {
	mock.Mock
}

type MockbackupManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockbackupManager) EXPECT() *MockbackupManager_Expecter {
	return &MockbackupManager_Expecter{mock: &_m.Mock}
}

// OnAbort provides a mock function with given fields: ctx, req
func (_m *MockbackupManager) OnAbort(ctx context.Context, req *backup.AbortRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for OnAbort")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.AbortRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockbackupManager_OnAbort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnAbort'
type MockbackupManager_OnAbort_Call struct {
	*mock.Call
}

// OnAbort is a helper method to define mock.On call
//   - ctx context.Context
//   - req *backup.AbortRequest
func (_e *MockbackupManager_Expecter) OnAbort(ctx interface{}, req interface{}) *MockbackupManager_OnAbort_Call {
	return &MockbackupManager_OnAbort_Call{Call: _e.mock.On("OnAbort", ctx, req)}
}

func (_c *MockbackupManager_OnAbort_Call) Run(run func(ctx context.Context, req *backup.AbortRequest)) *MockbackupManager_OnAbort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*backup.AbortRequest))
	})
	return _c
}

func (_c *MockbackupManager_OnAbort_Call) Return(_a0 error) *MockbackupManager_OnAbort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockbackupManager_OnAbort_Call) RunAndReturn(run func(context.Context, *backup.AbortRequest) error) *MockbackupManager_OnAbort_Call {
	_c.Call.Return(run)
	return _c
}

// OnCanCommit provides a mock function with given fields: ctx, req
func (_m *MockbackupManager) OnCanCommit(ctx context.Context, req *backup.Request) *backup.CanCommitResponse {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for OnCanCommit")
	}

	var r0 *backup.CanCommitResponse
	if rf, ok := ret.Get(0).(func(context.Context, *backup.Request) *backup.CanCommitResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.CanCommitResponse)
		}
	}

	return r0
}

// MockbackupManager_OnCanCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnCanCommit'
type MockbackupManager_OnCanCommit_Call struct {
	*mock.Call
}

// OnCanCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - req *backup.Request
func (_e *MockbackupManager_Expecter) OnCanCommit(ctx interface{}, req interface{}) *MockbackupManager_OnCanCommit_Call {
	return &MockbackupManager_OnCanCommit_Call{Call: _e.mock.On("OnCanCommit", ctx, req)}
}

func (_c *MockbackupManager_OnCanCommit_Call) Run(run func(ctx context.Context, req *backup.Request)) *MockbackupManager_OnCanCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*backup.Request))
	})
	return _c
}

func (_c *MockbackupManager_OnCanCommit_Call) Return(_a0 *backup.CanCommitResponse) *MockbackupManager_OnCanCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockbackupManager_OnCanCommit_Call) RunAndReturn(run func(context.Context, *backup.Request) *backup.CanCommitResponse) *MockbackupManager_OnCanCommit_Call {
	_c.Call.Return(run)
	return _c
}

// OnCommit provides a mock function with given fields: ctx, req
func (_m *MockbackupManager) OnCommit(ctx context.Context, req *backup.StatusRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for OnCommit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StatusRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockbackupManager_OnCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnCommit'
type MockbackupManager_OnCommit_Call struct {
	*mock.Call
}

// OnCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - req *backup.StatusRequest
func (_e *MockbackupManager_Expecter) OnCommit(ctx interface{}, req interface{}) *MockbackupManager_OnCommit_Call {
	return &MockbackupManager_OnCommit_Call{Call: _e.mock.On("OnCommit", ctx, req)}
}

func (_c *MockbackupManager_OnCommit_Call) Run(run func(ctx context.Context, req *backup.StatusRequest)) *MockbackupManager_OnCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*backup.StatusRequest))
	})
	return _c
}

func (_c *MockbackupManager_OnCommit_Call) Return(_a0 error) *MockbackupManager_OnCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockbackupManager_OnCommit_Call) RunAndReturn(run func(context.Context, *backup.StatusRequest) error) *MockbackupManager_OnCommit_Call {
	_c.Call.Return(run)
	return _c
}

// OnStatus provides a mock function with given fields: ctx, req
func (_m *MockbackupManager) OnStatus(ctx context.Context, req *backup.StatusRequest) *backup.StatusResponse {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for OnStatus")
	}

	var r0 *backup.StatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StatusRequest) *backup.StatusResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.StatusResponse)
		}
	}

	return r0
}

// MockbackupManager_OnStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnStatus'
type MockbackupManager_OnStatus_Call struct {
	*mock.Call
}

// OnStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req *backup.StatusRequest
func (_e *MockbackupManager_Expecter) OnStatus(ctx interface{}, req interface{}) *MockbackupManager_OnStatus_Call {
	return &MockbackupManager_OnStatus_Call{Call: _e.mock.On("OnStatus", ctx, req)}
}

func (_c *MockbackupManager_OnStatus_Call) Run(run func(ctx context.Context, req *backup.StatusRequest)) *MockbackupManager_OnStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*backup.StatusRequest))
	})
	return _c
}

func (_c *MockbackupManager_OnStatus_Call) Return(_a0 *backup.StatusResponse) *MockbackupManager_OnStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockbackupManager_OnStatus_Call) RunAndReturn(run func(context.Context, *backup.StatusRequest) *backup.StatusResponse) *MockbackupManager_OnStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbackupManager creates a new instance of MockbackupManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbackupManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockbackupManager {
	mock := &MockbackupManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
