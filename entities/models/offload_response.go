//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OffloadResponse The definition of a offload response body
//
// swagger:model OffloadResponse
type OffloadResponse struct {

	// Offload backend name e.g. filesystem, gcs, s3.
	Backend string `json:"backend,omitempty"`

	// Class (name) offloaded tenant belongs to
	Class string `json:"class,omitempty"`

	// error message if offload failed
	Error string `json:"error,omitempty"`

	// destination path of offload files proper to selected backend
	Path string `json:"path,omitempty"`

	// phase of offload process
	// Enum: [STARTED TRANSFERRING TRANSFERRED SUCCESS FAILED]
	Status *string `json:"status,omitempty"`

	// Tenant for which the offload process was started
	Tenant string `json:"tenant,omitempty"`
}

// Validate validates this offload response
func (m *OffloadResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var offloadResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STARTED","TRANSFERRING","TRANSFERRED","SUCCESS","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		offloadResponseTypeStatusPropEnum = append(offloadResponseTypeStatusPropEnum, v)
	}
}

const (

	// OffloadResponseStatusSTARTED captures enum value "STARTED"
	OffloadResponseStatusSTARTED string = "STARTED"

	// OffloadResponseStatusTRANSFERRING captures enum value "TRANSFERRING"
	OffloadResponseStatusTRANSFERRING string = "TRANSFERRING"

	// OffloadResponseStatusTRANSFERRED captures enum value "TRANSFERRED"
	OffloadResponseStatusTRANSFERRED string = "TRANSFERRED"

	// OffloadResponseStatusSUCCESS captures enum value "SUCCESS"
	OffloadResponseStatusSUCCESS string = "SUCCESS"

	// OffloadResponseStatusFAILED captures enum value "FAILED"
	OffloadResponseStatusFAILED string = "FAILED"
)

// prop value enum
func (m *OffloadResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, offloadResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OffloadResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this offload response based on context it is used
func (m *OffloadResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OffloadResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OffloadResponse) UnmarshalBinary(b []byte) error {
	var res OffloadResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
