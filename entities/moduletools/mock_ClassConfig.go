//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package moduletools

import mock "github.com/stretchr/testify/mock"

// MockClassConfig is an autogenerated mock type for the ClassConfig type
type MockClassConfig struct {
	mock.Mock
}

type MockClassConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClassConfig) EXPECT() *MockClassConfig_Expecter {
	return &MockClassConfig_Expecter{mock: &_m.Mock}
}

// Class provides a mock function with given fields:
func (_m *MockClassConfig) Class() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Class")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockClassConfig_Class_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Class'
type MockClassConfig_Class_Call struct {
	*mock.Call
}

// Class is a helper method to define mock.On call
func (_e *MockClassConfig_Expecter) Class() *MockClassConfig_Class_Call {
	return &MockClassConfig_Class_Call{Call: _e.mock.On("Class")}
}

func (_c *MockClassConfig_Class_Call) Run(run func()) *MockClassConfig_Class_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassConfig_Class_Call) Return(_a0 map[string]interface{}) *MockClassConfig_Class_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassConfig_Class_Call) RunAndReturn(run func() map[string]interface{}) *MockClassConfig_Class_Call {
	_c.Call.Return(run)
	return _c
}

// ClassByModuleName provides a mock function with given fields: moduleName
func (_m *MockClassConfig) ClassByModuleName(moduleName string) map[string]interface{} {
	ret := _m.Called(moduleName)

	if len(ret) == 0 {
		panic("no return value specified for ClassByModuleName")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(moduleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockClassConfig_ClassByModuleName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClassByModuleName'
type MockClassConfig_ClassByModuleName_Call struct {
	*mock.Call
}

// ClassByModuleName is a helper method to define mock.On call
//   - moduleName string
func (_e *MockClassConfig_Expecter) ClassByModuleName(moduleName interface{}) *MockClassConfig_ClassByModuleName_Call {
	return &MockClassConfig_ClassByModuleName_Call{Call: _e.mock.On("ClassByModuleName", moduleName)}
}

func (_c *MockClassConfig_ClassByModuleName_Call) Run(run func(moduleName string)) *MockClassConfig_ClassByModuleName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassConfig_ClassByModuleName_Call) Return(_a0 map[string]interface{}) *MockClassConfig_ClassByModuleName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassConfig_ClassByModuleName_Call) RunAndReturn(run func(string) map[string]interface{}) *MockClassConfig_ClassByModuleName_Call {
	_c.Call.Return(run)
	return _c
}

// Property provides a mock function with given fields: propName
func (_m *MockClassConfig) Property(propName string) map[string]interface{} {
	ret := _m.Called(propName)

	if len(ret) == 0 {
		panic("no return value specified for Property")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(propName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockClassConfig_Property_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Property'
type MockClassConfig_Property_Call struct {
	*mock.Call
}

// Property is a helper method to define mock.On call
//   - propName string
func (_e *MockClassConfig_Expecter) Property(propName interface{}) *MockClassConfig_Property_Call {
	return &MockClassConfig_Property_Call{Call: _e.mock.On("Property", propName)}
}

func (_c *MockClassConfig_Property_Call) Run(run func(propName string)) *MockClassConfig_Property_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassConfig_Property_Call) Return(_a0 map[string]interface{}) *MockClassConfig_Property_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassConfig_Property_Call) RunAndReturn(run func(string) map[string]interface{}) *MockClassConfig_Property_Call {
	_c.Call.Return(run)
	return _c
}

// TargetVector provides a mock function with given fields:
func (_m *MockClassConfig) TargetVector() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TargetVector")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassConfig_TargetVector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TargetVector'
type MockClassConfig_TargetVector_Call struct {
	*mock.Call
}

// TargetVector is a helper method to define mock.On call
func (_e *MockClassConfig_Expecter) TargetVector() *MockClassConfig_TargetVector_Call {
	return &MockClassConfig_TargetVector_Call{Call: _e.mock.On("TargetVector")}
}

func (_c *MockClassConfig_TargetVector_Call) Run(run func()) *MockClassConfig_TargetVector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassConfig_TargetVector_Call) Return(_a0 string) *MockClassConfig_TargetVector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassConfig_TargetVector_Call) RunAndReturn(run func() string) *MockClassConfig_TargetVector_Call {
	_c.Call.Return(run)
	return _c
}

// Tenant provides a mock function with given fields:
func (_m *MockClassConfig) Tenant() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tenant")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassConfig_Tenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tenant'
type MockClassConfig_Tenant_Call struct {
	*mock.Call
}

// Tenant is a helper method to define mock.On call
func (_e *MockClassConfig_Expecter) Tenant() *MockClassConfig_Tenant_Call {
	return &MockClassConfig_Tenant_Call{Call: _e.mock.On("Tenant")}
}

func (_c *MockClassConfig_Tenant_Call) Run(run func()) *MockClassConfig_Tenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassConfig_Tenant_Call) Return(_a0 string) *MockClassConfig_Tenant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassConfig_Tenant_Call) RunAndReturn(run func() string) *MockClassConfig_Tenant_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClassConfig creates a new instance of MockClassConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClassConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClassConfig {
	mock := &MockClassConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
