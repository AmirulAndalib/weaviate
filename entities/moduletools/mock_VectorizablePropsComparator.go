//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package moduletools

import mock "github.com/stretchr/testify/mock"

// MockVectorizablePropsComparator is an autogenerated mock type for the VectorizablePropsComparator type
type MockVectorizablePropsComparator struct {
	mock.Mock
}

type MockVectorizablePropsComparator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVectorizablePropsComparator) EXPECT() *MockVectorizablePropsComparator_Expecter {
	return &MockVectorizablePropsComparator_Expecter{mock: &_m.Mock}
}

// IsChanged provides a mock function with given fields: propName
func (_m *MockVectorizablePropsComparator) IsChanged(propName string) bool {
	ret := _m.Called(propName)

	if len(ret) == 0 {
		panic("no return value specified for IsChanged")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(propName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockVectorizablePropsComparator_IsChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsChanged'
type MockVectorizablePropsComparator_IsChanged_Call struct {
	*mock.Call
}

// IsChanged is a helper method to define mock.On call
//   - propName string
func (_e *MockVectorizablePropsComparator_Expecter) IsChanged(propName interface{}) *MockVectorizablePropsComparator_IsChanged_Call {
	return &MockVectorizablePropsComparator_IsChanged_Call{Call: _e.mock.On("IsChanged", propName)}
}

func (_c *MockVectorizablePropsComparator_IsChanged_Call) Run(run func(propName string)) *MockVectorizablePropsComparator_IsChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockVectorizablePropsComparator_IsChanged_Call) Return(_a0 bool) *MockVectorizablePropsComparator_IsChanged_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorizablePropsComparator_IsChanged_Call) RunAndReturn(run func(string) bool) *MockVectorizablePropsComparator_IsChanged_Call {
	_c.Call.Return(run)
	return _c
}

// PrevVector provides a mock function with given fields:
func (_m *MockVectorizablePropsComparator) PrevVector() []float32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrevVector")
	}

	var r0 []float32
	if rf, ok := ret.Get(0).(func() []float32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	return r0
}

// MockVectorizablePropsComparator_PrevVector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevVector'
type MockVectorizablePropsComparator_PrevVector_Call struct {
	*mock.Call
}

// PrevVector is a helper method to define mock.On call
func (_e *MockVectorizablePropsComparator_Expecter) PrevVector() *MockVectorizablePropsComparator_PrevVector_Call {
	return &MockVectorizablePropsComparator_PrevVector_Call{Call: _e.mock.On("PrevVector")}
}

func (_c *MockVectorizablePropsComparator_PrevVector_Call) Run(run func()) *MockVectorizablePropsComparator_PrevVector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVectorizablePropsComparator_PrevVector_Call) Return(_a0 []float32) *MockVectorizablePropsComparator_PrevVector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorizablePropsComparator_PrevVector_Call) RunAndReturn(run func() []float32) *MockVectorizablePropsComparator_PrevVector_Call {
	_c.Call.Return(run)
	return _c
}

// PrevVectorForName provides a mock function with given fields: targetVector
func (_m *MockVectorizablePropsComparator) PrevVectorForName(targetVector string) []float32 {
	ret := _m.Called(targetVector)

	if len(ret) == 0 {
		panic("no return value specified for PrevVectorForName")
	}

	var r0 []float32
	if rf, ok := ret.Get(0).(func(string) []float32); ok {
		r0 = rf(targetVector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	return r0
}

// MockVectorizablePropsComparator_PrevVectorForName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrevVectorForName'
type MockVectorizablePropsComparator_PrevVectorForName_Call struct {
	*mock.Call
}

// PrevVectorForName is a helper method to define mock.On call
//   - targetVector string
func (_e *MockVectorizablePropsComparator_Expecter) PrevVectorForName(targetVector interface{}) *MockVectorizablePropsComparator_PrevVectorForName_Call {
	return &MockVectorizablePropsComparator_PrevVectorForName_Call{Call: _e.mock.On("PrevVectorForName", targetVector)}
}

func (_c *MockVectorizablePropsComparator_PrevVectorForName_Call) Run(run func(targetVector string)) *MockVectorizablePropsComparator_PrevVectorForName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockVectorizablePropsComparator_PrevVectorForName_Call) Return(_a0 []float32) *MockVectorizablePropsComparator_PrevVectorForName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorizablePropsComparator_PrevVectorForName_Call) RunAndReturn(run func(string) []float32) *MockVectorizablePropsComparator_PrevVectorForName_Call {
	_c.Call.Return(run)
	return _c
}

// PropsIterator provides a mock function with given fields:
func (_m *MockVectorizablePropsComparator) PropsIterator() VectorizablePropsIterator {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PropsIterator")
	}

	var r0 VectorizablePropsIterator
	if rf, ok := ret.Get(0).(func() VectorizablePropsIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(VectorizablePropsIterator)
		}
	}

	return r0
}

// MockVectorizablePropsComparator_PropsIterator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PropsIterator'
type MockVectorizablePropsComparator_PropsIterator_Call struct {
	*mock.Call
}

// PropsIterator is a helper method to define mock.On call
func (_e *MockVectorizablePropsComparator_Expecter) PropsIterator() *MockVectorizablePropsComparator_PropsIterator_Call {
	return &MockVectorizablePropsComparator_PropsIterator_Call{Call: _e.mock.On("PropsIterator")}
}

func (_c *MockVectorizablePropsComparator_PropsIterator_Call) Run(run func()) *MockVectorizablePropsComparator_PropsIterator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVectorizablePropsComparator_PropsIterator_Call) Return(_a0 VectorizablePropsIterator) *MockVectorizablePropsComparator_PropsIterator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorizablePropsComparator_PropsIterator_Call) RunAndReturn(run func() VectorizablePropsIterator) *MockVectorizablePropsComparator_PropsIterator_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVectorizablePropsComparator creates a new instance of MockVectorizablePropsComparator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVectorizablePropsComparator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVectorizablePropsComparator {
	mock := &MockVectorizablePropsComparator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
