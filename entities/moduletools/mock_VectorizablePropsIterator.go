//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package moduletools

import mock "github.com/stretchr/testify/mock"

// MockVectorizablePropsIterator is an autogenerated mock type for the VectorizablePropsIterator type
type MockVectorizablePropsIterator struct {
	mock.Mock
}

type MockVectorizablePropsIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVectorizablePropsIterator) EXPECT() *MockVectorizablePropsIterator_Expecter {
	return &MockVectorizablePropsIterator_Expecter{mock: &_m.Mock}
}

// Next provides a mock function with given fields:
func (_m *MockVectorizablePropsIterator) Next() (string, interface{}, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 string
	var r1 interface{}
	var r2 bool
	if rf, ok := ret.Get(0).(func() (string, interface{}, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() interface{}); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	if rf, ok := ret.Get(2).(func() bool); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// MockVectorizablePropsIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockVectorizablePropsIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockVectorizablePropsIterator_Expecter) Next() *MockVectorizablePropsIterator_Next_Call {
	return &MockVectorizablePropsIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockVectorizablePropsIterator_Next_Call) Run(run func()) *MockVectorizablePropsIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVectorizablePropsIterator_Next_Call) Return(propName string, propValue interface{}, ok bool) *MockVectorizablePropsIterator_Next_Call {
	_c.Call.Return(propName, propValue, ok)
	return _c
}

func (_c *MockVectorizablePropsIterator_Next_Call) RunAndReturn(run func() (string, interface{}, bool)) *MockVectorizablePropsIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVectorizablePropsIterator creates a new instance of MockVectorizablePropsIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVectorizablePropsIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVectorizablePropsIterator {
	mock := &MockVectorizablePropsIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
