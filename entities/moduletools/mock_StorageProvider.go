//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package moduletools

import mock "github.com/stretchr/testify/mock"

// MockStorageProvider is an autogenerated mock type for the StorageProvider type
type MockStorageProvider struct {
	mock.Mock
}

type MockStorageProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageProvider) EXPECT() *MockStorageProvider_Expecter {
	return &MockStorageProvider_Expecter{mock: &_m.Mock}
}

// DataPath provides a mock function with given fields:
func (_m *MockStorageProvider) DataPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DataPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockStorageProvider_DataPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataPath'
type MockStorageProvider_DataPath_Call struct {
	*mock.Call
}

// DataPath is a helper method to define mock.On call
func (_e *MockStorageProvider_Expecter) DataPath() *MockStorageProvider_DataPath_Call {
	return &MockStorageProvider_DataPath_Call{Call: _e.mock.On("DataPath")}
}

func (_c *MockStorageProvider_DataPath_Call) Run(run func()) *MockStorageProvider_DataPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorageProvider_DataPath_Call) Return(_a0 string) *MockStorageProvider_DataPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageProvider_DataPath_Call) RunAndReturn(run func() string) *MockStorageProvider_DataPath_Call {
	_c.Call.Return(run)
	return _c
}

// Storage provides a mock function with given fields: name
func (_m *MockStorageProvider) Storage(name string) (Storage, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Storage")
	}

	var r0 Storage
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Storage, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) Storage); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Storage)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageProvider_Storage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Storage'
type MockStorageProvider_Storage_Call struct {
	*mock.Call
}

// Storage is a helper method to define mock.On call
//   - name string
func (_e *MockStorageProvider_Expecter) Storage(name interface{}) *MockStorageProvider_Storage_Call {
	return &MockStorageProvider_Storage_Call{Call: _e.mock.On("Storage", name)}
}

func (_c *MockStorageProvider_Storage_Call) Run(run func(name string)) *MockStorageProvider_Storage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStorageProvider_Storage_Call) Return(_a0 Storage, _a1 error) *MockStorageProvider_Storage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageProvider_Storage_Call) RunAndReturn(run func(string) (Storage, error)) *MockStorageProvider_Storage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorageProvider creates a new instance of MockStorageProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageProvider {
	mock := &MockStorageProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
