//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package moduletools

import mock "github.com/stretchr/testify/mock"

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *MockStorage) Get(key []byte) ([]byte, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key []byte
func (_e *MockStorage_Expecter) Get(key interface{}) *MockStorage_Get_Call {
	return &MockStorage_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockStorage_Get_Call) Run(run func(key []byte)) *MockStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockStorage_Get_Call) Return(_a0 []byte, _a1 error) *MockStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Get_Call) RunAndReturn(run func([]byte) ([]byte, error)) *MockStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: key, value
func (_m *MockStorage) Put(key []byte, value []byte) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockStorage_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - key []byte
//   - value []byte
func (_e *MockStorage_Expecter) Put(key interface{}, value interface{}) *MockStorage_Put_Call {
	return &MockStorage_Put_Call{Call: _e.mock.On("Put", key, value)}
}

func (_c *MockStorage_Put_Call) Run(run func(key []byte, value []byte)) *MockStorage_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockStorage_Put_Call) Return(_a0 error) *MockStorage_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Put_Call) RunAndReturn(run func([]byte, []byte) error) *MockStorage_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with given fields: scan
func (_m *MockStorage) Scan(scan ScanFn) error {
	ret := _m.Called(scan)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ScanFn) error); ok {
		r0 = rf(scan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockStorage_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - scan ScanFn
func (_e *MockStorage_Expecter) Scan(scan interface{}) *MockStorage_Scan_Call {
	return &MockStorage_Scan_Call{Call: _e.mock.On("Scan", scan)}
}

func (_c *MockStorage_Scan_Call) Run(run func(scan ScanFn)) *MockStorage_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ScanFn))
	})
	return _c
}

func (_c *MockStorage_Scan_Call) Return(_a0 error) *MockStorage_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Scan_Call) RunAndReturn(run func(ScanFn) error) *MockStorage_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
