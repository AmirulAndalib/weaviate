//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package storobj

import mock "github.com/stretchr/testify/mock"

// Mockbucket is an autogenerated mock type for the bucket type
type Mockbucket struct {
	mock.Mock
}

type Mockbucket_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockbucket) EXPECT() *Mockbucket_Expecter {
	return &Mockbucket_Expecter{mock: &_m.Mock}
}

// GetBySecondary provides a mock function with given fields: _a0, _a1
func (_m *Mockbucket) GetBySecondary(_a0 int, _a1 []byte) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBySecondary")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int, []byte) ([]byte, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, []byte) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockbucket_GetBySecondary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySecondary'
type Mockbucket_GetBySecondary_Call struct {
	*mock.Call
}

// GetBySecondary is a helper method to define mock.On call
//   - _a0 int
//   - _a1 []byte
func (_e *Mockbucket_Expecter) GetBySecondary(_a0 interface{}, _a1 interface{}) *Mockbucket_GetBySecondary_Call {
	return &Mockbucket_GetBySecondary_Call{Call: _e.mock.On("GetBySecondary", _a0, _a1)}
}

func (_c *Mockbucket_GetBySecondary_Call) Run(run func(_a0 int, _a1 []byte)) *Mockbucket_GetBySecondary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]byte))
	})
	return _c
}

func (_c *Mockbucket_GetBySecondary_Call) Return(_a0 []byte, _a1 error) *Mockbucket_GetBySecondary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockbucket_GetBySecondary_Call) RunAndReturn(run func(int, []byte) ([]byte, error)) *Mockbucket_GetBySecondary_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySecondaryWithBuffer provides a mock function with given fields: _a0, _a1, _a2
func (_m *Mockbucket) GetBySecondaryWithBuffer(_a0 int, _a1 []byte, _a2 []byte) ([]byte, []byte, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetBySecondaryWithBuffer")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(int, []byte, []byte) ([]byte, []byte, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(int, []byte, []byte) []byte); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int, []byte, []byte) []byte); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(int, []byte, []byte) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Mockbucket_GetBySecondaryWithBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySecondaryWithBuffer'
type Mockbucket_GetBySecondaryWithBuffer_Call struct {
	*mock.Call
}

// GetBySecondaryWithBuffer is a helper method to define mock.On call
//   - _a0 int
//   - _a1 []byte
//   - _a2 []byte
func (_e *Mockbucket_Expecter) GetBySecondaryWithBuffer(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Mockbucket_GetBySecondaryWithBuffer_Call {
	return &Mockbucket_GetBySecondaryWithBuffer_Call{Call: _e.mock.On("GetBySecondaryWithBuffer", _a0, _a1, _a2)}
}

func (_c *Mockbucket_GetBySecondaryWithBuffer_Call) Run(run func(_a0 int, _a1 []byte, _a2 []byte)) *Mockbucket_GetBySecondaryWithBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *Mockbucket_GetBySecondaryWithBuffer_Call) Return(_a0 []byte, _a1 []byte, _a2 error) *Mockbucket_GetBySecondaryWithBuffer_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Mockbucket_GetBySecondaryWithBuffer_Call) RunAndReturn(run func(int, []byte, []byte) ([]byte, []byte, error)) *Mockbucket_GetBySecondaryWithBuffer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbucket creates a new instance of Mockbucket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbucket(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockbucket {
	mock := &Mockbucket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
