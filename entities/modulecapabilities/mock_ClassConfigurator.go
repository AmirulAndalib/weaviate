//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package modulecapabilities

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"

	moduletools "github.com/weaviate/weaviate/entities/moduletools"

	schema "github.com/weaviate/weaviate/entities/schema"
)

// MockClassConfigurator is an autogenerated mock type for the ClassConfigurator type
type MockClassConfigurator struct {
	mock.Mock
}

type MockClassConfigurator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClassConfigurator) EXPECT() *MockClassConfigurator_Expecter {
	return &MockClassConfigurator_Expecter{mock: &_m.Mock}
}

// ClassConfigDefaults provides a mock function with given fields:
func (_m *MockClassConfigurator) ClassConfigDefaults() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClassConfigDefaults")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockClassConfigurator_ClassConfigDefaults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClassConfigDefaults'
type MockClassConfigurator_ClassConfigDefaults_Call struct {
	*mock.Call
}

// ClassConfigDefaults is a helper method to define mock.On call
func (_e *MockClassConfigurator_Expecter) ClassConfigDefaults() *MockClassConfigurator_ClassConfigDefaults_Call {
	return &MockClassConfigurator_ClassConfigDefaults_Call{Call: _e.mock.On("ClassConfigDefaults")}
}

func (_c *MockClassConfigurator_ClassConfigDefaults_Call) Run(run func()) *MockClassConfigurator_ClassConfigDefaults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassConfigurator_ClassConfigDefaults_Call) Return(_a0 map[string]interface{}) *MockClassConfigurator_ClassConfigDefaults_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassConfigurator_ClassConfigDefaults_Call) RunAndReturn(run func() map[string]interface{}) *MockClassConfigurator_ClassConfigDefaults_Call {
	_c.Call.Return(run)
	return _c
}

// PropertyConfigDefaults provides a mock function with given fields: dataType
func (_m *MockClassConfigurator) PropertyConfigDefaults(dataType *schema.DataType) map[string]interface{} {
	ret := _m.Called(dataType)

	if len(ret) == 0 {
		panic("no return value specified for PropertyConfigDefaults")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(*schema.DataType) map[string]interface{}); ok {
		r0 = rf(dataType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockClassConfigurator_PropertyConfigDefaults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PropertyConfigDefaults'
type MockClassConfigurator_PropertyConfigDefaults_Call struct {
	*mock.Call
}

// PropertyConfigDefaults is a helper method to define mock.On call
//   - dataType *schema.DataType
func (_e *MockClassConfigurator_Expecter) PropertyConfigDefaults(dataType interface{}) *MockClassConfigurator_PropertyConfigDefaults_Call {
	return &MockClassConfigurator_PropertyConfigDefaults_Call{Call: _e.mock.On("PropertyConfigDefaults", dataType)}
}

func (_c *MockClassConfigurator_PropertyConfigDefaults_Call) Run(run func(dataType *schema.DataType)) *MockClassConfigurator_PropertyConfigDefaults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*schema.DataType))
	})
	return _c
}

func (_c *MockClassConfigurator_PropertyConfigDefaults_Call) Return(_a0 map[string]interface{}) *MockClassConfigurator_PropertyConfigDefaults_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassConfigurator_PropertyConfigDefaults_Call) RunAndReturn(run func(*schema.DataType) map[string]interface{}) *MockClassConfigurator_PropertyConfigDefaults_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateClass provides a mock function with given fields: ctx, class, classConfig
func (_m *MockClassConfigurator) ValidateClass(ctx context.Context, class *models.Class, classConfig moduletools.ClassConfig) error {
	ret := _m.Called(ctx, class, classConfig)

	if len(ret) == 0 {
		panic("no return value specified for ValidateClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Class, moduletools.ClassConfig) error); ok {
		r0 = rf(ctx, class, classConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClassConfigurator_ValidateClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateClass'
type MockClassConfigurator_ValidateClass_Call struct {
	*mock.Call
}

// ValidateClass is a helper method to define mock.On call
//   - ctx context.Context
//   - class *models.Class
//   - classConfig moduletools.ClassConfig
func (_e *MockClassConfigurator_Expecter) ValidateClass(ctx interface{}, class interface{}, classConfig interface{}) *MockClassConfigurator_ValidateClass_Call {
	return &MockClassConfigurator_ValidateClass_Call{Call: _e.mock.On("ValidateClass", ctx, class, classConfig)}
}

func (_c *MockClassConfigurator_ValidateClass_Call) Run(run func(ctx context.Context, class *models.Class, classConfig moduletools.ClassConfig)) *MockClassConfigurator_ValidateClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Class), args[2].(moduletools.ClassConfig))
	})
	return _c
}

func (_c *MockClassConfigurator_ValidateClass_Call) Return(_a0 error) *MockClassConfigurator_ValidateClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassConfigurator_ValidateClass_Call) RunAndReturn(run func(context.Context, *models.Class, moduletools.ClassConfig) error) *MockClassConfigurator_ValidateClass_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClassConfigurator creates a new instance of MockClassConfigurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClassConfigurator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClassConfigurator {
	mock := &MockClassConfigurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
