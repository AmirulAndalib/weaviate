//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package modulecapabilities

import mock "github.com/stretchr/testify/mock"

// MockNearParam is an autogenerated mock type for the NearParam type
type MockNearParam struct {
	mock.Mock
}

type MockNearParam_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNearParam) EXPECT() *MockNearParam_Expecter {
	return &MockNearParam_Expecter{mock: &_m.Mock}
}

// GetCertainty provides a mock function with given fields:
func (_m *MockNearParam) GetCertainty() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCertainty")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockNearParam_GetCertainty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertainty'
type MockNearParam_GetCertainty_Call struct {
	*mock.Call
}

// GetCertainty is a helper method to define mock.On call
func (_e *MockNearParam_Expecter) GetCertainty() *MockNearParam_GetCertainty_Call {
	return &MockNearParam_GetCertainty_Call{Call: _e.mock.On("GetCertainty")}
}

func (_c *MockNearParam_GetCertainty_Call) Run(run func()) *MockNearParam_GetCertainty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNearParam_GetCertainty_Call) Return(_a0 float64) *MockNearParam_GetCertainty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNearParam_GetCertainty_Call) RunAndReturn(run func() float64) *MockNearParam_GetCertainty_Call {
	_c.Call.Return(run)
	return _c
}

// GetDistance provides a mock function with given fields:
func (_m *MockNearParam) GetDistance() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDistance")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockNearParam_GetDistance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDistance'
type MockNearParam_GetDistance_Call struct {
	*mock.Call
}

// GetDistance is a helper method to define mock.On call
func (_e *MockNearParam_Expecter) GetDistance() *MockNearParam_GetDistance_Call {
	return &MockNearParam_GetDistance_Call{Call: _e.mock.On("GetDistance")}
}

func (_c *MockNearParam_GetDistance_Call) Run(run func()) *MockNearParam_GetDistance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNearParam_GetDistance_Call) Return(_a0 float64) *MockNearParam_GetDistance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNearParam_GetDistance_Call) RunAndReturn(run func() float64) *MockNearParam_GetDistance_Call {
	_c.Call.Return(run)
	return _c
}

// GetTargetVectors provides a mock function with given fields:
func (_m *MockNearParam) GetTargetVectors() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTargetVectors")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockNearParam_GetTargetVectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTargetVectors'
type MockNearParam_GetTargetVectors_Call struct {
	*mock.Call
}

// GetTargetVectors is a helper method to define mock.On call
func (_e *MockNearParam_Expecter) GetTargetVectors() *MockNearParam_GetTargetVectors_Call {
	return &MockNearParam_GetTargetVectors_Call{Call: _e.mock.On("GetTargetVectors")}
}

func (_c *MockNearParam_GetTargetVectors_Call) Run(run func()) *MockNearParam_GetTargetVectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNearParam_GetTargetVectors_Call) Return(_a0 []string) *MockNearParam_GetTargetVectors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNearParam_GetTargetVectors_Call) RunAndReturn(run func() []string) *MockNearParam_GetTargetVectors_Call {
	_c.Call.Return(run)
	return _c
}

// SimilarityMetricProvided provides a mock function with given fields:
func (_m *MockNearParam) SimilarityMetricProvided() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SimilarityMetricProvided")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockNearParam_SimilarityMetricProvided_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimilarityMetricProvided'
type MockNearParam_SimilarityMetricProvided_Call struct {
	*mock.Call
}

// SimilarityMetricProvided is a helper method to define mock.On call
func (_e *MockNearParam_Expecter) SimilarityMetricProvided() *MockNearParam_SimilarityMetricProvided_Call {
	return &MockNearParam_SimilarityMetricProvided_Call{Call: _e.mock.On("SimilarityMetricProvided")}
}

func (_c *MockNearParam_SimilarityMetricProvided_Call) Run(run func()) *MockNearParam_SimilarityMetricProvided_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNearParam_SimilarityMetricProvided_Call) Return(_a0 bool) *MockNearParam_SimilarityMetricProvided_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNearParam_SimilarityMetricProvided_Call) RunAndReturn(run func() bool) *MockNearParam_SimilarityMetricProvided_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNearParam creates a new instance of MockNearParam. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNearParam(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNearParam {
	mock := &MockNearParam{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
