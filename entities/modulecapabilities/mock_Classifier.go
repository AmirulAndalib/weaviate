//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package modulecapabilities

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"
)

// MockClassifier is an autogenerated mock type for the Classifier type
type MockClassifier struct {
	mock.Mock
}

type MockClassifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClassifier) EXPECT() *MockClassifier_Expecter {
	return &MockClassifier_Expecter{mock: &_m.Mock}
}

// ClassifyFn provides a mock function with given fields: params
func (_m *MockClassifier) ClassifyFn(params ClassifyParams) (ClassifyItemFn, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for ClassifyFn")
	}

	var r0 ClassifyItemFn
	var r1 error
	if rf, ok := ret.Get(0).(func(ClassifyParams) (ClassifyItemFn, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(ClassifyParams) ClassifyItemFn); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ClassifyItemFn)
		}
	}

	if rf, ok := ret.Get(1).(func(ClassifyParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClassifier_ClassifyFn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClassifyFn'
type MockClassifier_ClassifyFn_Call struct {
	*mock.Call
}

// ClassifyFn is a helper method to define mock.On call
//   - params ClassifyParams
func (_e *MockClassifier_Expecter) ClassifyFn(params interface{}) *MockClassifier_ClassifyFn_Call {
	return &MockClassifier_ClassifyFn_Call{Call: _e.mock.On("ClassifyFn", params)}
}

func (_c *MockClassifier_ClassifyFn_Call) Run(run func(params ClassifyParams)) *MockClassifier_ClassifyFn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ClassifyParams))
	})
	return _c
}

func (_c *MockClassifier_ClassifyFn_Call) Return(_a0 ClassifyItemFn, _a1 error) *MockClassifier_ClassifyFn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClassifier_ClassifyFn_Call) RunAndReturn(run func(ClassifyParams) (ClassifyItemFn, error)) *MockClassifier_ClassifyFn_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockClassifier) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassifier_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockClassifier_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockClassifier_Expecter) Name() *MockClassifier_Name_Call {
	return &MockClassifier_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockClassifier_Name_Call) Run(run func()) *MockClassifier_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassifier_Name_Call) Return(_a0 string) *MockClassifier_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassifier_Name_Call) RunAndReturn(run func() string) *MockClassifier_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ParseClassifierSettings provides a mock function with given fields: params
func (_m *MockClassifier) ParseClassifierSettings(params *models.Classification) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for ParseClassifierSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Classification) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClassifier_ParseClassifierSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseClassifierSettings'
type MockClassifier_ParseClassifierSettings_Call struct {
	*mock.Call
}

// ParseClassifierSettings is a helper method to define mock.On call
//   - params *models.Classification
func (_e *MockClassifier_Expecter) ParseClassifierSettings(params interface{}) *MockClassifier_ParseClassifierSettings_Call {
	return &MockClassifier_ParseClassifierSettings_Call{Call: _e.mock.On("ParseClassifierSettings", params)}
}

func (_c *MockClassifier_ParseClassifierSettings_Call) Run(run func(params *models.Classification)) *MockClassifier_ParseClassifierSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Classification))
	})
	return _c
}

func (_c *MockClassifier_ParseClassifierSettings_Call) Return(_a0 error) *MockClassifier_ParseClassifierSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassifier_ParseClassifierSettings_Call) RunAndReturn(run func(*models.Classification) error) *MockClassifier_ParseClassifierSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClassifier creates a new instance of MockClassifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClassifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClassifier {
	mock := &MockClassifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
