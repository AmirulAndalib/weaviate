//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package modulecapabilities

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	moduletools "github.com/weaviate/weaviate/entities/moduletools"
)

// MockModuleDependency is an autogenerated mock type for the ModuleDependency type
type MockModuleDependency struct {
	mock.Mock
}

type MockModuleDependency_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModuleDependency) EXPECT() *MockModuleDependency_Expecter {
	return &MockModuleDependency_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: ctx, params
func (_m *MockModuleDependency) Init(ctx context.Context, params moduletools.ModuleInitParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, moduletools.ModuleInitParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModuleDependency_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockModuleDependency_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
//   - params moduletools.ModuleInitParams
func (_e *MockModuleDependency_Expecter) Init(ctx interface{}, params interface{}) *MockModuleDependency_Init_Call {
	return &MockModuleDependency_Init_Call{Call: _e.mock.On("Init", ctx, params)}
}

func (_c *MockModuleDependency_Init_Call) Run(run func(ctx context.Context, params moduletools.ModuleInitParams)) *MockModuleDependency_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(moduletools.ModuleInitParams))
	})
	return _c
}

func (_c *MockModuleDependency_Init_Call) Return(_a0 error) *MockModuleDependency_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModuleDependency_Init_Call) RunAndReturn(run func(context.Context, moduletools.ModuleInitParams) error) *MockModuleDependency_Init_Call {
	_c.Call.Return(run)
	return _c
}

// InitDependency provides a mock function with given fields: modules
func (_m *MockModuleDependency) InitDependency(modules []Module) error {
	ret := _m.Called(modules)

	if len(ret) == 0 {
		panic("no return value specified for InitDependency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]Module) error); ok {
		r0 = rf(modules)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModuleDependency_InitDependency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitDependency'
type MockModuleDependency_InitDependency_Call struct {
	*mock.Call
}

// InitDependency is a helper method to define mock.On call
//   - modules []Module
func (_e *MockModuleDependency_Expecter) InitDependency(modules interface{}) *MockModuleDependency_InitDependency_Call {
	return &MockModuleDependency_InitDependency_Call{Call: _e.mock.On("InitDependency", modules)}
}

func (_c *MockModuleDependency_InitDependency_Call) Run(run func(modules []Module)) *MockModuleDependency_InitDependency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]Module))
	})
	return _c
}

func (_c *MockModuleDependency_InitDependency_Call) Return(_a0 error) *MockModuleDependency_InitDependency_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModuleDependency_InitDependency_Call) RunAndReturn(run func([]Module) error) *MockModuleDependency_InitDependency_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockModuleDependency) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockModuleDependency_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockModuleDependency_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockModuleDependency_Expecter) Name() *MockModuleDependency_Name_Call {
	return &MockModuleDependency_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockModuleDependency_Name_Call) Run(run func()) *MockModuleDependency_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModuleDependency_Name_Call) Return(_a0 string) *MockModuleDependency_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModuleDependency_Name_Call) RunAndReturn(run func() string) *MockModuleDependency_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RootHandler provides a mock function with given fields:
func (_m *MockModuleDependency) RootHandler() http.Handler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RootHandler")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// MockModuleDependency_RootHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RootHandler'
type MockModuleDependency_RootHandler_Call struct {
	*mock.Call
}

// RootHandler is a helper method to define mock.On call
func (_e *MockModuleDependency_Expecter) RootHandler() *MockModuleDependency_RootHandler_Call {
	return &MockModuleDependency_RootHandler_Call{Call: _e.mock.On("RootHandler")}
}

func (_c *MockModuleDependency_RootHandler_Call) Run(run func()) *MockModuleDependency_RootHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModuleDependency_RootHandler_Call) Return(_a0 http.Handler) *MockModuleDependency_RootHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModuleDependency_RootHandler_Call) RunAndReturn(run func() http.Handler) *MockModuleDependency_RootHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *MockModuleDependency) Type() ModuleType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 ModuleType
	if rf, ok := ret.Get(0).(func() ModuleType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ModuleType)
	}

	return r0
}

// MockModuleDependency_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockModuleDependency_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockModuleDependency_Expecter) Type() *MockModuleDependency_Type_Call {
	return &MockModuleDependency_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockModuleDependency_Type_Call) Run(run func()) *MockModuleDependency_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModuleDependency_Type_Call) Return(_a0 ModuleType) *MockModuleDependency_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModuleDependency_Type_Call) RunAndReturn(run func() ModuleType) *MockModuleDependency_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModuleDependency creates a new instance of MockModuleDependency. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModuleDependency(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModuleDependency {
	mock := &MockModuleDependency{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
