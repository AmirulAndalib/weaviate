//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package modulecapabilities

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"

	search "github.com/weaviate/weaviate/entities/search"
)

// MockClassifyItemFn is an autogenerated mock type for the ClassifyItemFn type
type MockClassifyItemFn struct {
	mock.Mock
}

type MockClassifyItemFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClassifyItemFn) EXPECT() *MockClassifyItemFn_Expecter {
	return &MockClassifyItemFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: item, itemIndex, params, filters, writer
func (_m *MockClassifyItemFn) Execute(item search.Result, itemIndex int, params models.Classification, filters Filters, writer Writer) error {
	ret := _m.Called(item, itemIndex, params, filters, writer)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(search.Result, int, models.Classification, Filters, Writer) error); ok {
		r0 = rf(item, itemIndex, params, filters, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClassifyItemFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockClassifyItemFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - item search.Result
//   - itemIndex int
//   - params models.Classification
//   - filters Filters
//   - writer Writer
func (_e *MockClassifyItemFn_Expecter) Execute(item interface{}, itemIndex interface{}, params interface{}, filters interface{}, writer interface{}) *MockClassifyItemFn_Execute_Call {
	return &MockClassifyItemFn_Execute_Call{Call: _e.mock.On("Execute", item, itemIndex, params, filters, writer)}
}

func (_c *MockClassifyItemFn_Execute_Call) Run(run func(item search.Result, itemIndex int, params models.Classification, filters Filters, writer Writer)) *MockClassifyItemFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(search.Result), args[1].(int), args[2].(models.Classification), args[3].(Filters), args[4].(Writer))
	})
	return _c
}

func (_c *MockClassifyItemFn_Execute_Call) Return(_a0 error) *MockClassifyItemFn_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassifyItemFn_Execute_Call) RunAndReturn(run func(search.Result, int, models.Classification, Filters, Writer) error) *MockClassifyItemFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClassifyItemFn creates a new instance of MockClassifyItemFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClassifyItemFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClassifyItemFn {
	mock := &MockClassifyItemFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
