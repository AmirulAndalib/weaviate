//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package schema

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"
)

// MockPropertyInterface is an autogenerated mock type for the PropertyInterface type
type MockPropertyInterface struct {
	mock.Mock
}

type MockPropertyInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPropertyInterface) EXPECT() *MockPropertyInterface_Expecter {
	return &MockPropertyInterface_Expecter{mock: &_m.Mock}
}

// GetName provides a mock function with given fields:
func (_m *MockPropertyInterface) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPropertyInterface_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockPropertyInterface_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockPropertyInterface_Expecter) GetName() *MockPropertyInterface_GetName_Call {
	return &MockPropertyInterface_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockPropertyInterface_GetName_Call) Run(run func()) *MockPropertyInterface_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPropertyInterface_GetName_Call) Return(_a0 string) *MockPropertyInterface_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyInterface_GetName_Call) RunAndReturn(run func() string) *MockPropertyInterface_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNestedProperties provides a mock function with given fields:
func (_m *MockPropertyInterface) GetNestedProperties() []*models.NestedProperty {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNestedProperties")
	}

	var r0 []*models.NestedProperty
	if rf, ok := ret.Get(0).(func() []*models.NestedProperty); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.NestedProperty)
		}
	}

	return r0
}

// MockPropertyInterface_GetNestedProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNestedProperties'
type MockPropertyInterface_GetNestedProperties_Call struct {
	*mock.Call
}

// GetNestedProperties is a helper method to define mock.On call
func (_e *MockPropertyInterface_Expecter) GetNestedProperties() *MockPropertyInterface_GetNestedProperties_Call {
	return &MockPropertyInterface_GetNestedProperties_Call{Call: _e.mock.On("GetNestedProperties")}
}

func (_c *MockPropertyInterface_GetNestedProperties_Call) Run(run func()) *MockPropertyInterface_GetNestedProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPropertyInterface_GetNestedProperties_Call) Return(_a0 []*models.NestedProperty) *MockPropertyInterface_GetNestedProperties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyInterface_GetNestedProperties_Call) RunAndReturn(run func() []*models.NestedProperty) *MockPropertyInterface_GetNestedProperties_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPropertyInterface creates a new instance of MockPropertyInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPropertyInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPropertyInterface {
	mock := &MockPropertyInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
