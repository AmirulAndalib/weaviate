//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package schema

import mock "github.com/stretchr/testify/mock"

// MockVectorIndexConfig is an autogenerated mock type for the VectorIndexConfig type
type MockVectorIndexConfig struct {
	mock.Mock
}

type MockVectorIndexConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVectorIndexConfig) EXPECT() *MockVectorIndexConfig_Expecter {
	return &MockVectorIndexConfig_Expecter{mock: &_m.Mock}
}

// DistanceName provides a mock function with given fields:
func (_m *MockVectorIndexConfig) DistanceName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DistanceName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockVectorIndexConfig_DistanceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistanceName'
type MockVectorIndexConfig_DistanceName_Call struct {
	*mock.Call
}

// DistanceName is a helper method to define mock.On call
func (_e *MockVectorIndexConfig_Expecter) DistanceName() *MockVectorIndexConfig_DistanceName_Call {
	return &MockVectorIndexConfig_DistanceName_Call{Call: _e.mock.On("DistanceName")}
}

func (_c *MockVectorIndexConfig_DistanceName_Call) Run(run func()) *MockVectorIndexConfig_DistanceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVectorIndexConfig_DistanceName_Call) Return(_a0 string) *MockVectorIndexConfig_DistanceName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorIndexConfig_DistanceName_Call) RunAndReturn(run func() string) *MockVectorIndexConfig_DistanceName_Call {
	_c.Call.Return(run)
	return _c
}

// IndexType provides a mock function with given fields:
func (_m *MockVectorIndexConfig) IndexType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IndexType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockVectorIndexConfig_IndexType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexType'
type MockVectorIndexConfig_IndexType_Call struct {
	*mock.Call
}

// IndexType is a helper method to define mock.On call
func (_e *MockVectorIndexConfig_Expecter) IndexType() *MockVectorIndexConfig_IndexType_Call {
	return &MockVectorIndexConfig_IndexType_Call{Call: _e.mock.On("IndexType")}
}

func (_c *MockVectorIndexConfig_IndexType_Call) Run(run func()) *MockVectorIndexConfig_IndexType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVectorIndexConfig_IndexType_Call) Return(_a0 string) *MockVectorIndexConfig_IndexType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorIndexConfig_IndexType_Call) RunAndReturn(run func() string) *MockVectorIndexConfig_IndexType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVectorIndexConfig creates a new instance of MockVectorIndexConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVectorIndexConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVectorIndexConfig {
	mock := &MockVectorIndexConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
