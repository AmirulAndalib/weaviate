//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package schema

import mock "github.com/stretchr/testify/mock"

// MockPropertyDataType is an autogenerated mock type for the PropertyDataType type
type MockPropertyDataType struct {
	mock.Mock
}

type MockPropertyDataType_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPropertyDataType) EXPECT() *MockPropertyDataType_Expecter {
	return &MockPropertyDataType_Expecter{mock: &_m.Mock}
}

// AsNested provides a mock function with given fields:
func (_m *MockPropertyDataType) AsNested() DataType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AsNested")
	}

	var r0 DataType
	if rf, ok := ret.Get(0).(func() DataType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(DataType)
	}

	return r0
}

// MockPropertyDataType_AsNested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsNested'
type MockPropertyDataType_AsNested_Call struct {
	*mock.Call
}

// AsNested is a helper method to define mock.On call
func (_e *MockPropertyDataType_Expecter) AsNested() *MockPropertyDataType_AsNested_Call {
	return &MockPropertyDataType_AsNested_Call{Call: _e.mock.On("AsNested")}
}

func (_c *MockPropertyDataType_AsNested_Call) Run(run func()) *MockPropertyDataType_AsNested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPropertyDataType_AsNested_Call) Return(_a0 DataType) *MockPropertyDataType_AsNested_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyDataType_AsNested_Call) RunAndReturn(run func() DataType) *MockPropertyDataType_AsNested_Call {
	_c.Call.Return(run)
	return _c
}

// AsPrimitive provides a mock function with given fields:
func (_m *MockPropertyDataType) AsPrimitive() DataType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AsPrimitive")
	}

	var r0 DataType
	if rf, ok := ret.Get(0).(func() DataType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(DataType)
	}

	return r0
}

// MockPropertyDataType_AsPrimitive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsPrimitive'
type MockPropertyDataType_AsPrimitive_Call struct {
	*mock.Call
}

// AsPrimitive is a helper method to define mock.On call
func (_e *MockPropertyDataType_Expecter) AsPrimitive() *MockPropertyDataType_AsPrimitive_Call {
	return &MockPropertyDataType_AsPrimitive_Call{Call: _e.mock.On("AsPrimitive")}
}

func (_c *MockPropertyDataType_AsPrimitive_Call) Run(run func()) *MockPropertyDataType_AsPrimitive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPropertyDataType_AsPrimitive_Call) Return(_a0 DataType) *MockPropertyDataType_AsPrimitive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyDataType_AsPrimitive_Call) RunAndReturn(run func() DataType) *MockPropertyDataType_AsPrimitive_Call {
	_c.Call.Return(run)
	return _c
}

// Classes provides a mock function with given fields:
func (_m *MockPropertyDataType) Classes() []ClassName {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Classes")
	}

	var r0 []ClassName
	if rf, ok := ret.Get(0).(func() []ClassName); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ClassName)
		}
	}

	return r0
}

// MockPropertyDataType_Classes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Classes'
type MockPropertyDataType_Classes_Call struct {
	*mock.Call
}

// Classes is a helper method to define mock.On call
func (_e *MockPropertyDataType_Expecter) Classes() *MockPropertyDataType_Classes_Call {
	return &MockPropertyDataType_Classes_Call{Call: _e.mock.On("Classes")}
}

func (_c *MockPropertyDataType_Classes_Call) Run(run func()) *MockPropertyDataType_Classes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPropertyDataType_Classes_Call) Return(_a0 []ClassName) *MockPropertyDataType_Classes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyDataType_Classes_Call) RunAndReturn(run func() []ClassName) *MockPropertyDataType_Classes_Call {
	_c.Call.Return(run)
	return _c
}

// ContainsClass provides a mock function with given fields: name
func (_m *MockPropertyDataType) ContainsClass(name ClassName) bool {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ContainsClass")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(ClassName) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPropertyDataType_ContainsClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainsClass'
type MockPropertyDataType_ContainsClass_Call struct {
	*mock.Call
}

// ContainsClass is a helper method to define mock.On call
//   - name ClassName
func (_e *MockPropertyDataType_Expecter) ContainsClass(name interface{}) *MockPropertyDataType_ContainsClass_Call {
	return &MockPropertyDataType_ContainsClass_Call{Call: _e.mock.On("ContainsClass", name)}
}

func (_c *MockPropertyDataType_ContainsClass_Call) Run(run func(name ClassName)) *MockPropertyDataType_ContainsClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ClassName))
	})
	return _c
}

func (_c *MockPropertyDataType_ContainsClass_Call) Return(_a0 bool) *MockPropertyDataType_ContainsClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyDataType_ContainsClass_Call) RunAndReturn(run func(ClassName) bool) *MockPropertyDataType_ContainsClass_Call {
	_c.Call.Return(run)
	return _c
}

// IsNested provides a mock function with given fields:
func (_m *MockPropertyDataType) IsNested() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNested")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPropertyDataType_IsNested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNested'
type MockPropertyDataType_IsNested_Call struct {
	*mock.Call
}

// IsNested is a helper method to define mock.On call
func (_e *MockPropertyDataType_Expecter) IsNested() *MockPropertyDataType_IsNested_Call {
	return &MockPropertyDataType_IsNested_Call{Call: _e.mock.On("IsNested")}
}

func (_c *MockPropertyDataType_IsNested_Call) Run(run func()) *MockPropertyDataType_IsNested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPropertyDataType_IsNested_Call) Return(_a0 bool) *MockPropertyDataType_IsNested_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyDataType_IsNested_Call) RunAndReturn(run func() bool) *MockPropertyDataType_IsNested_Call {
	_c.Call.Return(run)
	return _c
}

// IsPrimitive provides a mock function with given fields:
func (_m *MockPropertyDataType) IsPrimitive() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPrimitive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPropertyDataType_IsPrimitive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPrimitive'
type MockPropertyDataType_IsPrimitive_Call struct {
	*mock.Call
}

// IsPrimitive is a helper method to define mock.On call
func (_e *MockPropertyDataType_Expecter) IsPrimitive() *MockPropertyDataType_IsPrimitive_Call {
	return &MockPropertyDataType_IsPrimitive_Call{Call: _e.mock.On("IsPrimitive")}
}

func (_c *MockPropertyDataType_IsPrimitive_Call) Run(run func()) *MockPropertyDataType_IsPrimitive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPropertyDataType_IsPrimitive_Call) Return(_a0 bool) *MockPropertyDataType_IsPrimitive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyDataType_IsPrimitive_Call) RunAndReturn(run func() bool) *MockPropertyDataType_IsPrimitive_Call {
	_c.Call.Return(run)
	return _c
}

// IsReference provides a mock function with given fields:
func (_m *MockPropertyDataType) IsReference() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsReference")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPropertyDataType_IsReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsReference'
type MockPropertyDataType_IsReference_Call struct {
	*mock.Call
}

// IsReference is a helper method to define mock.On call
func (_e *MockPropertyDataType_Expecter) IsReference() *MockPropertyDataType_IsReference_Call {
	return &MockPropertyDataType_IsReference_Call{Call: _e.mock.On("IsReference")}
}

func (_c *MockPropertyDataType_IsReference_Call) Run(run func()) *MockPropertyDataType_IsReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPropertyDataType_IsReference_Call) Return(_a0 bool) *MockPropertyDataType_IsReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyDataType_IsReference_Call) RunAndReturn(run func() bool) *MockPropertyDataType_IsReference_Call {
	_c.Call.Return(run)
	return _c
}

// Kind provides a mock function with given fields:
func (_m *MockPropertyDataType) Kind() PropertyKind {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Kind")
	}

	var r0 PropertyKind
	if rf, ok := ret.Get(0).(func() PropertyKind); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(PropertyKind)
	}

	return r0
}

// MockPropertyDataType_Kind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kind'
type MockPropertyDataType_Kind_Call struct {
	*mock.Call
}

// Kind is a helper method to define mock.On call
func (_e *MockPropertyDataType_Expecter) Kind() *MockPropertyDataType_Kind_Call {
	return &MockPropertyDataType_Kind_Call{Call: _e.mock.On("Kind")}
}

func (_c *MockPropertyDataType_Kind_Call) Run(run func()) *MockPropertyDataType_Kind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPropertyDataType_Kind_Call) Return(_a0 PropertyKind) *MockPropertyDataType_Kind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyDataType_Kind_Call) RunAndReturn(run func() PropertyKind) *MockPropertyDataType_Kind_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPropertyDataType creates a new instance of MockPropertyDataType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPropertyDataType(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPropertyDataType {
	mock := &MockPropertyDataType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
