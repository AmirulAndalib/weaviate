//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package cyclemanager

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCycleCallbackCtrl is an autogenerated mock type for the CycleCallbackCtrl type
type MockCycleCallbackCtrl struct {
	mock.Mock
}

type MockCycleCallbackCtrl_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCycleCallbackCtrl) EXPECT() *MockCycleCallbackCtrl_Expecter {
	return &MockCycleCallbackCtrl_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields:
func (_m *MockCycleCallbackCtrl) Activate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCycleCallbackCtrl_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type MockCycleCallbackCtrl_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
func (_e *MockCycleCallbackCtrl_Expecter) Activate() *MockCycleCallbackCtrl_Activate_Call {
	return &MockCycleCallbackCtrl_Activate_Call{Call: _e.mock.On("Activate")}
}

func (_c *MockCycleCallbackCtrl_Activate_Call) Run(run func()) *MockCycleCallbackCtrl_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCycleCallbackCtrl_Activate_Call) Return(_a0 error) *MockCycleCallbackCtrl_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCycleCallbackCtrl_Activate_Call) RunAndReturn(run func() error) *MockCycleCallbackCtrl_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// Deactivate provides a mock function with given fields: ctx
func (_m *MockCycleCallbackCtrl) Deactivate(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Deactivate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCycleCallbackCtrl_Deactivate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deactivate'
type MockCycleCallbackCtrl_Deactivate_Call struct {
	*mock.Call
}

// Deactivate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCycleCallbackCtrl_Expecter) Deactivate(ctx interface{}) *MockCycleCallbackCtrl_Deactivate_Call {
	return &MockCycleCallbackCtrl_Deactivate_Call{Call: _e.mock.On("Deactivate", ctx)}
}

func (_c *MockCycleCallbackCtrl_Deactivate_Call) Run(run func(ctx context.Context)) *MockCycleCallbackCtrl_Deactivate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCycleCallbackCtrl_Deactivate_Call) Return(_a0 error) *MockCycleCallbackCtrl_Deactivate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCycleCallbackCtrl_Deactivate_Call) RunAndReturn(run func(context.Context) error) *MockCycleCallbackCtrl_Deactivate_Call {
	_c.Call.Return(run)
	return _c
}

// IsActive provides a mock function with given fields:
func (_m *MockCycleCallbackCtrl) IsActive() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsActive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCycleCallbackCtrl_IsActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsActive'
type MockCycleCallbackCtrl_IsActive_Call struct {
	*mock.Call
}

// IsActive is a helper method to define mock.On call
func (_e *MockCycleCallbackCtrl_Expecter) IsActive() *MockCycleCallbackCtrl_IsActive_Call {
	return &MockCycleCallbackCtrl_IsActive_Call{Call: _e.mock.On("IsActive")}
}

func (_c *MockCycleCallbackCtrl_IsActive_Call) Run(run func()) *MockCycleCallbackCtrl_IsActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCycleCallbackCtrl_IsActive_Call) Return(_a0 bool) *MockCycleCallbackCtrl_IsActive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCycleCallbackCtrl_IsActive_Call) RunAndReturn(run func() bool) *MockCycleCallbackCtrl_IsActive_Call {
	_c.Call.Return(run)
	return _c
}

// Unregister provides a mock function with given fields: ctx
func (_m *MockCycleCallbackCtrl) Unregister(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Unregister")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCycleCallbackCtrl_Unregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unregister'
type MockCycleCallbackCtrl_Unregister_Call struct {
	*mock.Call
}

// Unregister is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCycleCallbackCtrl_Expecter) Unregister(ctx interface{}) *MockCycleCallbackCtrl_Unregister_Call {
	return &MockCycleCallbackCtrl_Unregister_Call{Call: _e.mock.On("Unregister", ctx)}
}

func (_c *MockCycleCallbackCtrl_Unregister_Call) Run(run func(ctx context.Context)) *MockCycleCallbackCtrl_Unregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCycleCallbackCtrl_Unregister_Call) Return(_a0 error) *MockCycleCallbackCtrl_Unregister_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCycleCallbackCtrl_Unregister_Call) RunAndReturn(run func(context.Context) error) *MockCycleCallbackCtrl_Unregister_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCycleCallbackCtrl creates a new instance of MockCycleCallbackCtrl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCycleCallbackCtrl(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCycleCallbackCtrl {
	mock := &MockCycleCallbackCtrl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
