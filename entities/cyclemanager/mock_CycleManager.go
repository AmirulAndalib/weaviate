//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package cyclemanager

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCycleManager is an autogenerated mock type for the CycleManager type
type MockCycleManager struct {
	mock.Mock
}

type MockCycleManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCycleManager) EXPECT() *MockCycleManager_Expecter {
	return &MockCycleManager_Expecter{mock: &_m.Mock}
}

// Running provides a mock function with given fields:
func (_m *MockCycleManager) Running() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Running")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCycleManager_Running_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Running'
type MockCycleManager_Running_Call struct {
	*mock.Call
}

// Running is a helper method to define mock.On call
func (_e *MockCycleManager_Expecter) Running() *MockCycleManager_Running_Call {
	return &MockCycleManager_Running_Call{Call: _e.mock.On("Running")}
}

func (_c *MockCycleManager_Running_Call) Run(run func()) *MockCycleManager_Running_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCycleManager_Running_Call) Return(_a0 bool) *MockCycleManager_Running_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCycleManager_Running_Call) RunAndReturn(run func() bool) *MockCycleManager_Running_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *MockCycleManager) Start() {
	_m.Called()
}

// MockCycleManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCycleManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockCycleManager_Expecter) Start() *MockCycleManager_Start_Call {
	return &MockCycleManager_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockCycleManager_Start_Call) Run(run func()) *MockCycleManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCycleManager_Start_Call) Return() *MockCycleManager_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCycleManager_Start_Call) RunAndReturn(run func()) *MockCycleManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *MockCycleManager) Stop(ctx context.Context) chan bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 chan bool
	if rf, ok := ret.Get(0).(func(context.Context) chan bool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	return r0
}

// MockCycleManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockCycleManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCycleManager_Expecter) Stop(ctx interface{}) *MockCycleManager_Stop_Call {
	return &MockCycleManager_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockCycleManager_Stop_Call) Run(run func(ctx context.Context)) *MockCycleManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCycleManager_Stop_Call) Return(_a0 chan bool) *MockCycleManager_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCycleManager_Stop_Call) RunAndReturn(run func(context.Context) chan bool) *MockCycleManager_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// StopAndWait provides a mock function with given fields: ctx
func (_m *MockCycleManager) StopAndWait(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StopAndWait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCycleManager_StopAndWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopAndWait'
type MockCycleManager_StopAndWait_Call struct {
	*mock.Call
}

// StopAndWait is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCycleManager_Expecter) StopAndWait(ctx interface{}) *MockCycleManager_StopAndWait_Call {
	return &MockCycleManager_StopAndWait_Call{Call: _e.mock.On("StopAndWait", ctx)}
}

func (_c *MockCycleManager_StopAndWait_Call) Run(run func(ctx context.Context)) *MockCycleManager_StopAndWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCycleManager_StopAndWait_Call) Return(_a0 error) *MockCycleManager_StopAndWait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCycleManager_StopAndWait_Call) RunAndReturn(run func(context.Context) error) *MockCycleManager_StopAndWait_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCycleManager creates a new instance of MockCycleManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCycleManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCycleManager {
	mock := &MockCycleManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
