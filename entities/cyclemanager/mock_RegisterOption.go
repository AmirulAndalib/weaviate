//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package cyclemanager

import mock "github.com/stretchr/testify/mock"

// MockRegisterOption is an autogenerated mock type for the RegisterOption type
type MockRegisterOption struct {
	mock.Mock
}

type MockRegisterOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterOption) EXPECT() *MockRegisterOption_Expecter {
	return &MockRegisterOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: meta
func (_m *MockRegisterOption) Execute(meta *cycleCallbackMeta) {
	_m.Called(meta)
}

// MockRegisterOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockRegisterOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - meta *cycleCallbackMeta
func (_e *MockRegisterOption_Expecter) Execute(meta interface{}) *MockRegisterOption_Execute_Call {
	return &MockRegisterOption_Execute_Call{Call: _e.mock.On("Execute", meta)}
}

func (_c *MockRegisterOption_Execute_Call) Run(run func(meta *cycleCallbackMeta)) *MockRegisterOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cycleCallbackMeta))
	})
	return _c
}

func (_c *MockRegisterOption_Execute_Call) Return() *MockRegisterOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRegisterOption_Execute_Call) RunAndReturn(run func(*cycleCallbackMeta)) *MockRegisterOption_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegisterOption creates a new instance of MockRegisterOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterOption {
	mock := &MockRegisterOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
