//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package cyclemanager

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCycleTicker is an autogenerated mock type for the CycleTicker type
type MockCycleTicker struct {
	mock.Mock
}

type MockCycleTicker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCycleTicker) EXPECT() *MockCycleTicker_Expecter {
	return &MockCycleTicker_Expecter{mock: &_m.Mock}
}

// C provides a mock function with given fields:
func (_m *MockCycleTicker) C() <-chan time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for C")
	}

	var r0 <-chan time.Time
	if rf, ok := ret.Get(0).(func() <-chan time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan time.Time)
		}
	}

	return r0
}

// MockCycleTicker_C_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'C'
type MockCycleTicker_C_Call struct {
	*mock.Call
}

// C is a helper method to define mock.On call
func (_e *MockCycleTicker_Expecter) C() *MockCycleTicker_C_Call {
	return &MockCycleTicker_C_Call{Call: _e.mock.On("C")}
}

func (_c *MockCycleTicker_C_Call) Run(run func()) *MockCycleTicker_C_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCycleTicker_C_Call) Return(_a0 <-chan time.Time) *MockCycleTicker_C_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCycleTicker_C_Call) RunAndReturn(run func() <-chan time.Time) *MockCycleTicker_C_Call {
	_c.Call.Return(run)
	return _c
}

// CycleExecuted provides a mock function with given fields: executed
func (_m *MockCycleTicker) CycleExecuted(executed bool) {
	_m.Called(executed)
}

// MockCycleTicker_CycleExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CycleExecuted'
type MockCycleTicker_CycleExecuted_Call struct {
	*mock.Call
}

// CycleExecuted is a helper method to define mock.On call
//   - executed bool
func (_e *MockCycleTicker_Expecter) CycleExecuted(executed interface{}) *MockCycleTicker_CycleExecuted_Call {
	return &MockCycleTicker_CycleExecuted_Call{Call: _e.mock.On("CycleExecuted", executed)}
}

func (_c *MockCycleTicker_CycleExecuted_Call) Run(run func(executed bool)) *MockCycleTicker_CycleExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockCycleTicker_CycleExecuted_Call) Return() *MockCycleTicker_CycleExecuted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCycleTicker_CycleExecuted_Call) RunAndReturn(run func(bool)) *MockCycleTicker_CycleExecuted_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *MockCycleTicker) Start() {
	_m.Called()
}

// MockCycleTicker_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCycleTicker_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockCycleTicker_Expecter) Start() *MockCycleTicker_Start_Call {
	return &MockCycleTicker_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockCycleTicker_Start_Call) Run(run func()) *MockCycleTicker_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCycleTicker_Start_Call) Return() *MockCycleTicker_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCycleTicker_Start_Call) RunAndReturn(run func()) *MockCycleTicker_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *MockCycleTicker) Stop() {
	_m.Called()
}

// MockCycleTicker_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockCycleTicker_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockCycleTicker_Expecter) Stop() *MockCycleTicker_Stop_Call {
	return &MockCycleTicker_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockCycleTicker_Stop_Call) Run(run func()) *MockCycleTicker_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCycleTicker_Stop_Call) Return() *MockCycleTicker_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCycleTicker_Stop_Call) RunAndReturn(run func()) *MockCycleTicker_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCycleTicker creates a new instance of MockCycleTicker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCycleTicker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCycleTicker {
	mock := &MockCycleTicker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
