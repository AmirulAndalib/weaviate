//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package cyclemanager

import mock "github.com/stretchr/testify/mock"

// MockCycleCallbackGroup is an autogenerated mock type for the CycleCallbackGroup type
type MockCycleCallbackGroup struct {
	mock.Mock
}

type MockCycleCallbackGroup_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCycleCallbackGroup) EXPECT() *MockCycleCallbackGroup_Expecter {
	return &MockCycleCallbackGroup_Expecter{mock: &_m.Mock}
}

// CycleCallback provides a mock function with given fields: shouldAbort
func (_m *MockCycleCallbackGroup) CycleCallback(shouldAbort ShouldAbortCallback) bool {
	ret := _m.Called(shouldAbort)

	if len(ret) == 0 {
		panic("no return value specified for CycleCallback")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(ShouldAbortCallback) bool); ok {
		r0 = rf(shouldAbort)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCycleCallbackGroup_CycleCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CycleCallback'
type MockCycleCallbackGroup_CycleCallback_Call struct {
	*mock.Call
}

// CycleCallback is a helper method to define mock.On call
//   - shouldAbort ShouldAbortCallback
func (_e *MockCycleCallbackGroup_Expecter) CycleCallback(shouldAbort interface{}) *MockCycleCallbackGroup_CycleCallback_Call {
	return &MockCycleCallbackGroup_CycleCallback_Call{Call: _e.mock.On("CycleCallback", shouldAbort)}
}

func (_c *MockCycleCallbackGroup_CycleCallback_Call) Run(run func(shouldAbort ShouldAbortCallback)) *MockCycleCallbackGroup_CycleCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ShouldAbortCallback))
	})
	return _c
}

func (_c *MockCycleCallbackGroup_CycleCallback_Call) Return(_a0 bool) *MockCycleCallbackGroup_CycleCallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCycleCallbackGroup_CycleCallback_Call) RunAndReturn(run func(ShouldAbortCallback) bool) *MockCycleCallbackGroup_CycleCallback_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: id, cycleCallback, options
func (_m *MockCycleCallbackGroup) Register(id string, cycleCallback CycleCallback, options ...RegisterOption) CycleCallbackCtrl {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, cycleCallback)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 CycleCallbackCtrl
	if rf, ok := ret.Get(0).(func(string, CycleCallback, ...RegisterOption) CycleCallbackCtrl); ok {
		r0 = rf(id, cycleCallback, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CycleCallbackCtrl)
		}
	}

	return r0
}

// MockCycleCallbackGroup_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockCycleCallbackGroup_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - id string
//   - cycleCallback CycleCallback
//   - options ...RegisterOption
func (_e *MockCycleCallbackGroup_Expecter) Register(id interface{}, cycleCallback interface{}, options ...interface{}) *MockCycleCallbackGroup_Register_Call {
	return &MockCycleCallbackGroup_Register_Call{Call: _e.mock.On("Register",
		append([]interface{}{id, cycleCallback}, options...)...)}
}

func (_c *MockCycleCallbackGroup_Register_Call) Run(run func(id string, cycleCallback CycleCallback, options ...RegisterOption)) *MockCycleCallbackGroup_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RegisterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(RegisterOption)
			}
		}
		run(args[0].(string), args[1].(CycleCallback), variadicArgs...)
	})
	return _c
}

func (_c *MockCycleCallbackGroup_Register_Call) Return(_a0 CycleCallbackCtrl) *MockCycleCallbackGroup_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCycleCallbackGroup_Register_Call) RunAndReturn(run func(string, CycleCallback, ...RegisterOption) CycleCallbackCtrl) *MockCycleCallbackGroup_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCycleCallbackGroup creates a new instance of MockCycleCallbackGroup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCycleCallbackGroup(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCycleCallbackGroup {
	mock := &MockCycleCallbackGroup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
