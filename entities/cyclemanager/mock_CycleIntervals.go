//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package cyclemanager

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCycleIntervals is an autogenerated mock type for the CycleIntervals type
type MockCycleIntervals struct {
	mock.Mock
}

type MockCycleIntervals_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCycleIntervals) EXPECT() *MockCycleIntervals_Expecter {
	return &MockCycleIntervals_Expecter{mock: &_m.Mock}
}

// Advance provides a mock function with given fields:
func (_m *MockCycleIntervals) Advance() {
	_m.Called()
}

// MockCycleIntervals_Advance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Advance'
type MockCycleIntervals_Advance_Call struct {
	*mock.Call
}

// Advance is a helper method to define mock.On call
func (_e *MockCycleIntervals_Expecter) Advance() *MockCycleIntervals_Advance_Call {
	return &MockCycleIntervals_Advance_Call{Call: _e.mock.On("Advance")}
}

func (_c *MockCycleIntervals_Advance_Call) Run(run func()) *MockCycleIntervals_Advance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCycleIntervals_Advance_Call) Return() *MockCycleIntervals_Advance_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCycleIntervals_Advance_Call) RunAndReturn(run func()) *MockCycleIntervals_Advance_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields:
func (_m *MockCycleIntervals) Get() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockCycleIntervals_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCycleIntervals_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockCycleIntervals_Expecter) Get() *MockCycleIntervals_Get_Call {
	return &MockCycleIntervals_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockCycleIntervals_Get_Call) Run(run func()) *MockCycleIntervals_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCycleIntervals_Get_Call) Return(_a0 time.Duration) *MockCycleIntervals_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCycleIntervals_Get_Call) RunAndReturn(run func() time.Duration) *MockCycleIntervals_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *MockCycleIntervals) Reset() {
	_m.Called()
}

// MockCycleIntervals_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockCycleIntervals_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockCycleIntervals_Expecter) Reset() *MockCycleIntervals_Reset_Call {
	return &MockCycleIntervals_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockCycleIntervals_Reset_Call) Run(run func()) *MockCycleIntervals_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCycleIntervals_Reset_Call) Return() *MockCycleIntervals_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCycleIntervals_Reset_Call) RunAndReturn(run func()) *MockCycleIntervals_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCycleIntervals creates a new instance of MockCycleIntervals. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCycleIntervals(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCycleIntervals {
	mock := &MockCycleIntervals{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
