//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package spellcheck

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ent "github.com/weaviate/weaviate/modules/text-spellcheck/ent"
)

// MockspellCheckClient is an autogenerated mock type for the spellCheckClient type
type MockspellCheckClient struct {
	mock.Mock
}

type MockspellCheckClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockspellCheckClient) EXPECT() *MockspellCheckClient_Expecter {
	return &MockspellCheckClient_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx, text
func (_m *MockspellCheckClient) Check(ctx context.Context, text []string) (*ent.SpellCheckResult, error) {
	ret := _m.Called(ctx, text)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *ent.SpellCheckResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (*ent.SpellCheckResult, error)); ok {
		return rf(ctx, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) *ent.SpellCheckResult); ok {
		r0 = rf(ctx, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.SpellCheckResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockspellCheckClient_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockspellCheckClient_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - text []string
func (_e *MockspellCheckClient_Expecter) Check(ctx interface{}, text interface{}) *MockspellCheckClient_Check_Call {
	return &MockspellCheckClient_Check_Call{Call: _e.mock.On("Check", ctx, text)}
}

func (_c *MockspellCheckClient_Check_Call) Run(run func(ctx context.Context, text []string)) *MockspellCheckClient_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockspellCheckClient_Check_Call) Return(_a0 *ent.SpellCheckResult, _a1 error) *MockspellCheckClient_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockspellCheckClient_Check_Call) RunAndReturn(run func(context.Context, []string) (*ent.SpellCheckResult, error)) *MockspellCheckClient_Check_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockspellCheckClient creates a new instance of MockspellCheckClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockspellCheckClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockspellCheckClient {
	mock := &MockspellCheckClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
