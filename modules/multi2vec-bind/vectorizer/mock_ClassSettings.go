//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package vectorizer

import mock "github.com/stretchr/testify/mock"

// MockClassSettings is an autogenerated mock type for the ClassSettings type
type MockClassSettings struct {
	mock.Mock
}

type MockClassSettings_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClassSettings) EXPECT() *MockClassSettings_Expecter {
	return &MockClassSettings_Expecter{mock: &_m.Mock}
}

// AudioField provides a mock function with given fields: property
func (_m *MockClassSettings) AudioField(property string) bool {
	ret := _m.Called(property)

	if len(ret) == 0 {
		panic("no return value specified for AudioField")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(property)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassSettings_AudioField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AudioField'
type MockClassSettings_AudioField_Call struct {
	*mock.Call
}

// AudioField is a helper method to define mock.On call
//   - property string
func (_e *MockClassSettings_Expecter) AudioField(property interface{}) *MockClassSettings_AudioField_Call {
	return &MockClassSettings_AudioField_Call{Call: _e.mock.On("AudioField", property)}
}

func (_c *MockClassSettings_AudioField_Call) Run(run func(property string)) *MockClassSettings_AudioField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassSettings_AudioField_Call) Return(_a0 bool) *MockClassSettings_AudioField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_AudioField_Call) RunAndReturn(run func(string) bool) *MockClassSettings_AudioField_Call {
	_c.Call.Return(run)
	return _c
}

// AudioFieldsWeights provides a mock function with given fields:
func (_m *MockClassSettings) AudioFieldsWeights() ([]float32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AudioFieldsWeights")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []float32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClassSettings_AudioFieldsWeights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AudioFieldsWeights'
type MockClassSettings_AudioFieldsWeights_Call struct {
	*mock.Call
}

// AudioFieldsWeights is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) AudioFieldsWeights() *MockClassSettings_AudioFieldsWeights_Call {
	return &MockClassSettings_AudioFieldsWeights_Call{Call: _e.mock.On("AudioFieldsWeights")}
}

func (_c *MockClassSettings_AudioFieldsWeights_Call) Run(run func()) *MockClassSettings_AudioFieldsWeights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_AudioFieldsWeights_Call) Return(_a0 []float32, _a1 error) *MockClassSettings_AudioFieldsWeights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClassSettings_AudioFieldsWeights_Call) RunAndReturn(run func() ([]float32, error)) *MockClassSettings_AudioFieldsWeights_Call {
	_c.Call.Return(run)
	return _c
}

// DepthField provides a mock function with given fields: property
func (_m *MockClassSettings) DepthField(property string) bool {
	ret := _m.Called(property)

	if len(ret) == 0 {
		panic("no return value specified for DepthField")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(property)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassSettings_DepthField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DepthField'
type MockClassSettings_DepthField_Call struct {
	*mock.Call
}

// DepthField is a helper method to define mock.On call
//   - property string
func (_e *MockClassSettings_Expecter) DepthField(property interface{}) *MockClassSettings_DepthField_Call {
	return &MockClassSettings_DepthField_Call{Call: _e.mock.On("DepthField", property)}
}

func (_c *MockClassSettings_DepthField_Call) Run(run func(property string)) *MockClassSettings_DepthField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassSettings_DepthField_Call) Return(_a0 bool) *MockClassSettings_DepthField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_DepthField_Call) RunAndReturn(run func(string) bool) *MockClassSettings_DepthField_Call {
	_c.Call.Return(run)
	return _c
}

// DepthFieldsWeights provides a mock function with given fields:
func (_m *MockClassSettings) DepthFieldsWeights() ([]float32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DepthFieldsWeights")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []float32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClassSettings_DepthFieldsWeights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DepthFieldsWeights'
type MockClassSettings_DepthFieldsWeights_Call struct {
	*mock.Call
}

// DepthFieldsWeights is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) DepthFieldsWeights() *MockClassSettings_DepthFieldsWeights_Call {
	return &MockClassSettings_DepthFieldsWeights_Call{Call: _e.mock.On("DepthFieldsWeights")}
}

func (_c *MockClassSettings_DepthFieldsWeights_Call) Run(run func()) *MockClassSettings_DepthFieldsWeights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_DepthFieldsWeights_Call) Return(_a0 []float32, _a1 error) *MockClassSettings_DepthFieldsWeights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClassSettings_DepthFieldsWeights_Call) RunAndReturn(run func() ([]float32, error)) *MockClassSettings_DepthFieldsWeights_Call {
	_c.Call.Return(run)
	return _c
}

// IMUField provides a mock function with given fields: property
func (_m *MockClassSettings) IMUField(property string) bool {
	ret := _m.Called(property)

	if len(ret) == 0 {
		panic("no return value specified for IMUField")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(property)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassSettings_IMUField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IMUField'
type MockClassSettings_IMUField_Call struct {
	*mock.Call
}

// IMUField is a helper method to define mock.On call
//   - property string
func (_e *MockClassSettings_Expecter) IMUField(property interface{}) *MockClassSettings_IMUField_Call {
	return &MockClassSettings_IMUField_Call{Call: _e.mock.On("IMUField", property)}
}

func (_c *MockClassSettings_IMUField_Call) Run(run func(property string)) *MockClassSettings_IMUField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassSettings_IMUField_Call) Return(_a0 bool) *MockClassSettings_IMUField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_IMUField_Call) RunAndReturn(run func(string) bool) *MockClassSettings_IMUField_Call {
	_c.Call.Return(run)
	return _c
}

// IMUFieldsWeights provides a mock function with given fields:
func (_m *MockClassSettings) IMUFieldsWeights() ([]float32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IMUFieldsWeights")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []float32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClassSettings_IMUFieldsWeights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IMUFieldsWeights'
type MockClassSettings_IMUFieldsWeights_Call struct {
	*mock.Call
}

// IMUFieldsWeights is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) IMUFieldsWeights() *MockClassSettings_IMUFieldsWeights_Call {
	return &MockClassSettings_IMUFieldsWeights_Call{Call: _e.mock.On("IMUFieldsWeights")}
}

func (_c *MockClassSettings_IMUFieldsWeights_Call) Run(run func()) *MockClassSettings_IMUFieldsWeights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_IMUFieldsWeights_Call) Return(_a0 []float32, _a1 error) *MockClassSettings_IMUFieldsWeights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClassSettings_IMUFieldsWeights_Call) RunAndReturn(run func() ([]float32, error)) *MockClassSettings_IMUFieldsWeights_Call {
	_c.Call.Return(run)
	return _c
}

// ImageField provides a mock function with given fields: property
func (_m *MockClassSettings) ImageField(property string) bool {
	ret := _m.Called(property)

	if len(ret) == 0 {
		panic("no return value specified for ImageField")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(property)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassSettings_ImageField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageField'
type MockClassSettings_ImageField_Call struct {
	*mock.Call
}

// ImageField is a helper method to define mock.On call
//   - property string
func (_e *MockClassSettings_Expecter) ImageField(property interface{}) *MockClassSettings_ImageField_Call {
	return &MockClassSettings_ImageField_Call{Call: _e.mock.On("ImageField", property)}
}

func (_c *MockClassSettings_ImageField_Call) Run(run func(property string)) *MockClassSettings_ImageField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassSettings_ImageField_Call) Return(_a0 bool) *MockClassSettings_ImageField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_ImageField_Call) RunAndReturn(run func(string) bool) *MockClassSettings_ImageField_Call {
	_c.Call.Return(run)
	return _c
}

// ImageFieldsWeights provides a mock function with given fields:
func (_m *MockClassSettings) ImageFieldsWeights() ([]float32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ImageFieldsWeights")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []float32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClassSettings_ImageFieldsWeights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageFieldsWeights'
type MockClassSettings_ImageFieldsWeights_Call struct {
	*mock.Call
}

// ImageFieldsWeights is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) ImageFieldsWeights() *MockClassSettings_ImageFieldsWeights_Call {
	return &MockClassSettings_ImageFieldsWeights_Call{Call: _e.mock.On("ImageFieldsWeights")}
}

func (_c *MockClassSettings_ImageFieldsWeights_Call) Run(run func()) *MockClassSettings_ImageFieldsWeights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_ImageFieldsWeights_Call) Return(_a0 []float32, _a1 error) *MockClassSettings_ImageFieldsWeights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClassSettings_ImageFieldsWeights_Call) RunAndReturn(run func() ([]float32, error)) *MockClassSettings_ImageFieldsWeights_Call {
	_c.Call.Return(run)
	return _c
}

// TextField provides a mock function with given fields: property
func (_m *MockClassSettings) TextField(property string) bool {
	ret := _m.Called(property)

	if len(ret) == 0 {
		panic("no return value specified for TextField")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(property)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassSettings_TextField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TextField'
type MockClassSettings_TextField_Call struct {
	*mock.Call
}

// TextField is a helper method to define mock.On call
//   - property string
func (_e *MockClassSettings_Expecter) TextField(property interface{}) *MockClassSettings_TextField_Call {
	return &MockClassSettings_TextField_Call{Call: _e.mock.On("TextField", property)}
}

func (_c *MockClassSettings_TextField_Call) Run(run func(property string)) *MockClassSettings_TextField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassSettings_TextField_Call) Return(_a0 bool) *MockClassSettings_TextField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_TextField_Call) RunAndReturn(run func(string) bool) *MockClassSettings_TextField_Call {
	_c.Call.Return(run)
	return _c
}

// TextFieldsWeights provides a mock function with given fields:
func (_m *MockClassSettings) TextFieldsWeights() ([]float32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TextFieldsWeights")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []float32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClassSettings_TextFieldsWeights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TextFieldsWeights'
type MockClassSettings_TextFieldsWeights_Call struct {
	*mock.Call
}

// TextFieldsWeights is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) TextFieldsWeights() *MockClassSettings_TextFieldsWeights_Call {
	return &MockClassSettings_TextFieldsWeights_Call{Call: _e.mock.On("TextFieldsWeights")}
}

func (_c *MockClassSettings_TextFieldsWeights_Call) Run(run func()) *MockClassSettings_TextFieldsWeights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_TextFieldsWeights_Call) Return(_a0 []float32, _a1 error) *MockClassSettings_TextFieldsWeights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClassSettings_TextFieldsWeights_Call) RunAndReturn(run func() ([]float32, error)) *MockClassSettings_TextFieldsWeights_Call {
	_c.Call.Return(run)
	return _c
}

// ThermalField provides a mock function with given fields: property
func (_m *MockClassSettings) ThermalField(property string) bool {
	ret := _m.Called(property)

	if len(ret) == 0 {
		panic("no return value specified for ThermalField")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(property)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassSettings_ThermalField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ThermalField'
type MockClassSettings_ThermalField_Call struct {
	*mock.Call
}

// ThermalField is a helper method to define mock.On call
//   - property string
func (_e *MockClassSettings_Expecter) ThermalField(property interface{}) *MockClassSettings_ThermalField_Call {
	return &MockClassSettings_ThermalField_Call{Call: _e.mock.On("ThermalField", property)}
}

func (_c *MockClassSettings_ThermalField_Call) Run(run func(property string)) *MockClassSettings_ThermalField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassSettings_ThermalField_Call) Return(_a0 bool) *MockClassSettings_ThermalField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_ThermalField_Call) RunAndReturn(run func(string) bool) *MockClassSettings_ThermalField_Call {
	_c.Call.Return(run)
	return _c
}

// ThermalFieldsWeights provides a mock function with given fields:
func (_m *MockClassSettings) ThermalFieldsWeights() ([]float32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ThermalFieldsWeights")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []float32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClassSettings_ThermalFieldsWeights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ThermalFieldsWeights'
type MockClassSettings_ThermalFieldsWeights_Call struct {
	*mock.Call
}

// ThermalFieldsWeights is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) ThermalFieldsWeights() *MockClassSettings_ThermalFieldsWeights_Call {
	return &MockClassSettings_ThermalFieldsWeights_Call{Call: _e.mock.On("ThermalFieldsWeights")}
}

func (_c *MockClassSettings_ThermalFieldsWeights_Call) Run(run func()) *MockClassSettings_ThermalFieldsWeights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_ThermalFieldsWeights_Call) Return(_a0 []float32, _a1 error) *MockClassSettings_ThermalFieldsWeights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClassSettings_ThermalFieldsWeights_Call) RunAndReturn(run func() ([]float32, error)) *MockClassSettings_ThermalFieldsWeights_Call {
	_c.Call.Return(run)
	return _c
}

// VideoField provides a mock function with given fields: property
func (_m *MockClassSettings) VideoField(property string) bool {
	ret := _m.Called(property)

	if len(ret) == 0 {
		panic("no return value specified for VideoField")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(property)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassSettings_VideoField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VideoField'
type MockClassSettings_VideoField_Call struct {
	*mock.Call
}

// VideoField is a helper method to define mock.On call
//   - property string
func (_e *MockClassSettings_Expecter) VideoField(property interface{}) *MockClassSettings_VideoField_Call {
	return &MockClassSettings_VideoField_Call{Call: _e.mock.On("VideoField", property)}
}

func (_c *MockClassSettings_VideoField_Call) Run(run func(property string)) *MockClassSettings_VideoField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassSettings_VideoField_Call) Return(_a0 bool) *MockClassSettings_VideoField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_VideoField_Call) RunAndReturn(run func(string) bool) *MockClassSettings_VideoField_Call {
	_c.Call.Return(run)
	return _c
}

// VideoFieldsWeights provides a mock function with given fields:
func (_m *MockClassSettings) VideoFieldsWeights() ([]float32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VideoFieldsWeights")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []float32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClassSettings_VideoFieldsWeights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VideoFieldsWeights'
type MockClassSettings_VideoFieldsWeights_Call struct {
	*mock.Call
}

// VideoFieldsWeights is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) VideoFieldsWeights() *MockClassSettings_VideoFieldsWeights_Call {
	return &MockClassSettings_VideoFieldsWeights_Call{Call: _e.mock.On("VideoFieldsWeights")}
}

func (_c *MockClassSettings_VideoFieldsWeights_Call) Run(run func()) *MockClassSettings_VideoFieldsWeights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_VideoFieldsWeights_Call) Return(_a0 []float32, _a1 error) *MockClassSettings_VideoFieldsWeights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClassSettings_VideoFieldsWeights_Call) RunAndReturn(run func() ([]float32, error)) *MockClassSettings_VideoFieldsWeights_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClassSettings creates a new instance of MockClassSettings. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClassSettings(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClassSettings {
	mock := &MockClassSettings{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
