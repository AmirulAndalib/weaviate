//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package modbind

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"

	moduletools "github.com/weaviate/weaviate/entities/moduletools"
)

// MockbindVectorizer is an autogenerated mock type for the bindVectorizer type
type MockbindVectorizer struct {
	mock.Mock
}

type MockbindVectorizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockbindVectorizer) EXPECT() *MockbindVectorizer_Expecter {
	return &MockbindVectorizer_Expecter{mock: &_m.Mock}
}

// Object provides a mock function with given fields: ctx, object, comp, cfg
func (_m *MockbindVectorizer) Object(ctx context.Context, object *models.Object, comp moduletools.VectorizablePropsComparator, cfg moduletools.ClassConfig) ([]float32, models.AdditionalProperties, error) {
	ret := _m.Called(ctx, object, comp, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Object")
	}

	var r0 []float32
	var r1 models.AdditionalProperties
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Object, moduletools.VectorizablePropsComparator, moduletools.ClassConfig) ([]float32, models.AdditionalProperties, error)); ok {
		return rf(ctx, object, comp, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Object, moduletools.VectorizablePropsComparator, moduletools.ClassConfig) []float32); ok {
		r0 = rf(ctx, object, comp, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Object, moduletools.VectorizablePropsComparator, moduletools.ClassConfig) models.AdditionalProperties); ok {
		r1 = rf(ctx, object, comp, cfg)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(models.AdditionalProperties)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *models.Object, moduletools.VectorizablePropsComparator, moduletools.ClassConfig) error); ok {
		r2 = rf(ctx, object, comp, cfg)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockbindVectorizer_Object_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Object'
type MockbindVectorizer_Object_Call struct {
	*mock.Call
}

// Object is a helper method to define mock.On call
//   - ctx context.Context
//   - object *models.Object
//   - comp moduletools.VectorizablePropsComparator
//   - cfg moduletools.ClassConfig
func (_e *MockbindVectorizer_Expecter) Object(ctx interface{}, object interface{}, comp interface{}, cfg interface{}) *MockbindVectorizer_Object_Call {
	return &MockbindVectorizer_Object_Call{Call: _e.mock.On("Object", ctx, object, comp, cfg)}
}

func (_c *MockbindVectorizer_Object_Call) Run(run func(ctx context.Context, object *models.Object, comp moduletools.VectorizablePropsComparator, cfg moduletools.ClassConfig)) *MockbindVectorizer_Object_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Object), args[2].(moduletools.VectorizablePropsComparator), args[3].(moduletools.ClassConfig))
	})
	return _c
}

func (_c *MockbindVectorizer_Object_Call) Return(_a0 []float32, _a1 models.AdditionalProperties, _a2 error) *MockbindVectorizer_Object_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockbindVectorizer_Object_Call) RunAndReturn(run func(context.Context, *models.Object, moduletools.VectorizablePropsComparator, moduletools.ClassConfig) ([]float32, models.AdditionalProperties, error)) *MockbindVectorizer_Object_Call {
	_c.Call.Return(run)
	return _c
}

// VectorizeAudio provides a mock function with given fields: ctx, audio, cfg
func (_m *MockbindVectorizer) VectorizeAudio(ctx context.Context, audio string, cfg moduletools.ClassConfig) ([]float32, error) {
	ret := _m.Called(ctx, audio, cfg)

	if len(ret) == 0 {
		panic("no return value specified for VectorizeAudio")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, moduletools.ClassConfig) ([]float32, error)); ok {
		return rf(ctx, audio, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, moduletools.ClassConfig) []float32); ok {
		r0 = rf(ctx, audio, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, moduletools.ClassConfig) error); ok {
		r1 = rf(ctx, audio, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbindVectorizer_VectorizeAudio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorizeAudio'
type MockbindVectorizer_VectorizeAudio_Call struct {
	*mock.Call
}

// VectorizeAudio is a helper method to define mock.On call
//   - ctx context.Context
//   - audio string
//   - cfg moduletools.ClassConfig
func (_e *MockbindVectorizer_Expecter) VectorizeAudio(ctx interface{}, audio interface{}, cfg interface{}) *MockbindVectorizer_VectorizeAudio_Call {
	return &MockbindVectorizer_VectorizeAudio_Call{Call: _e.mock.On("VectorizeAudio", ctx, audio, cfg)}
}

func (_c *MockbindVectorizer_VectorizeAudio_Call) Run(run func(ctx context.Context, audio string, cfg moduletools.ClassConfig)) *MockbindVectorizer_VectorizeAudio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(moduletools.ClassConfig))
	})
	return _c
}

func (_c *MockbindVectorizer_VectorizeAudio_Call) Return(_a0 []float32, _a1 error) *MockbindVectorizer_VectorizeAudio_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbindVectorizer_VectorizeAudio_Call) RunAndReturn(run func(context.Context, string, moduletools.ClassConfig) ([]float32, error)) *MockbindVectorizer_VectorizeAudio_Call {
	_c.Call.Return(run)
	return _c
}

// VectorizeDepth provides a mock function with given fields: ctx, depth, cfg
func (_m *MockbindVectorizer) VectorizeDepth(ctx context.Context, depth string, cfg moduletools.ClassConfig) ([]float32, error) {
	ret := _m.Called(ctx, depth, cfg)

	if len(ret) == 0 {
		panic("no return value specified for VectorizeDepth")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, moduletools.ClassConfig) ([]float32, error)); ok {
		return rf(ctx, depth, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, moduletools.ClassConfig) []float32); ok {
		r0 = rf(ctx, depth, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, moduletools.ClassConfig) error); ok {
		r1 = rf(ctx, depth, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbindVectorizer_VectorizeDepth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorizeDepth'
type MockbindVectorizer_VectorizeDepth_Call struct {
	*mock.Call
}

// VectorizeDepth is a helper method to define mock.On call
//   - ctx context.Context
//   - depth string
//   - cfg moduletools.ClassConfig
func (_e *MockbindVectorizer_Expecter) VectorizeDepth(ctx interface{}, depth interface{}, cfg interface{}) *MockbindVectorizer_VectorizeDepth_Call {
	return &MockbindVectorizer_VectorizeDepth_Call{Call: _e.mock.On("VectorizeDepth", ctx, depth, cfg)}
}

func (_c *MockbindVectorizer_VectorizeDepth_Call) Run(run func(ctx context.Context, depth string, cfg moduletools.ClassConfig)) *MockbindVectorizer_VectorizeDepth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(moduletools.ClassConfig))
	})
	return _c
}

func (_c *MockbindVectorizer_VectorizeDepth_Call) Return(_a0 []float32, _a1 error) *MockbindVectorizer_VectorizeDepth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbindVectorizer_VectorizeDepth_Call) RunAndReturn(run func(context.Context, string, moduletools.ClassConfig) ([]float32, error)) *MockbindVectorizer_VectorizeDepth_Call {
	_c.Call.Return(run)
	return _c
}

// VectorizeIMU provides a mock function with given fields: ctx, imu, cfg
func (_m *MockbindVectorizer) VectorizeIMU(ctx context.Context, imu string, cfg moduletools.ClassConfig) ([]float32, error) {
	ret := _m.Called(ctx, imu, cfg)

	if len(ret) == 0 {
		panic("no return value specified for VectorizeIMU")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, moduletools.ClassConfig) ([]float32, error)); ok {
		return rf(ctx, imu, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, moduletools.ClassConfig) []float32); ok {
		r0 = rf(ctx, imu, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, moduletools.ClassConfig) error); ok {
		r1 = rf(ctx, imu, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbindVectorizer_VectorizeIMU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorizeIMU'
type MockbindVectorizer_VectorizeIMU_Call struct {
	*mock.Call
}

// VectorizeIMU is a helper method to define mock.On call
//   - ctx context.Context
//   - imu string
//   - cfg moduletools.ClassConfig
func (_e *MockbindVectorizer_Expecter) VectorizeIMU(ctx interface{}, imu interface{}, cfg interface{}) *MockbindVectorizer_VectorizeIMU_Call {
	return &MockbindVectorizer_VectorizeIMU_Call{Call: _e.mock.On("VectorizeIMU", ctx, imu, cfg)}
}

func (_c *MockbindVectorizer_VectorizeIMU_Call) Run(run func(ctx context.Context, imu string, cfg moduletools.ClassConfig)) *MockbindVectorizer_VectorizeIMU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(moduletools.ClassConfig))
	})
	return _c
}

func (_c *MockbindVectorizer_VectorizeIMU_Call) Return(_a0 []float32, _a1 error) *MockbindVectorizer_VectorizeIMU_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbindVectorizer_VectorizeIMU_Call) RunAndReturn(run func(context.Context, string, moduletools.ClassConfig) ([]float32, error)) *MockbindVectorizer_VectorizeIMU_Call {
	_c.Call.Return(run)
	return _c
}

// VectorizeImage provides a mock function with given fields: ctx, id, image, cfg
func (_m *MockbindVectorizer) VectorizeImage(ctx context.Context, id string, image string, cfg moduletools.ClassConfig) ([]float32, error) {
	ret := _m.Called(ctx, id, image, cfg)

	if len(ret) == 0 {
		panic("no return value specified for VectorizeImage")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, moduletools.ClassConfig) ([]float32, error)); ok {
		return rf(ctx, id, image, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, moduletools.ClassConfig) []float32); ok {
		r0 = rf(ctx, id, image, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, moduletools.ClassConfig) error); ok {
		r1 = rf(ctx, id, image, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbindVectorizer_VectorizeImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorizeImage'
type MockbindVectorizer_VectorizeImage_Call struct {
	*mock.Call
}

// VectorizeImage is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - image string
//   - cfg moduletools.ClassConfig
func (_e *MockbindVectorizer_Expecter) VectorizeImage(ctx interface{}, id interface{}, image interface{}, cfg interface{}) *MockbindVectorizer_VectorizeImage_Call {
	return &MockbindVectorizer_VectorizeImage_Call{Call: _e.mock.On("VectorizeImage", ctx, id, image, cfg)}
}

func (_c *MockbindVectorizer_VectorizeImage_Call) Run(run func(ctx context.Context, id string, image string, cfg moduletools.ClassConfig)) *MockbindVectorizer_VectorizeImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(moduletools.ClassConfig))
	})
	return _c
}

func (_c *MockbindVectorizer_VectorizeImage_Call) Return(_a0 []float32, _a1 error) *MockbindVectorizer_VectorizeImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbindVectorizer_VectorizeImage_Call) RunAndReturn(run func(context.Context, string, string, moduletools.ClassConfig) ([]float32, error)) *MockbindVectorizer_VectorizeImage_Call {
	_c.Call.Return(run)
	return _c
}

// VectorizeThermal provides a mock function with given fields: ctx, thermal, cfg
func (_m *MockbindVectorizer) VectorizeThermal(ctx context.Context, thermal string, cfg moduletools.ClassConfig) ([]float32, error) {
	ret := _m.Called(ctx, thermal, cfg)

	if len(ret) == 0 {
		panic("no return value specified for VectorizeThermal")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, moduletools.ClassConfig) ([]float32, error)); ok {
		return rf(ctx, thermal, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, moduletools.ClassConfig) []float32); ok {
		r0 = rf(ctx, thermal, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, moduletools.ClassConfig) error); ok {
		r1 = rf(ctx, thermal, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbindVectorizer_VectorizeThermal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorizeThermal'
type MockbindVectorizer_VectorizeThermal_Call struct {
	*mock.Call
}

// VectorizeThermal is a helper method to define mock.On call
//   - ctx context.Context
//   - thermal string
//   - cfg moduletools.ClassConfig
func (_e *MockbindVectorizer_Expecter) VectorizeThermal(ctx interface{}, thermal interface{}, cfg interface{}) *MockbindVectorizer_VectorizeThermal_Call {
	return &MockbindVectorizer_VectorizeThermal_Call{Call: _e.mock.On("VectorizeThermal", ctx, thermal, cfg)}
}

func (_c *MockbindVectorizer_VectorizeThermal_Call) Run(run func(ctx context.Context, thermal string, cfg moduletools.ClassConfig)) *MockbindVectorizer_VectorizeThermal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(moduletools.ClassConfig))
	})
	return _c
}

func (_c *MockbindVectorizer_VectorizeThermal_Call) Return(_a0 []float32, _a1 error) *MockbindVectorizer_VectorizeThermal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbindVectorizer_VectorizeThermal_Call) RunAndReturn(run func(context.Context, string, moduletools.ClassConfig) ([]float32, error)) *MockbindVectorizer_VectorizeThermal_Call {
	_c.Call.Return(run)
	return _c
}

// VectorizeVideo provides a mock function with given fields: ctx, video, cfg
func (_m *MockbindVectorizer) VectorizeVideo(ctx context.Context, video string, cfg moduletools.ClassConfig) ([]float32, error) {
	ret := _m.Called(ctx, video, cfg)

	if len(ret) == 0 {
		panic("no return value specified for VectorizeVideo")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, moduletools.ClassConfig) ([]float32, error)); ok {
		return rf(ctx, video, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, moduletools.ClassConfig) []float32); ok {
		r0 = rf(ctx, video, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, moduletools.ClassConfig) error); ok {
		r1 = rf(ctx, video, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbindVectorizer_VectorizeVideo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorizeVideo'
type MockbindVectorizer_VectorizeVideo_Call struct {
	*mock.Call
}

// VectorizeVideo is a helper method to define mock.On call
//   - ctx context.Context
//   - video string
//   - cfg moduletools.ClassConfig
func (_e *MockbindVectorizer_Expecter) VectorizeVideo(ctx interface{}, video interface{}, cfg interface{}) *MockbindVectorizer_VectorizeVideo_Call {
	return &MockbindVectorizer_VectorizeVideo_Call{Call: _e.mock.On("VectorizeVideo", ctx, video, cfg)}
}

func (_c *MockbindVectorizer_VectorizeVideo_Call) Run(run func(ctx context.Context, video string, cfg moduletools.ClassConfig)) *MockbindVectorizer_VectorizeVideo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(moduletools.ClassConfig))
	})
	return _c
}

func (_c *MockbindVectorizer_VectorizeVideo_Call) Return(_a0 []float32, _a1 error) *MockbindVectorizer_VectorizeVideo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbindVectorizer_VectorizeVideo_Call) RunAndReturn(run func(context.Context, string, moduletools.ClassConfig) ([]float32, error)) *MockbindVectorizer_VectorizeVideo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbindVectorizer creates a new instance of MockbindVectorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbindVectorizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockbindVectorizer {
	mock := &MockbindVectorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
