//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package answer

import mock "github.com/stretchr/testify/mock"

// MockparamsHelper is an autogenerated mock type for the paramsHelper type
type MockparamsHelper struct {
	mock.Mock
}

type MockparamsHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockparamsHelper) EXPECT() *MockparamsHelper_Expecter {
	return &MockparamsHelper_Expecter{mock: &_m.Mock}
}

// GetProperties provides a mock function with given fields: params
func (_m *MockparamsHelper) GetProperties(params interface{}) []string {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetProperties")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(interface{}) []string); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockparamsHelper_GetProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProperties'
type MockparamsHelper_GetProperties_Call struct {
	*mock.Call
}

// GetProperties is a helper method to define mock.On call
//   - params interface{}
func (_e *MockparamsHelper_Expecter) GetProperties(params interface{}) *MockparamsHelper_GetProperties_Call {
	return &MockparamsHelper_GetProperties_Call{Call: _e.mock.On("GetProperties", params)}
}

func (_c *MockparamsHelper_GetProperties_Call) Run(run func(params interface{})) *MockparamsHelper_GetProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockparamsHelper_GetProperties_Call) Return(_a0 []string) *MockparamsHelper_GetProperties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockparamsHelper_GetProperties_Call) RunAndReturn(run func(interface{}) []string) *MockparamsHelper_GetProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuestion provides a mock function with given fields: params
func (_m *MockparamsHelper) GetQuestion(params interface{}) string {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetQuestion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockparamsHelper_GetQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestion'
type MockparamsHelper_GetQuestion_Call struct {
	*mock.Call
}

// GetQuestion is a helper method to define mock.On call
//   - params interface{}
func (_e *MockparamsHelper_Expecter) GetQuestion(params interface{}) *MockparamsHelper_GetQuestion_Call {
	return &MockparamsHelper_GetQuestion_Call{Call: _e.mock.On("GetQuestion", params)}
}

func (_c *MockparamsHelper_GetQuestion_Call) Run(run func(params interface{})) *MockparamsHelper_GetQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockparamsHelper_GetQuestion_Call) Return(_a0 string) *MockparamsHelper_GetQuestion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockparamsHelper_GetQuestion_Call) RunAndReturn(run func(interface{}) string) *MockparamsHelper_GetQuestion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockparamsHelper creates a new instance of MockparamsHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockparamsHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockparamsHelper {
	mock := &MockparamsHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
