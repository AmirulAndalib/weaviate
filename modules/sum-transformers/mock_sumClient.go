//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package modsum

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ent "github.com/weaviate/weaviate/modules/sum-transformers/ent"
)

// MocksumClient is an autogenerated mock type for the sumClient type
type MocksumClient struct {
	mock.Mock
}

type MocksumClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MocksumClient) EXPECT() *MocksumClient_Expecter {
	return &MocksumClient_Expecter{mock: &_m.Mock}
}

// GetSummary provides a mock function with given fields: ctx, property, text
func (_m *MocksumClient) GetSummary(ctx context.Context, property string, text string) ([]ent.SummaryResult, error) {
	ret := _m.Called(ctx, property, text)

	if len(ret) == 0 {
		panic("no return value specified for GetSummary")
	}

	var r0 []ent.SummaryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]ent.SummaryResult, error)); ok {
		return rf(ctx, property, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []ent.SummaryResult); ok {
		r0 = rf(ctx, property, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ent.SummaryResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, property, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MocksumClient_GetSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummary'
type MocksumClient_GetSummary_Call struct {
	*mock.Call
}

// GetSummary is a helper method to define mock.On call
//   - ctx context.Context
//   - property string
//   - text string
func (_e *MocksumClient_Expecter) GetSummary(ctx interface{}, property interface{}, text interface{}) *MocksumClient_GetSummary_Call {
	return &MocksumClient_GetSummary_Call{Call: _e.mock.On("GetSummary", ctx, property, text)}
}

func (_c *MocksumClient_GetSummary_Call) Run(run func(ctx context.Context, property string, text string)) *MocksumClient_GetSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MocksumClient_GetSummary_Call) Return(_a0 []ent.SummaryResult, _a1 error) *MocksumClient_GetSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocksumClient_GetSummary_Call) RunAndReturn(run func(context.Context, string, string) ([]ent.SummaryResult, error)) *MocksumClient_GetSummary_Call {
	_c.Call.Return(run)
	return _c
}

// MetaInfo provides a mock function with given fields:
func (_m *MocksumClient) MetaInfo() (map[string]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MetaInfo")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MocksumClient_MetaInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetaInfo'
type MocksumClient_MetaInfo_Call struct {
	*mock.Call
}

// MetaInfo is a helper method to define mock.On call
func (_e *MocksumClient_Expecter) MetaInfo() *MocksumClient_MetaInfo_Call {
	return &MocksumClient_MetaInfo_Call{Call: _e.mock.On("MetaInfo")}
}

func (_c *MocksumClient_MetaInfo_Call) Run(run func()) *MocksumClient_MetaInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MocksumClient_MetaInfo_Call) Return(_a0 map[string]interface{}, _a1 error) *MocksumClient_MetaInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocksumClient_MetaInfo_Call) RunAndReturn(run func() (map[string]interface{}, error)) *MocksumClient_MetaInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocksumClient creates a new instance of MocksumClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksumClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocksumClient {
	mock := &MocksumClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
