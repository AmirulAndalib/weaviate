//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package modcontextionary

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"

	moduletools "github.com/weaviate/weaviate/entities/moduletools"

	vectorizer "github.com/weaviate/weaviate/modules/text2vec-contextionary/vectorizer"
)

// MockconfigValidator is an autogenerated mock type for the configValidator type
type MockconfigValidator struct {
	mock.Mock
}

type MockconfigValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockconfigValidator) EXPECT() *MockconfigValidator_Expecter {
	return &MockconfigValidator_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: ctx, class, cfg, indexChecker
func (_m *MockconfigValidator) Do(ctx context.Context, class *models.Class, cfg moduletools.ClassConfig, indexChecker vectorizer.IndexChecker) error {
	ret := _m.Called(ctx, class, cfg, indexChecker)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Class, moduletools.ClassConfig, vectorizer.IndexChecker) error); ok {
		r0 = rf(ctx, class, cfg, indexChecker)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockconfigValidator_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockconfigValidator_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - class *models.Class
//   - cfg moduletools.ClassConfig
//   - indexChecker vectorizer.IndexChecker
func (_e *MockconfigValidator_Expecter) Do(ctx interface{}, class interface{}, cfg interface{}, indexChecker interface{}) *MockconfigValidator_Do_Call {
	return &MockconfigValidator_Do_Call{Call: _e.mock.On("Do", ctx, class, cfg, indexChecker)}
}

func (_c *MockconfigValidator_Do_Call) Run(run func(ctx context.Context, class *models.Class, cfg moduletools.ClassConfig, indexChecker vectorizer.IndexChecker)) *MockconfigValidator_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Class), args[2].(moduletools.ClassConfig), args[3].(vectorizer.IndexChecker))
	})
	return _c
}

func (_c *MockconfigValidator_Do_Call) Return(_a0 error) *MockconfigValidator_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockconfigValidator_Do_Call) RunAndReturn(run func(context.Context, *models.Class, moduletools.ClassConfig, vectorizer.IndexChecker) error) *MockconfigValidator_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockconfigValidator creates a new instance of MockconfigValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockconfigValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockconfigValidator {
	mock := &MockconfigValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
