//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package extensions

import mock "github.com/stretchr/testify/mock"

// MockStorer is an autogenerated mock type for the Storer type
type MockStorer struct {
	mock.Mock
}

type MockStorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorer) EXPECT() *MockStorer_Expecter {
	return &MockStorer_Expecter{mock: &_m.Mock}
}

// Store provides a mock function with given fields: concept, value
func (_m *MockStorer) Store(concept string, value []byte) error {
	ret := _m.Called(concept, value)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(concept, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorer_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockStorer_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - concept string
//   - value []byte
func (_e *MockStorer_Expecter) Store(concept interface{}, value interface{}) *MockStorer_Store_Call {
	return &MockStorer_Store_Call{Call: _e.mock.On("Store", concept, value)}
}

func (_c *MockStorer_Store_Call) Run(run func(concept string, value []byte)) *MockStorer_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockStorer_Store_Call) Return(_a0 error) *MockStorer_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorer_Store_Call) RunAndReturn(run func(string, []byte) error) *MockStorer_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorer creates a new instance of MockStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorer {
	mock := &MockStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
