//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package modcontextionary

import (
	context "context"

	additionalmodels "github.com/weaviate/weaviate/modules/text2vec-contextionary/additional/models"

	mock "github.com/stretchr/testify/mock"

	models "github.com/weaviate/weaviate/entities/models"

	time "time"
)

// MockremoteClient is an autogenerated mock type for the remoteClient type
type MockremoteClient struct {
	mock.Mock
}

type MockremoteClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockremoteClient) EXPECT() *MockremoteClient_Expecter {
	return &MockremoteClient_Expecter{mock: &_m.Mock}
}

// AddExtension provides a mock function with given fields: ctx, extension
func (_m *MockremoteClient) AddExtension(ctx context.Context, extension *models.C11yExtension) error {
	ret := _m.Called(ctx, extension)

	if len(ret) == 0 {
		panic("no return value specified for AddExtension")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.C11yExtension) error); ok {
		r0 = rf(ctx, extension)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockremoteClient_AddExtension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddExtension'
type MockremoteClient_AddExtension_Call struct {
	*mock.Call
}

// AddExtension is a helper method to define mock.On call
//   - ctx context.Context
//   - extension *models.C11yExtension
func (_e *MockremoteClient_Expecter) AddExtension(ctx interface{}, extension interface{}) *MockremoteClient_AddExtension_Call {
	return &MockremoteClient_AddExtension_Call{Call: _e.mock.On("AddExtension", ctx, extension)}
}

func (_c *MockremoteClient_AddExtension_Call) Run(run func(ctx context.Context, extension *models.C11yExtension)) *MockremoteClient_AddExtension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.C11yExtension))
	})
	return _c
}

func (_c *MockremoteClient_AddExtension_Call) Return(_a0 error) *MockremoteClient_AddExtension_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockremoteClient_AddExtension_Call) RunAndReturn(run func(context.Context, *models.C11yExtension) error) *MockremoteClient_AddExtension_Call {
	_c.Call.Return(run)
	return _c
}

// IsStopWord provides a mock function with given fields: ctx, word
func (_m *MockremoteClient) IsStopWord(ctx context.Context, word string) (bool, error) {
	ret := _m.Called(ctx, word)

	if len(ret) == 0 {
		panic("no return value specified for IsStopWord")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, word)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockremoteClient_IsStopWord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStopWord'
type MockremoteClient_IsStopWord_Call struct {
	*mock.Call
}

// IsStopWord is a helper method to define mock.On call
//   - ctx context.Context
//   - word string
func (_e *MockremoteClient_Expecter) IsStopWord(ctx interface{}, word interface{}) *MockremoteClient_IsStopWord_Call {
	return &MockremoteClient_IsStopWord_Call{Call: _e.mock.On("IsStopWord", ctx, word)}
}

func (_c *MockremoteClient_IsStopWord_Call) Run(run func(ctx context.Context, word string)) *MockremoteClient_IsStopWord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockremoteClient_IsStopWord_Call) Return(_a0 bool, _a1 error) *MockremoteClient_IsStopWord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockremoteClient_IsStopWord_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockremoteClient_IsStopWord_Call {
	_c.Call.Return(run)
	return _c
}

// IsWordPresent provides a mock function with given fields: ctx, word
func (_m *MockremoteClient) IsWordPresent(ctx context.Context, word string) (bool, error) {
	ret := _m.Called(ctx, word)

	if len(ret) == 0 {
		panic("no return value specified for IsWordPresent")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, word)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockremoteClient_IsWordPresent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWordPresent'
type MockremoteClient_IsWordPresent_Call struct {
	*mock.Call
}

// IsWordPresent is a helper method to define mock.On call
//   - ctx context.Context
//   - word string
func (_e *MockremoteClient_Expecter) IsWordPresent(ctx interface{}, word interface{}) *MockremoteClient_IsWordPresent_Call {
	return &MockremoteClient_IsWordPresent_Call{Call: _e.mock.On("IsWordPresent", ctx, word)}
}

func (_c *MockremoteClient_IsWordPresent_Call) Run(run func(ctx context.Context, word string)) *MockremoteClient_IsWordPresent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockremoteClient_IsWordPresent_Call) Return(_a0 bool, _a1 error) *MockremoteClient_IsWordPresent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockremoteClient_IsWordPresent_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockremoteClient_IsWordPresent_Call {
	_c.Call.Return(run)
	return _c
}

// MetaInfo provides a mock function with given fields:
func (_m *MockremoteClient) MetaInfo() (map[string]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MetaInfo")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockremoteClient_MetaInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetaInfo'
type MockremoteClient_MetaInfo_Call struct {
	*mock.Call
}

// MetaInfo is a helper method to define mock.On call
func (_e *MockremoteClient_Expecter) MetaInfo() *MockremoteClient_MetaInfo_Call {
	return &MockremoteClient_MetaInfo_Call{Call: _e.mock.On("MetaInfo")}
}

func (_c *MockremoteClient_MetaInfo_Call) Run(run func()) *MockremoteClient_MetaInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockremoteClient_MetaInfo_Call) Return(_a0 map[string]interface{}, _a1 error) *MockremoteClient_MetaInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockremoteClient_MetaInfo_Call) RunAndReturn(run func() (map[string]interface{}, error)) *MockremoteClient_MetaInfo_Call {
	_c.Call.Return(run)
	return _c
}

// MultiNearestWordsByVector provides a mock function with given fields: ctx, vectors, k, n
func (_m *MockremoteClient) MultiNearestWordsByVector(ctx context.Context, vectors [][]float32, k int, n int) ([]*additionalmodels.NearestNeighbors, error) {
	ret := _m.Called(ctx, vectors, k, n)

	if len(ret) == 0 {
		panic("no return value specified for MultiNearestWordsByVector")
	}

	var r0 []*additionalmodels.NearestNeighbors
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]float32, int, int) ([]*additionalmodels.NearestNeighbors, error)); ok {
		return rf(ctx, vectors, k, n)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]float32, int, int) []*additionalmodels.NearestNeighbors); ok {
		r0 = rf(ctx, vectors, k, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*additionalmodels.NearestNeighbors)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]float32, int, int) error); ok {
		r1 = rf(ctx, vectors, k, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockremoteClient_MultiNearestWordsByVector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiNearestWordsByVector'
type MockremoteClient_MultiNearestWordsByVector_Call struct {
	*mock.Call
}

// MultiNearestWordsByVector is a helper method to define mock.On call
//   - ctx context.Context
//   - vectors [][]float32
//   - k int
//   - n int
func (_e *MockremoteClient_Expecter) MultiNearestWordsByVector(ctx interface{}, vectors interface{}, k interface{}, n interface{}) *MockremoteClient_MultiNearestWordsByVector_Call {
	return &MockremoteClient_MultiNearestWordsByVector_Call{Call: _e.mock.On("MultiNearestWordsByVector", ctx, vectors, k, n)}
}

func (_c *MockremoteClient_MultiNearestWordsByVector_Call) Run(run func(ctx context.Context, vectors [][]float32, k int, n int)) *MockremoteClient_MultiNearestWordsByVector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]float32), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockremoteClient_MultiNearestWordsByVector_Call) Return(_a0 []*additionalmodels.NearestNeighbors, _a1 error) *MockremoteClient_MultiNearestWordsByVector_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockremoteClient_MultiNearestWordsByVector_Call) RunAndReturn(run func(context.Context, [][]float32, int, int) ([]*additionalmodels.NearestNeighbors, error)) *MockremoteClient_MultiNearestWordsByVector_Call {
	_c.Call.Return(run)
	return _c
}

// MultiVectorForWord provides a mock function with given fields: ctx, words
func (_m *MockremoteClient) MultiVectorForWord(ctx context.Context, words []string) ([][]float32, error) {
	ret := _m.Called(ctx, words)

	if len(ret) == 0 {
		panic("no return value specified for MultiVectorForWord")
	}

	var r0 [][]float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([][]float32, error)); ok {
		return rf(ctx, words)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) [][]float32); ok {
		r0 = rf(ctx, words)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, words)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockremoteClient_MultiVectorForWord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiVectorForWord'
type MockremoteClient_MultiVectorForWord_Call struct {
	*mock.Call
}

// MultiVectorForWord is a helper method to define mock.On call
//   - ctx context.Context
//   - words []string
func (_e *MockremoteClient_Expecter) MultiVectorForWord(ctx interface{}, words interface{}) *MockremoteClient_MultiVectorForWord_Call {
	return &MockremoteClient_MultiVectorForWord_Call{Call: _e.mock.On("MultiVectorForWord", ctx, words)}
}

func (_c *MockremoteClient_MultiVectorForWord_Call) Run(run func(ctx context.Context, words []string)) *MockremoteClient_MultiVectorForWord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockremoteClient_MultiVectorForWord_Call) Return(_a0 [][]float32, _a1 error) *MockremoteClient_MultiVectorForWord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockremoteClient_MultiVectorForWord_Call) RunAndReturn(run func(context.Context, []string) ([][]float32, error)) *MockremoteClient_MultiVectorForWord_Call {
	_c.Call.Return(run)
	return _c
}

// NearestWordsByVector provides a mock function with given fields: ctx, vector, n, k
func (_m *MockremoteClient) NearestWordsByVector(ctx context.Context, vector []float32, n int, k int) ([]string, []float32, error) {
	ret := _m.Called(ctx, vector, n, k)

	if len(ret) == 0 {
		panic("no return value specified for NearestWordsByVector")
	}

	var r0 []string
	var r1 []float32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []float32, int, int) ([]string, []float32, error)); ok {
		return rf(ctx, vector, n, k)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []float32, int, int) []string); ok {
		r0 = rf(ctx, vector, n, k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []float32, int, int) []float32); ok {
		r1 = rf(ctx, vector, n, k)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float32)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []float32, int, int) error); ok {
		r2 = rf(ctx, vector, n, k)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockremoteClient_NearestWordsByVector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NearestWordsByVector'
type MockremoteClient_NearestWordsByVector_Call struct {
	*mock.Call
}

// NearestWordsByVector is a helper method to define mock.On call
//   - ctx context.Context
//   - vector []float32
//   - n int
//   - k int
func (_e *MockremoteClient_Expecter) NearestWordsByVector(ctx interface{}, vector interface{}, n interface{}, k interface{}) *MockremoteClient_NearestWordsByVector_Call {
	return &MockremoteClient_NearestWordsByVector_Call{Call: _e.mock.On("NearestWordsByVector", ctx, vector, n, k)}
}

func (_c *MockremoteClient_NearestWordsByVector_Call) Run(run func(ctx context.Context, vector []float32, n int, k int)) *MockremoteClient_NearestWordsByVector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]float32), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockremoteClient_NearestWordsByVector_Call) Return(_a0 []string, _a1 []float32, _a2 error) *MockremoteClient_NearestWordsByVector_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockremoteClient_NearestWordsByVector_Call) RunAndReturn(run func(context.Context, []float32, int, int) ([]string, []float32, error)) *MockremoteClient_NearestWordsByVector_Call {
	_c.Call.Return(run)
	return _c
}

// VectorForCorpi provides a mock function with given fields: ctx, words, overrides
func (_m *MockremoteClient) VectorForCorpi(ctx context.Context, words []string, overrides map[string]string) ([]float32, []additionalmodels.InterpretationSource, error) {
	ret := _m.Called(ctx, words, overrides)

	if len(ret) == 0 {
		panic("no return value specified for VectorForCorpi")
	}

	var r0 []float32
	var r1 []additionalmodels.InterpretationSource
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) ([]float32, []additionalmodels.InterpretationSource, error)); ok {
		return rf(ctx, words, overrides)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) []float32); ok {
		r0 = rf(ctx, words, overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, map[string]string) []additionalmodels.InterpretationSource); ok {
		r1 = rf(ctx, words, overrides)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]additionalmodels.InterpretationSource)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string, map[string]string) error); ok {
		r2 = rf(ctx, words, overrides)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockremoteClient_VectorForCorpi_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorForCorpi'
type MockremoteClient_VectorForCorpi_Call struct {
	*mock.Call
}

// VectorForCorpi is a helper method to define mock.On call
//   - ctx context.Context
//   - words []string
//   - overrides map[string]string
func (_e *MockremoteClient_Expecter) VectorForCorpi(ctx interface{}, words interface{}, overrides interface{}) *MockremoteClient_VectorForCorpi_Call {
	return &MockremoteClient_VectorForCorpi_Call{Call: _e.mock.On("VectorForCorpi", ctx, words, overrides)}
}

func (_c *MockremoteClient_VectorForCorpi_Call) Run(run func(ctx context.Context, words []string, overrides map[string]string)) *MockremoteClient_VectorForCorpi_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockremoteClient_VectorForCorpi_Call) Return(_a0 []float32, _a1 []additionalmodels.InterpretationSource, _a2 error) *MockremoteClient_VectorForCorpi_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockremoteClient_VectorForCorpi_Call) RunAndReturn(run func(context.Context, []string, map[string]string) ([]float32, []additionalmodels.InterpretationSource, error)) *MockremoteClient_VectorForCorpi_Call {
	_c.Call.Return(run)
	return _c
}

// VectorForWord provides a mock function with given fields: ctx, word
func (_m *MockremoteClient) VectorForWord(ctx context.Context, word string) ([]float32, error) {
	ret := _m.Called(ctx, word)

	if len(ret) == 0 {
		panic("no return value specified for VectorForWord")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]float32, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []float32); ok {
		r0 = rf(ctx, word)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockremoteClient_VectorForWord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorForWord'
type MockremoteClient_VectorForWord_Call struct {
	*mock.Call
}

// VectorForWord is a helper method to define mock.On call
//   - ctx context.Context
//   - word string
func (_e *MockremoteClient_Expecter) VectorForWord(ctx interface{}, word interface{}) *MockremoteClient_VectorForWord_Call {
	return &MockremoteClient_VectorForWord_Call{Call: _e.mock.On("VectorForWord", ctx, word)}
}

func (_c *MockremoteClient_VectorForWord_Call) Run(run func(ctx context.Context, word string)) *MockremoteClient_VectorForWord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockremoteClient_VectorForWord_Call) Return(_a0 []float32, _a1 error) *MockremoteClient_VectorForWord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockremoteClient_VectorForWord_Call) RunAndReturn(run func(context.Context, string) ([]float32, error)) *MockremoteClient_VectorForWord_Call {
	_c.Call.Return(run)
	return _c
}

// VectorOnlyForCorpi provides a mock function with given fields: ctx, corpi, overrides
func (_m *MockremoteClient) VectorOnlyForCorpi(ctx context.Context, corpi []string, overrides map[string]string) ([]float32, error) {
	ret := _m.Called(ctx, corpi, overrides)

	if len(ret) == 0 {
		panic("no return value specified for VectorOnlyForCorpi")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) ([]float32, error)); ok {
		return rf(ctx, corpi, overrides)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) []float32); ok {
		r0 = rf(ctx, corpi, overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, map[string]string) error); ok {
		r1 = rf(ctx, corpi, overrides)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockremoteClient_VectorOnlyForCorpi_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorOnlyForCorpi'
type MockremoteClient_VectorOnlyForCorpi_Call struct {
	*mock.Call
}

// VectorOnlyForCorpi is a helper method to define mock.On call
//   - ctx context.Context
//   - corpi []string
//   - overrides map[string]string
func (_e *MockremoteClient_Expecter) VectorOnlyForCorpi(ctx interface{}, corpi interface{}, overrides interface{}) *MockremoteClient_VectorOnlyForCorpi_Call {
	return &MockremoteClient_VectorOnlyForCorpi_Call{Call: _e.mock.On("VectorOnlyForCorpi", ctx, corpi, overrides)}
}

func (_c *MockremoteClient_VectorOnlyForCorpi_Call) Run(run func(ctx context.Context, corpi []string, overrides map[string]string)) *MockremoteClient_VectorOnlyForCorpi_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockremoteClient_VectorOnlyForCorpi_Call) Return(_a0 []float32, _a1 error) *MockremoteClient_VectorOnlyForCorpi_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockremoteClient_VectorOnlyForCorpi_Call) RunAndReturn(run func(context.Context, []string, map[string]string) ([]float32, error)) *MockremoteClient_VectorOnlyForCorpi_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForStartupAndValidateVersion provides a mock function with given fields: ctx, version, interval
func (_m *MockremoteClient) WaitForStartupAndValidateVersion(ctx context.Context, version string, interval time.Duration) error {
	ret := _m.Called(ctx, version, interval)

	if len(ret) == 0 {
		panic("no return value specified for WaitForStartupAndValidateVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, version, interval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockremoteClient_WaitForStartupAndValidateVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForStartupAndValidateVersion'
type MockremoteClient_WaitForStartupAndValidateVersion_Call struct {
	*mock.Call
}

// WaitForStartupAndValidateVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - version string
//   - interval time.Duration
func (_e *MockremoteClient_Expecter) WaitForStartupAndValidateVersion(ctx interface{}, version interface{}, interval interface{}) *MockremoteClient_WaitForStartupAndValidateVersion_Call {
	return &MockremoteClient_WaitForStartupAndValidateVersion_Call{Call: _e.mock.On("WaitForStartupAndValidateVersion", ctx, version, interval)}
}

func (_c *MockremoteClient_WaitForStartupAndValidateVersion_Call) Run(run func(ctx context.Context, version string, interval time.Duration)) *MockremoteClient_WaitForStartupAndValidateVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockremoteClient_WaitForStartupAndValidateVersion_Call) Return(_a0 error) *MockremoteClient_WaitForStartupAndValidateVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockremoteClient_WaitForStartupAndValidateVersion_Call) RunAndReturn(run func(context.Context, string, time.Duration) error) *MockremoteClient_WaitForStartupAndValidateVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockremoteClient creates a new instance of MockremoteClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockremoteClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockremoteClient {
	mock := &MockremoteClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
