//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package additional

import (
	context "context"

	ast "github.com/tailor-inc/graphql/language/ast"

	mock "github.com/stretchr/testify/mock"

	moduletools "github.com/weaviate/weaviate/entities/moduletools"

	search "github.com/weaviate/weaviate/entities/search"
)

// MockAdditionalProperty is an autogenerated mock type for the AdditionalProperty type
type MockAdditionalProperty struct {
	mock.Mock
}

type MockAdditionalProperty_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdditionalProperty) EXPECT() *MockAdditionalProperty_Expecter {
	return &MockAdditionalProperty_Expecter{mock: &_m.Mock}
}

// AdditionalPropertyDefaultValue provides a mock function with given fields:
func (_m *MockAdditionalProperty) AdditionalPropertyDefaultValue() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AdditionalPropertyDefaultValue")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockAdditionalProperty_AdditionalPropertyDefaultValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdditionalPropertyDefaultValue'
type MockAdditionalProperty_AdditionalPropertyDefaultValue_Call struct {
	*mock.Call
}

// AdditionalPropertyDefaultValue is a helper method to define mock.On call
func (_e *MockAdditionalProperty_Expecter) AdditionalPropertyDefaultValue() *MockAdditionalProperty_AdditionalPropertyDefaultValue_Call {
	return &MockAdditionalProperty_AdditionalPropertyDefaultValue_Call{Call: _e.mock.On("AdditionalPropertyDefaultValue")}
}

func (_c *MockAdditionalProperty_AdditionalPropertyDefaultValue_Call) Run(run func()) *MockAdditionalProperty_AdditionalPropertyDefaultValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdditionalProperty_AdditionalPropertyDefaultValue_Call) Return(_a0 interface{}) *MockAdditionalProperty_AdditionalPropertyDefaultValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdditionalProperty_AdditionalPropertyDefaultValue_Call) RunAndReturn(run func() interface{}) *MockAdditionalProperty_AdditionalPropertyDefaultValue_Call {
	_c.Call.Return(run)
	return _c
}

// AdditionalPropertyFn provides a mock function with given fields: ctx, in, params, limit, argumentModuleParams, cfg
func (_m *MockAdditionalProperty) AdditionalPropertyFn(ctx context.Context, in []search.Result, params interface{}, limit *int, argumentModuleParams map[string]interface{}, cfg moduletools.ClassConfig) ([]search.Result, error) {
	ret := _m.Called(ctx, in, params, limit, argumentModuleParams, cfg)

	if len(ret) == 0 {
		panic("no return value specified for AdditionalPropertyFn")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []search.Result, interface{}, *int, map[string]interface{}, moduletools.ClassConfig) ([]search.Result, error)); ok {
		return rf(ctx, in, params, limit, argumentModuleParams, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []search.Result, interface{}, *int, map[string]interface{}, moduletools.ClassConfig) []search.Result); ok {
		r0 = rf(ctx, in, params, limit, argumentModuleParams, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []search.Result, interface{}, *int, map[string]interface{}, moduletools.ClassConfig) error); ok {
		r1 = rf(ctx, in, params, limit, argumentModuleParams, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdditionalProperty_AdditionalPropertyFn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdditionalPropertyFn'
type MockAdditionalProperty_AdditionalPropertyFn_Call struct {
	*mock.Call
}

// AdditionalPropertyFn is a helper method to define mock.On call
//   - ctx context.Context
//   - in []search.Result
//   - params interface{}
//   - limit *int
//   - argumentModuleParams map[string]interface{}
//   - cfg moduletools.ClassConfig
func (_e *MockAdditionalProperty_Expecter) AdditionalPropertyFn(ctx interface{}, in interface{}, params interface{}, limit interface{}, argumentModuleParams interface{}, cfg interface{}) *MockAdditionalProperty_AdditionalPropertyFn_Call {
	return &MockAdditionalProperty_AdditionalPropertyFn_Call{Call: _e.mock.On("AdditionalPropertyFn", ctx, in, params, limit, argumentModuleParams, cfg)}
}

func (_c *MockAdditionalProperty_AdditionalPropertyFn_Call) Run(run func(ctx context.Context, in []search.Result, params interface{}, limit *int, argumentModuleParams map[string]interface{}, cfg moduletools.ClassConfig)) *MockAdditionalProperty_AdditionalPropertyFn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]search.Result), args[2].(interface{}), args[3].(*int), args[4].(map[string]interface{}), args[5].(moduletools.ClassConfig))
	})
	return _c
}

func (_c *MockAdditionalProperty_AdditionalPropertyFn_Call) Return(_a0 []search.Result, _a1 error) *MockAdditionalProperty_AdditionalPropertyFn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdditionalProperty_AdditionalPropertyFn_Call) RunAndReturn(run func(context.Context, []search.Result, interface{}, *int, map[string]interface{}, moduletools.ClassConfig) ([]search.Result, error)) *MockAdditionalProperty_AdditionalPropertyFn_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractAdditionalFn provides a mock function with given fields: param
func (_m *MockAdditionalProperty) ExtractAdditionalFn(param []*ast.Argument) interface{} {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for ExtractAdditionalFn")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func([]*ast.Argument) interface{}); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockAdditionalProperty_ExtractAdditionalFn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractAdditionalFn'
type MockAdditionalProperty_ExtractAdditionalFn_Call struct {
	*mock.Call
}

// ExtractAdditionalFn is a helper method to define mock.On call
//   - param []*ast.Argument
func (_e *MockAdditionalProperty_Expecter) ExtractAdditionalFn(param interface{}) *MockAdditionalProperty_ExtractAdditionalFn_Call {
	return &MockAdditionalProperty_ExtractAdditionalFn_Call{Call: _e.mock.On("ExtractAdditionalFn", param)}
}

func (_c *MockAdditionalProperty_ExtractAdditionalFn_Call) Run(run func(param []*ast.Argument)) *MockAdditionalProperty_ExtractAdditionalFn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*ast.Argument))
	})
	return _c
}

func (_c *MockAdditionalProperty_ExtractAdditionalFn_Call) Return(_a0 interface{}) *MockAdditionalProperty_ExtractAdditionalFn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdditionalProperty_ExtractAdditionalFn_Call) RunAndReturn(run func([]*ast.Argument) interface{}) *MockAdditionalProperty_ExtractAdditionalFn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdditionalProperty creates a new instance of MockAdditionalProperty. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdditionalProperty(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdditionalProperty {
	mock := &MockAdditionalProperty{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
