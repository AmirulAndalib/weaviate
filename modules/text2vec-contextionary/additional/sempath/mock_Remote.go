//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package sempath

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/modules/text2vec-contextionary/additional/models"
)

// MockRemote is an autogenerated mock type for the Remote type
type MockRemote struct {
	mock.Mock
}

type MockRemote_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemote) EXPECT() *MockRemote_Expecter {
	return &MockRemote_Expecter{mock: &_m.Mock}
}

// MultiNearestWordsByVector provides a mock function with given fields: ctx, vectors, k, n
func (_m *MockRemote) MultiNearestWordsByVector(ctx context.Context, vectors [][]float32, k int, n int) ([]*models.NearestNeighbors, error) {
	ret := _m.Called(ctx, vectors, k, n)

	if len(ret) == 0 {
		panic("no return value specified for MultiNearestWordsByVector")
	}

	var r0 []*models.NearestNeighbors
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]float32, int, int) ([]*models.NearestNeighbors, error)); ok {
		return rf(ctx, vectors, k, n)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]float32, int, int) []*models.NearestNeighbors); ok {
		r0 = rf(ctx, vectors, k, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.NearestNeighbors)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]float32, int, int) error); ok {
		r1 = rf(ctx, vectors, k, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemote_MultiNearestWordsByVector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiNearestWordsByVector'
type MockRemote_MultiNearestWordsByVector_Call struct {
	*mock.Call
}

// MultiNearestWordsByVector is a helper method to define mock.On call
//   - ctx context.Context
//   - vectors [][]float32
//   - k int
//   - n int
func (_e *MockRemote_Expecter) MultiNearestWordsByVector(ctx interface{}, vectors interface{}, k interface{}, n interface{}) *MockRemote_MultiNearestWordsByVector_Call {
	return &MockRemote_MultiNearestWordsByVector_Call{Call: _e.mock.On("MultiNearestWordsByVector", ctx, vectors, k, n)}
}

func (_c *MockRemote_MultiNearestWordsByVector_Call) Run(run func(ctx context.Context, vectors [][]float32, k int, n int)) *MockRemote_MultiNearestWordsByVector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]float32), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockRemote_MultiNearestWordsByVector_Call) Return(_a0 []*models.NearestNeighbors, _a1 error) *MockRemote_MultiNearestWordsByVector_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemote_MultiNearestWordsByVector_Call) RunAndReturn(run func(context.Context, [][]float32, int, int) ([]*models.NearestNeighbors, error)) *MockRemote_MultiNearestWordsByVector_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemote creates a new instance of MockRemote. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemote(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemote {
	mock := &MockRemote{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
