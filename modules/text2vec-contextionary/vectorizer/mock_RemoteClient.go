//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package vectorizer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRemoteClient is an autogenerated mock type for the RemoteClient type
type MockRemoteClient struct {
	mock.Mock
}

type MockRemoteClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteClient) EXPECT() *MockRemoteClient_Expecter {
	return &MockRemoteClient_Expecter{mock: &_m.Mock}
}

// IsStopWord provides a mock function with given fields: ctx, word
func (_m *MockRemoteClient) IsStopWord(ctx context.Context, word string) (bool, error) {
	ret := _m.Called(ctx, word)

	if len(ret) == 0 {
		panic("no return value specified for IsStopWord")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, word)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteClient_IsStopWord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStopWord'
type MockRemoteClient_IsStopWord_Call struct {
	*mock.Call
}

// IsStopWord is a helper method to define mock.On call
//   - ctx context.Context
//   - word string
func (_e *MockRemoteClient_Expecter) IsStopWord(ctx interface{}, word interface{}) *MockRemoteClient_IsStopWord_Call {
	return &MockRemoteClient_IsStopWord_Call{Call: _e.mock.On("IsStopWord", ctx, word)}
}

func (_c *MockRemoteClient_IsStopWord_Call) Run(run func(ctx context.Context, word string)) *MockRemoteClient_IsStopWord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRemoteClient_IsStopWord_Call) Return(_a0 bool, _a1 error) *MockRemoteClient_IsStopWord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteClient_IsStopWord_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockRemoteClient_IsStopWord_Call {
	_c.Call.Return(run)
	return _c
}

// IsWordPresent provides a mock function with given fields: ctx, word
func (_m *MockRemoteClient) IsWordPresent(ctx context.Context, word string) (bool, error) {
	ret := _m.Called(ctx, word)

	if len(ret) == 0 {
		panic("no return value specified for IsWordPresent")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, word)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteClient_IsWordPresent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWordPresent'
type MockRemoteClient_IsWordPresent_Call struct {
	*mock.Call
}

// IsWordPresent is a helper method to define mock.On call
//   - ctx context.Context
//   - word string
func (_e *MockRemoteClient_Expecter) IsWordPresent(ctx interface{}, word interface{}) *MockRemoteClient_IsWordPresent_Call {
	return &MockRemoteClient_IsWordPresent_Call{Call: _e.mock.On("IsWordPresent", ctx, word)}
}

func (_c *MockRemoteClient_IsWordPresent_Call) Run(run func(ctx context.Context, word string)) *MockRemoteClient_IsWordPresent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRemoteClient_IsWordPresent_Call) Return(_a0 bool, _a1 error) *MockRemoteClient_IsWordPresent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteClient_IsWordPresent_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockRemoteClient_IsWordPresent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteClient creates a new instance of MockRemoteClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteClient {
	mock := &MockRemoteClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
