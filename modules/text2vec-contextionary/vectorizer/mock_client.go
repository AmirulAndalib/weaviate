//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package vectorizer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/modules/text2vec-contextionary/additional/models"
)

// Mockclient is an autogenerated mock type for the client type
type Mockclient struct {
	mock.Mock
}

type Mockclient_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockclient) EXPECT() *Mockclient_Expecter {
	return &Mockclient_Expecter{mock: &_m.Mock}
}

// VectorForCorpi provides a mock function with given fields: ctx, corpi, overrides
func (_m *Mockclient) VectorForCorpi(ctx context.Context, corpi []string, overrides map[string]string) ([]float32, []models.InterpretationSource, error) {
	ret := _m.Called(ctx, corpi, overrides)

	if len(ret) == 0 {
		panic("no return value specified for VectorForCorpi")
	}

	var r0 []float32
	var r1 []models.InterpretationSource
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) ([]float32, []models.InterpretationSource, error)); ok {
		return rf(ctx, corpi, overrides)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) []float32); ok {
		r0 = rf(ctx, corpi, overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, map[string]string) []models.InterpretationSource); ok {
		r1 = rf(ctx, corpi, overrides)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]models.InterpretationSource)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string, map[string]string) error); ok {
		r2 = rf(ctx, corpi, overrides)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Mockclient_VectorForCorpi_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorForCorpi'
type Mockclient_VectorForCorpi_Call struct {
	*mock.Call
}

// VectorForCorpi is a helper method to define mock.On call
//   - ctx context.Context
//   - corpi []string
//   - overrides map[string]string
func (_e *Mockclient_Expecter) VectorForCorpi(ctx interface{}, corpi interface{}, overrides interface{}) *Mockclient_VectorForCorpi_Call {
	return &Mockclient_VectorForCorpi_Call{Call: _e.mock.On("VectorForCorpi", ctx, corpi, overrides)}
}

func (_c *Mockclient_VectorForCorpi_Call) Run(run func(ctx context.Context, corpi []string, overrides map[string]string)) *Mockclient_VectorForCorpi_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(map[string]string))
	})
	return _c
}

func (_c *Mockclient_VectorForCorpi_Call) Return(_a0 []float32, _a1 []models.InterpretationSource, _a2 error) *Mockclient_VectorForCorpi_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Mockclient_VectorForCorpi_Call) RunAndReturn(run func(context.Context, []string, map[string]string) ([]float32, []models.InterpretationSource, error)) *Mockclient_VectorForCorpi_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockclient creates a new instance of Mockclient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockclient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockclient {
	mock := &Mockclient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
