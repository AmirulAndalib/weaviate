//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package vectorizer

import mock "github.com/stretchr/testify/mock"

// MockClassIndexCheck is an autogenerated mock type for the ClassIndexCheck type
type MockClassIndexCheck struct {
	mock.Mock
}

type MockClassIndexCheck_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClassIndexCheck) EXPECT() *MockClassIndexCheck_Expecter {
	return &MockClassIndexCheck_Expecter{mock: &_m.Mock}
}

// PropertyIndexed provides a mock function with given fields: property
func (_m *MockClassIndexCheck) PropertyIndexed(property string) bool {
	ret := _m.Called(property)

	if len(ret) == 0 {
		panic("no return value specified for PropertyIndexed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(property)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassIndexCheck_PropertyIndexed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PropertyIndexed'
type MockClassIndexCheck_PropertyIndexed_Call struct {
	*mock.Call
}

// PropertyIndexed is a helper method to define mock.On call
//   - property string
func (_e *MockClassIndexCheck_Expecter) PropertyIndexed(property interface{}) *MockClassIndexCheck_PropertyIndexed_Call {
	return &MockClassIndexCheck_PropertyIndexed_Call{Call: _e.mock.On("PropertyIndexed", property)}
}

func (_c *MockClassIndexCheck_PropertyIndexed_Call) Run(run func(property string)) *MockClassIndexCheck_PropertyIndexed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassIndexCheck_PropertyIndexed_Call) Return(_a0 bool) *MockClassIndexCheck_PropertyIndexed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassIndexCheck_PropertyIndexed_Call) RunAndReturn(run func(string) bool) *MockClassIndexCheck_PropertyIndexed_Call {
	_c.Call.Return(run)
	return _c
}

// VectorizeClassName provides a mock function with given fields:
func (_m *MockClassIndexCheck) VectorizeClassName() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VectorizeClassName")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassIndexCheck_VectorizeClassName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorizeClassName'
type MockClassIndexCheck_VectorizeClassName_Call struct {
	*mock.Call
}

// VectorizeClassName is a helper method to define mock.On call
func (_e *MockClassIndexCheck_Expecter) VectorizeClassName() *MockClassIndexCheck_VectorizeClassName_Call {
	return &MockClassIndexCheck_VectorizeClassName_Call{Call: _e.mock.On("VectorizeClassName")}
}

func (_c *MockClassIndexCheck_VectorizeClassName_Call) Run(run func()) *MockClassIndexCheck_VectorizeClassName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassIndexCheck_VectorizeClassName_Call) Return(_a0 bool) *MockClassIndexCheck_VectorizeClassName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassIndexCheck_VectorizeClassName_Call) RunAndReturn(run func() bool) *MockClassIndexCheck_VectorizeClassName_Call {
	_c.Call.Return(run)
	return _c
}

// VectorizePropertyName provides a mock function with given fields: propertyName
func (_m *MockClassIndexCheck) VectorizePropertyName(propertyName string) bool {
	ret := _m.Called(propertyName)

	if len(ret) == 0 {
		panic("no return value specified for VectorizePropertyName")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(propertyName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassIndexCheck_VectorizePropertyName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorizePropertyName'
type MockClassIndexCheck_VectorizePropertyName_Call struct {
	*mock.Call
}

// VectorizePropertyName is a helper method to define mock.On call
//   - propertyName string
func (_e *MockClassIndexCheck_Expecter) VectorizePropertyName(propertyName interface{}) *MockClassIndexCheck_VectorizePropertyName_Call {
	return &MockClassIndexCheck_VectorizePropertyName_Call{Call: _e.mock.On("VectorizePropertyName", propertyName)}
}

func (_c *MockClassIndexCheck_VectorizePropertyName_Call) Run(run func(propertyName string)) *MockClassIndexCheck_VectorizePropertyName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassIndexCheck_VectorizePropertyName_Call) Return(_a0 bool) *MockClassIndexCheck_VectorizePropertyName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassIndexCheck_VectorizePropertyName_Call) RunAndReturn(run func(string) bool) *MockClassIndexCheck_VectorizePropertyName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClassIndexCheck creates a new instance of MockClassIndexCheck. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClassIndexCheck(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClassIndexCheck {
	mock := &MockClassIndexCheck{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
