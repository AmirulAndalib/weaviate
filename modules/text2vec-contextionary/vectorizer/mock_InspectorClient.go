//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package vectorizer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/modules/text2vec-contextionary/additional/models"
)

// MockInspectorClient is an autogenerated mock type for the InspectorClient type
type MockInspectorClient struct {
	mock.Mock
}

type MockInspectorClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInspectorClient) EXPECT() *MockInspectorClient_Expecter {
	return &MockInspectorClient_Expecter{mock: &_m.Mock}
}

// IsWordPresent provides a mock function with given fields: ctx, word
func (_m *MockInspectorClient) IsWordPresent(ctx context.Context, word string) (bool, error) {
	ret := _m.Called(ctx, word)

	if len(ret) == 0 {
		panic("no return value specified for IsWordPresent")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, word)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInspectorClient_IsWordPresent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWordPresent'
type MockInspectorClient_IsWordPresent_Call struct {
	*mock.Call
}

// IsWordPresent is a helper method to define mock.On call
//   - ctx context.Context
//   - word string
func (_e *MockInspectorClient_Expecter) IsWordPresent(ctx interface{}, word interface{}) *MockInspectorClient_IsWordPresent_Call {
	return &MockInspectorClient_IsWordPresent_Call{Call: _e.mock.On("IsWordPresent", ctx, word)}
}

func (_c *MockInspectorClient_IsWordPresent_Call) Run(run func(ctx context.Context, word string)) *MockInspectorClient_IsWordPresent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInspectorClient_IsWordPresent_Call) Return(_a0 bool, _a1 error) *MockInspectorClient_IsWordPresent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInspectorClient_IsWordPresent_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockInspectorClient_IsWordPresent_Call {
	_c.Call.Return(run)
	return _c
}

// NearestWordsByVector provides a mock function with given fields: ctx, vector, n, k
func (_m *MockInspectorClient) NearestWordsByVector(ctx context.Context, vector []float32, n int, k int) ([]string, []float32, error) {
	ret := _m.Called(ctx, vector, n, k)

	if len(ret) == 0 {
		panic("no return value specified for NearestWordsByVector")
	}

	var r0 []string
	var r1 []float32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []float32, int, int) ([]string, []float32, error)); ok {
		return rf(ctx, vector, n, k)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []float32, int, int) []string); ok {
		r0 = rf(ctx, vector, n, k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []float32, int, int) []float32); ok {
		r1 = rf(ctx, vector, n, k)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float32)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []float32, int, int) error); ok {
		r2 = rf(ctx, vector, n, k)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockInspectorClient_NearestWordsByVector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NearestWordsByVector'
type MockInspectorClient_NearestWordsByVector_Call struct {
	*mock.Call
}

// NearestWordsByVector is a helper method to define mock.On call
//   - ctx context.Context
//   - vector []float32
//   - n int
//   - k int
func (_e *MockInspectorClient_Expecter) NearestWordsByVector(ctx interface{}, vector interface{}, n interface{}, k interface{}) *MockInspectorClient_NearestWordsByVector_Call {
	return &MockInspectorClient_NearestWordsByVector_Call{Call: _e.mock.On("NearestWordsByVector", ctx, vector, n, k)}
}

func (_c *MockInspectorClient_NearestWordsByVector_Call) Run(run func(ctx context.Context, vector []float32, n int, k int)) *MockInspectorClient_NearestWordsByVector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]float32), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockInspectorClient_NearestWordsByVector_Call) Return(_a0 []string, _a1 []float32, _a2 error) *MockInspectorClient_NearestWordsByVector_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockInspectorClient_NearestWordsByVector_Call) RunAndReturn(run func(context.Context, []float32, int, int) ([]string, []float32, error)) *MockInspectorClient_NearestWordsByVector_Call {
	_c.Call.Return(run)
	return _c
}

// VectorForCorpi provides a mock function with given fields: ctx, words, overrides
func (_m *MockInspectorClient) VectorForCorpi(ctx context.Context, words []string, overrides map[string]string) ([]float32, []models.InterpretationSource, error) {
	ret := _m.Called(ctx, words, overrides)

	if len(ret) == 0 {
		panic("no return value specified for VectorForCorpi")
	}

	var r0 []float32
	var r1 []models.InterpretationSource
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) ([]float32, []models.InterpretationSource, error)); ok {
		return rf(ctx, words, overrides)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) []float32); ok {
		r0 = rf(ctx, words, overrides)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, map[string]string) []models.InterpretationSource); ok {
		r1 = rf(ctx, words, overrides)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]models.InterpretationSource)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string, map[string]string) error); ok {
		r2 = rf(ctx, words, overrides)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockInspectorClient_VectorForCorpi_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorForCorpi'
type MockInspectorClient_VectorForCorpi_Call struct {
	*mock.Call
}

// VectorForCorpi is a helper method to define mock.On call
//   - ctx context.Context
//   - words []string
//   - overrides map[string]string
func (_e *MockInspectorClient_Expecter) VectorForCorpi(ctx interface{}, words interface{}, overrides interface{}) *MockInspectorClient_VectorForCorpi_Call {
	return &MockInspectorClient_VectorForCorpi_Call{Call: _e.mock.On("VectorForCorpi", ctx, words, overrides)}
}

func (_c *MockInspectorClient_VectorForCorpi_Call) Run(run func(ctx context.Context, words []string, overrides map[string]string)) *MockInspectorClient_VectorForCorpi_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockInspectorClient_VectorForCorpi_Call) Return(_a0 []float32, _a1 []models.InterpretationSource, _a2 error) *MockInspectorClient_VectorForCorpi_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockInspectorClient_VectorForCorpi_Call) RunAndReturn(run func(context.Context, []string, map[string]string) ([]float32, []models.InterpretationSource, error)) *MockInspectorClient_VectorForCorpi_Call {
	_c.Call.Return(run)
	return _c
}

// VectorForWord provides a mock function with given fields: ctx, word
func (_m *MockInspectorClient) VectorForWord(ctx context.Context, word string) ([]float32, error) {
	ret := _m.Called(ctx, word)

	if len(ret) == 0 {
		panic("no return value specified for VectorForWord")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]float32, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []float32); ok {
		r0 = rf(ctx, word)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInspectorClient_VectorForWord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorForWord'
type MockInspectorClient_VectorForWord_Call struct {
	*mock.Call
}

// VectorForWord is a helper method to define mock.On call
//   - ctx context.Context
//   - word string
func (_e *MockInspectorClient_Expecter) VectorForWord(ctx interface{}, word interface{}) *MockInspectorClient_VectorForWord_Call {
	return &MockInspectorClient_VectorForWord_Call{Call: _e.mock.On("VectorForWord", ctx, word)}
}

func (_c *MockInspectorClient_VectorForWord_Call) Run(run func(ctx context.Context, word string)) *MockInspectorClient_VectorForWord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInspectorClient_VectorForWord_Call) Return(_a0 []float32, _a1 error) *MockInspectorClient_VectorForWord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInspectorClient_VectorForWord_Call) RunAndReturn(run func(context.Context, string) ([]float32, error)) *MockInspectorClient_VectorForWord_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInspectorClient creates a new instance of MockInspectorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInspectorClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInspectorClient {
	mock := &MockInspectorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
