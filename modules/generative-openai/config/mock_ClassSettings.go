//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package config

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"
)

// MockClassSettings is an autogenerated mock type for the ClassSettings type
type MockClassSettings struct {
	mock.Mock
}

type MockClassSettings_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClassSettings) EXPECT() *MockClassSettings_Expecter {
	return &MockClassSettings_Expecter{mock: &_m.Mock}
}

// ApiVersion provides a mock function with given fields:
func (_m *MockClassSettings) ApiVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ApiVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassSettings_ApiVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApiVersion'
type MockClassSettings_ApiVersion_Call struct {
	*mock.Call
}

// ApiVersion is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) ApiVersion() *MockClassSettings_ApiVersion_Call {
	return &MockClassSettings_ApiVersion_Call{Call: _e.mock.On("ApiVersion")}
}

func (_c *MockClassSettings_ApiVersion_Call) Run(run func()) *MockClassSettings_ApiVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_ApiVersion_Call) Return(_a0 string) *MockClassSettings_ApiVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_ApiVersion_Call) RunAndReturn(run func() string) *MockClassSettings_ApiVersion_Call {
	_c.Call.Return(run)
	return _c
}

// BaseURL provides a mock function with given fields:
func (_m *MockClassSettings) BaseURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BaseURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassSettings_BaseURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseURL'
type MockClassSettings_BaseURL_Call struct {
	*mock.Call
}

// BaseURL is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) BaseURL() *MockClassSettings_BaseURL_Call {
	return &MockClassSettings_BaseURL_Call{Call: _e.mock.On("BaseURL")}
}

func (_c *MockClassSettings_BaseURL_Call) Run(run func()) *MockClassSettings_BaseURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_BaseURL_Call) Return(_a0 string) *MockClassSettings_BaseURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_BaseURL_Call) RunAndReturn(run func() string) *MockClassSettings_BaseURL_Call {
	_c.Call.Return(run)
	return _c
}

// DeploymentID provides a mock function with given fields:
func (_m *MockClassSettings) DeploymentID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeploymentID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassSettings_DeploymentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeploymentID'
type MockClassSettings_DeploymentID_Call struct {
	*mock.Call
}

// DeploymentID is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) DeploymentID() *MockClassSettings_DeploymentID_Call {
	return &MockClassSettings_DeploymentID_Call{Call: _e.mock.On("DeploymentID")}
}

func (_c *MockClassSettings_DeploymentID_Call) Run(run func()) *MockClassSettings_DeploymentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_DeploymentID_Call) Return(_a0 string) *MockClassSettings_DeploymentID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_DeploymentID_Call) RunAndReturn(run func() string) *MockClassSettings_DeploymentID_Call {
	_c.Call.Return(run)
	return _c
}

// FrequencyPenalty provides a mock function with given fields:
func (_m *MockClassSettings) FrequencyPenalty() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FrequencyPenalty")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockClassSettings_FrequencyPenalty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrequencyPenalty'
type MockClassSettings_FrequencyPenalty_Call struct {
	*mock.Call
}

// FrequencyPenalty is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) FrequencyPenalty() *MockClassSettings_FrequencyPenalty_Call {
	return &MockClassSettings_FrequencyPenalty_Call{Call: _e.mock.On("FrequencyPenalty")}
}

func (_c *MockClassSettings_FrequencyPenalty_Call) Run(run func()) *MockClassSettings_FrequencyPenalty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_FrequencyPenalty_Call) Return(_a0 float64) *MockClassSettings_FrequencyPenalty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_FrequencyPenalty_Call) RunAndReturn(run func() float64) *MockClassSettings_FrequencyPenalty_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaxTokensForModel provides a mock function with given fields: model
func (_m *MockClassSettings) GetMaxTokensForModel(model string) float64 {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for GetMaxTokensForModel")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockClassSettings_GetMaxTokensForModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxTokensForModel'
type MockClassSettings_GetMaxTokensForModel_Call struct {
	*mock.Call
}

// GetMaxTokensForModel is a helper method to define mock.On call
//   - model string
func (_e *MockClassSettings_Expecter) GetMaxTokensForModel(model interface{}) *MockClassSettings_GetMaxTokensForModel_Call {
	return &MockClassSettings_GetMaxTokensForModel_Call{Call: _e.mock.On("GetMaxTokensForModel", model)}
}

func (_c *MockClassSettings_GetMaxTokensForModel_Call) Run(run func(model string)) *MockClassSettings_GetMaxTokensForModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClassSettings_GetMaxTokensForModel_Call) Return(_a0 float64) *MockClassSettings_GetMaxTokensForModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_GetMaxTokensForModel_Call) RunAndReturn(run func(string) float64) *MockClassSettings_GetMaxTokensForModel_Call {
	_c.Call.Return(run)
	return _c
}

// IsAzure provides a mock function with given fields:
func (_m *MockClassSettings) IsAzure() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAzure")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassSettings_IsAzure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAzure'
type MockClassSettings_IsAzure_Call struct {
	*mock.Call
}

// IsAzure is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) IsAzure() *MockClassSettings_IsAzure_Call {
	return &MockClassSettings_IsAzure_Call{Call: _e.mock.On("IsAzure")}
}

func (_c *MockClassSettings_IsAzure_Call) Run(run func()) *MockClassSettings_IsAzure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_IsAzure_Call) Return(_a0 bool) *MockClassSettings_IsAzure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_IsAzure_Call) RunAndReturn(run func() bool) *MockClassSettings_IsAzure_Call {
	_c.Call.Return(run)
	return _c
}

// IsLegacy provides a mock function with given fields:
func (_m *MockClassSettings) IsLegacy() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsLegacy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClassSettings_IsLegacy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLegacy'
type MockClassSettings_IsLegacy_Call struct {
	*mock.Call
}

// IsLegacy is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) IsLegacy() *MockClassSettings_IsLegacy_Call {
	return &MockClassSettings_IsLegacy_Call{Call: _e.mock.On("IsLegacy")}
}

func (_c *MockClassSettings_IsLegacy_Call) Run(run func()) *MockClassSettings_IsLegacy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_IsLegacy_Call) Return(_a0 bool) *MockClassSettings_IsLegacy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_IsLegacy_Call) RunAndReturn(run func() bool) *MockClassSettings_IsLegacy_Call {
	_c.Call.Return(run)
	return _c
}

// MaxTokens provides a mock function with given fields:
func (_m *MockClassSettings) MaxTokens() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxTokens")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockClassSettings_MaxTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxTokens'
type MockClassSettings_MaxTokens_Call struct {
	*mock.Call
}

// MaxTokens is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) MaxTokens() *MockClassSettings_MaxTokens_Call {
	return &MockClassSettings_MaxTokens_Call{Call: _e.mock.On("MaxTokens")}
}

func (_c *MockClassSettings_MaxTokens_Call) Run(run func()) *MockClassSettings_MaxTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_MaxTokens_Call) Return(_a0 float64) *MockClassSettings_MaxTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_MaxTokens_Call) RunAndReturn(run func() float64) *MockClassSettings_MaxTokens_Call {
	_c.Call.Return(run)
	return _c
}

// Model provides a mock function with given fields:
func (_m *MockClassSettings) Model() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Model")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassSettings_Model_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Model'
type MockClassSettings_Model_Call struct {
	*mock.Call
}

// Model is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) Model() *MockClassSettings_Model_Call {
	return &MockClassSettings_Model_Call{Call: _e.mock.On("Model")}
}

func (_c *MockClassSettings_Model_Call) Run(run func()) *MockClassSettings_Model_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_Model_Call) Return(_a0 string) *MockClassSettings_Model_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_Model_Call) RunAndReturn(run func() string) *MockClassSettings_Model_Call {
	_c.Call.Return(run)
	return _c
}

// PresencePenalty provides a mock function with given fields:
func (_m *MockClassSettings) PresencePenalty() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PresencePenalty")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockClassSettings_PresencePenalty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PresencePenalty'
type MockClassSettings_PresencePenalty_Call struct {
	*mock.Call
}

// PresencePenalty is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) PresencePenalty() *MockClassSettings_PresencePenalty_Call {
	return &MockClassSettings_PresencePenalty_Call{Call: _e.mock.On("PresencePenalty")}
}

func (_c *MockClassSettings_PresencePenalty_Call) Run(run func()) *MockClassSettings_PresencePenalty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_PresencePenalty_Call) Return(_a0 float64) *MockClassSettings_PresencePenalty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_PresencePenalty_Call) RunAndReturn(run func() float64) *MockClassSettings_PresencePenalty_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceName provides a mock function with given fields:
func (_m *MockClassSettings) ResourceName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResourceName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassSettings_ResourceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceName'
type MockClassSettings_ResourceName_Call struct {
	*mock.Call
}

// ResourceName is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) ResourceName() *MockClassSettings_ResourceName_Call {
	return &MockClassSettings_ResourceName_Call{Call: _e.mock.On("ResourceName")}
}

func (_c *MockClassSettings_ResourceName_Call) Run(run func()) *MockClassSettings_ResourceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_ResourceName_Call) Return(_a0 string) *MockClassSettings_ResourceName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_ResourceName_Call) RunAndReturn(run func() string) *MockClassSettings_ResourceName_Call {
	_c.Call.Return(run)
	return _c
}

// Temperature provides a mock function with given fields:
func (_m *MockClassSettings) Temperature() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Temperature")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockClassSettings_Temperature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Temperature'
type MockClassSettings_Temperature_Call struct {
	*mock.Call
}

// Temperature is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) Temperature() *MockClassSettings_Temperature_Call {
	return &MockClassSettings_Temperature_Call{Call: _e.mock.On("Temperature")}
}

func (_c *MockClassSettings_Temperature_Call) Run(run func()) *MockClassSettings_Temperature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_Temperature_Call) Return(_a0 float64) *MockClassSettings_Temperature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_Temperature_Call) RunAndReturn(run func() float64) *MockClassSettings_Temperature_Call {
	_c.Call.Return(run)
	return _c
}

// TopP provides a mock function with given fields:
func (_m *MockClassSettings) TopP() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TopP")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockClassSettings_TopP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopP'
type MockClassSettings_TopP_Call struct {
	*mock.Call
}

// TopP is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) TopP() *MockClassSettings_TopP_Call {
	return &MockClassSettings_TopP_Call{Call: _e.mock.On("TopP")}
}

func (_c *MockClassSettings_TopP_Call) Run(run func()) *MockClassSettings_TopP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_TopP_Call) Return(_a0 float64) *MockClassSettings_TopP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_TopP_Call) RunAndReturn(run func() float64) *MockClassSettings_TopP_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: class
func (_m *MockClassSettings) Validate(class *models.Class) error {
	ret := _m.Called(class)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Class) error); ok {
		r0 = rf(class)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClassSettings_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockClassSettings_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - class *models.Class
func (_e *MockClassSettings_Expecter) Validate(class interface{}) *MockClassSettings_Validate_Call {
	return &MockClassSettings_Validate_Call{Call: _e.mock.On("Validate", class)}
}

func (_c *MockClassSettings_Validate_Call) Run(run func(class *models.Class)) *MockClassSettings_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Class))
	})
	return _c
}

func (_c *MockClassSettings_Validate_Call) Return(_a0 error) *MockClassSettings_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_Validate_Call) RunAndReturn(run func(*models.Class) error) *MockClassSettings_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClassSettings creates a new instance of MockClassSettings. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClassSettings(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClassSettings {
	mock := &MockClassSettings{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
