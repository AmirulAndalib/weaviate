//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package config

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"
)

// MockClassSettings is an autogenerated mock type for the ClassSettings type
type MockClassSettings struct {
	mock.Mock
}

type MockClassSettings_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClassSettings) EXPECT() *MockClassSettings_Expecter {
	return &MockClassSettings_Expecter{mock: &_m.Mock}
}

// ApiEndpoint provides a mock function with given fields:
func (_m *MockClassSettings) ApiEndpoint() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ApiEndpoint")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassSettings_ApiEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApiEndpoint'
type MockClassSettings_ApiEndpoint_Call struct {
	*mock.Call
}

// ApiEndpoint is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) ApiEndpoint() *MockClassSettings_ApiEndpoint_Call {
	return &MockClassSettings_ApiEndpoint_Call{Call: _e.mock.On("ApiEndpoint")}
}

func (_c *MockClassSettings_ApiEndpoint_Call) Run(run func()) *MockClassSettings_ApiEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_ApiEndpoint_Call) Return(_a0 string) *MockClassSettings_ApiEndpoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_ApiEndpoint_Call) RunAndReturn(run func() string) *MockClassSettings_ApiEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// EndpointID provides a mock function with given fields:
func (_m *MockClassSettings) EndpointID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EndpointID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassSettings_EndpointID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndpointID'
type MockClassSettings_EndpointID_Call struct {
	*mock.Call
}

// EndpointID is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) EndpointID() *MockClassSettings_EndpointID_Call {
	return &MockClassSettings_EndpointID_Call{Call: _e.mock.On("EndpointID")}
}

func (_c *MockClassSettings_EndpointID_Call) Run(run func()) *MockClassSettings_EndpointID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_EndpointID_Call) Return(_a0 string) *MockClassSettings_EndpointID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_EndpointID_Call) RunAndReturn(run func() string) *MockClassSettings_EndpointID_Call {
	_c.Call.Return(run)
	return _c
}

// ModelID provides a mock function with given fields:
func (_m *MockClassSettings) ModelID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ModelID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassSettings_ModelID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModelID'
type MockClassSettings_ModelID_Call struct {
	*mock.Call
}

// ModelID is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) ModelID() *MockClassSettings_ModelID_Call {
	return &MockClassSettings_ModelID_Call{Call: _e.mock.On("ModelID")}
}

func (_c *MockClassSettings_ModelID_Call) Run(run func()) *MockClassSettings_ModelID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_ModelID_Call) Return(_a0 string) *MockClassSettings_ModelID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_ModelID_Call) RunAndReturn(run func() string) *MockClassSettings_ModelID_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectID provides a mock function with given fields:
func (_m *MockClassSettings) ProjectID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProjectID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassSettings_ProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectID'
type MockClassSettings_ProjectID_Call struct {
	*mock.Call
}

// ProjectID is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) ProjectID() *MockClassSettings_ProjectID_Call {
	return &MockClassSettings_ProjectID_Call{Call: _e.mock.On("ProjectID")}
}

func (_c *MockClassSettings_ProjectID_Call) Run(run func()) *MockClassSettings_ProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_ProjectID_Call) Return(_a0 string) *MockClassSettings_ProjectID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_ProjectID_Call) RunAndReturn(run func() string) *MockClassSettings_ProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// Region provides a mock function with given fields:
func (_m *MockClassSettings) Region() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Region")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClassSettings_Region_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Region'
type MockClassSettings_Region_Call struct {
	*mock.Call
}

// Region is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) Region() *MockClassSettings_Region_Call {
	return &MockClassSettings_Region_Call{Call: _e.mock.On("Region")}
}

func (_c *MockClassSettings_Region_Call) Run(run func()) *MockClassSettings_Region_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_Region_Call) Return(_a0 string) *MockClassSettings_Region_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_Region_Call) RunAndReturn(run func() string) *MockClassSettings_Region_Call {
	_c.Call.Return(run)
	return _c
}

// Temperature provides a mock function with given fields:
func (_m *MockClassSettings) Temperature() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Temperature")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockClassSettings_Temperature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Temperature'
type MockClassSettings_Temperature_Call struct {
	*mock.Call
}

// Temperature is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) Temperature() *MockClassSettings_Temperature_Call {
	return &MockClassSettings_Temperature_Call{Call: _e.mock.On("Temperature")}
}

func (_c *MockClassSettings_Temperature_Call) Run(run func()) *MockClassSettings_Temperature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_Temperature_Call) Return(_a0 float64) *MockClassSettings_Temperature_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_Temperature_Call) RunAndReturn(run func() float64) *MockClassSettings_Temperature_Call {
	_c.Call.Return(run)
	return _c
}

// TokenLimit provides a mock function with given fields:
func (_m *MockClassSettings) TokenLimit() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TokenLimit")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockClassSettings_TokenLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenLimit'
type MockClassSettings_TokenLimit_Call struct {
	*mock.Call
}

// TokenLimit is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) TokenLimit() *MockClassSettings_TokenLimit_Call {
	return &MockClassSettings_TokenLimit_Call{Call: _e.mock.On("TokenLimit")}
}

func (_c *MockClassSettings_TokenLimit_Call) Run(run func()) *MockClassSettings_TokenLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_TokenLimit_Call) Return(_a0 int) *MockClassSettings_TokenLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_TokenLimit_Call) RunAndReturn(run func() int) *MockClassSettings_TokenLimit_Call {
	_c.Call.Return(run)
	return _c
}

// TopK provides a mock function with given fields:
func (_m *MockClassSettings) TopK() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TopK")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockClassSettings_TopK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopK'
type MockClassSettings_TopK_Call struct {
	*mock.Call
}

// TopK is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) TopK() *MockClassSettings_TopK_Call {
	return &MockClassSettings_TopK_Call{Call: _e.mock.On("TopK")}
}

func (_c *MockClassSettings_TopK_Call) Run(run func()) *MockClassSettings_TopK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_TopK_Call) Return(_a0 int) *MockClassSettings_TopK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_TopK_Call) RunAndReturn(run func() int) *MockClassSettings_TopK_Call {
	_c.Call.Return(run)
	return _c
}

// TopP provides a mock function with given fields:
func (_m *MockClassSettings) TopP() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TopP")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockClassSettings_TopP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopP'
type MockClassSettings_TopP_Call struct {
	*mock.Call
}

// TopP is a helper method to define mock.On call
func (_e *MockClassSettings_Expecter) TopP() *MockClassSettings_TopP_Call {
	return &MockClassSettings_TopP_Call{Call: _e.mock.On("TopP")}
}

func (_c *MockClassSettings_TopP_Call) Run(run func()) *MockClassSettings_TopP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClassSettings_TopP_Call) Return(_a0 float64) *MockClassSettings_TopP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_TopP_Call) RunAndReturn(run func() float64) *MockClassSettings_TopP_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: class
func (_m *MockClassSettings) Validate(class *models.Class) error {
	ret := _m.Called(class)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Class) error); ok {
		r0 = rf(class)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClassSettings_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockClassSettings_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - class *models.Class
func (_e *MockClassSettings_Expecter) Validate(class interface{}) *MockClassSettings_Validate_Call {
	return &MockClassSettings_Validate_Call{Call: _e.mock.On("Validate", class)}
}

func (_c *MockClassSettings_Validate_Call) Run(run func(class *models.Class)) *MockClassSettings_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Class))
	})
	return _c
}

func (_c *MockClassSettings_Validate_Call) Return(_a0 error) *MockClassSettings_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClassSettings_Validate_Call) RunAndReturn(run func(*models.Class) error) *MockClassSettings_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClassSettings creates a new instance of MockClassSettings. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClassSettings(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClassSettings {
	mock := &MockClassSettings{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
