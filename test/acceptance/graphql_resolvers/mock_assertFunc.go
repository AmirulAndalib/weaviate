//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package test

import mock "github.com/stretchr/testify/mock"

// MockassertFunc is an autogenerated mock type for the assertFunc type
type MockassertFunc struct {
	mock.Mock
}

type MockassertFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockassertFunc) EXPECT() *MockassertFunc_Expecter {
	return &MockassertFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: response
func (_m *MockassertFunc) Execute(response map[string]interface{}) bool {
	ret := _m.Called(response)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[string]interface{}) bool); ok {
		r0 = rf(response)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockassertFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockassertFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - response map[string]interface{}
func (_e *MockassertFunc_Expecter) Execute(response interface{}) *MockassertFunc_Execute_Call {
	return &MockassertFunc_Execute_Call{Call: _e.mock.On("Execute", response)}
}

func (_c *MockassertFunc_Execute_Call) Run(run func(response map[string]interface{})) *MockassertFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockassertFunc_Execute_Call) Return(_a0 bool) *MockassertFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockassertFunc_Execute_Call) RunAndReturn(run func(map[string]interface{}) bool) *MockassertFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockassertFunc creates a new instance of MockassertFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockassertFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockassertFunc {
	mock := &MockassertFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
