//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package batch

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// BatchObjectsCreate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BatchObjectsCreate(params *BatchObjectsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BatchObjectsCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchObjectsCreate")
	}

	var r0 *BatchObjectsCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*BatchObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BatchObjectsCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*BatchObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *BatchObjectsCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchObjectsCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*BatchObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BatchObjectsCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchObjectsCreate'
type MockClientService_BatchObjectsCreate_Call struct {
	*mock.Call
}

// BatchObjectsCreate is a helper method to define mock.On call
//   - params *BatchObjectsCreateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) BatchObjectsCreate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BatchObjectsCreate_Call {
	return &MockClientService_BatchObjectsCreate_Call{Call: _e.mock.On("BatchObjectsCreate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BatchObjectsCreate_Call) Run(run func(params *BatchObjectsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_BatchObjectsCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*BatchObjectsCreateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BatchObjectsCreate_Call) Return(_a0 *BatchObjectsCreateOK, _a1 error) *MockClientService_BatchObjectsCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BatchObjectsCreate_Call) RunAndReturn(run func(*BatchObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BatchObjectsCreateOK, error)) *MockClientService_BatchObjectsCreate_Call {
	_c.Call.Return(run)
	return _c
}

// BatchObjectsDelete provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BatchObjectsDelete(params *BatchObjectsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BatchObjectsDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchObjectsDelete")
	}

	var r0 *BatchObjectsDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*BatchObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BatchObjectsDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*BatchObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) *BatchObjectsDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchObjectsDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*BatchObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BatchObjectsDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchObjectsDelete'
type MockClientService_BatchObjectsDelete_Call struct {
	*mock.Call
}

// BatchObjectsDelete is a helper method to define mock.On call
//   - params *BatchObjectsDeleteParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) BatchObjectsDelete(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BatchObjectsDelete_Call {
	return &MockClientService_BatchObjectsDelete_Call{Call: _e.mock.On("BatchObjectsDelete",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BatchObjectsDelete_Call) Run(run func(params *BatchObjectsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_BatchObjectsDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*BatchObjectsDeleteParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BatchObjectsDelete_Call) Return(_a0 *BatchObjectsDeleteOK, _a1 error) *MockClientService_BatchObjectsDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BatchObjectsDelete_Call) RunAndReturn(run func(*BatchObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BatchObjectsDeleteOK, error)) *MockClientService_BatchObjectsDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BatchReferencesCreate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BatchReferencesCreate(params *BatchReferencesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BatchReferencesCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchReferencesCreate")
	}

	var r0 *BatchReferencesCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*BatchReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BatchReferencesCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*BatchReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *BatchReferencesCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BatchReferencesCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*BatchReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BatchReferencesCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchReferencesCreate'
type MockClientService_BatchReferencesCreate_Call struct {
	*mock.Call
}

// BatchReferencesCreate is a helper method to define mock.On call
//   - params *BatchReferencesCreateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) BatchReferencesCreate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BatchReferencesCreate_Call {
	return &MockClientService_BatchReferencesCreate_Call{Call: _e.mock.On("BatchReferencesCreate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BatchReferencesCreate_Call) Run(run func(params *BatchReferencesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_BatchReferencesCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*BatchReferencesCreateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BatchReferencesCreate_Call) Return(_a0 *BatchReferencesCreateOK, _a1 error) *MockClientService_BatchReferencesCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BatchReferencesCreate_Call) RunAndReturn(run func(*BatchReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BatchReferencesCreateOK, error)) *MockClientService_BatchReferencesCreate_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
