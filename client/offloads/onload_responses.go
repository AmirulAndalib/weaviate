//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package offloads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// OnloadReader is a Reader for the Onload structure.
type OnloadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OnloadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOnloadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewOnloadUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOnloadForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOnloadNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewOnloadUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOnloadInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOnloadOK creates a OnloadOK with default headers values
func NewOnloadOK() *OnloadOK {
	return &OnloadOK{}
}

/*
OnloadOK describes a response with status code 200, with default header values.

Backup restoration process successfully started.
*/
type OnloadOK struct {
	Payload *models.OnloadResponse
}

// IsSuccess returns true when this onload o k response has a 2xx status code
func (o *OnloadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this onload o k response has a 3xx status code
func (o *OnloadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this onload o k response has a 4xx status code
func (o *OnloadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this onload o k response has a 5xx status code
func (o *OnloadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this onload o k response a status code equal to that given
func (o *OnloadOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the onload o k response
func (o *OnloadOK) Code() int {
	return 200
}

func (o *OnloadOK) Error() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadOK  %+v", 200, o.Payload)
}

func (o *OnloadOK) String() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadOK  %+v", 200, o.Payload)
}

func (o *OnloadOK) GetPayload() *models.OnloadResponse {
	return o.Payload
}

func (o *OnloadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OnloadResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOnloadUnauthorized creates a OnloadUnauthorized with default headers values
func NewOnloadUnauthorized() *OnloadUnauthorized {
	return &OnloadUnauthorized{}
}

/*
OnloadUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type OnloadUnauthorized struct {
}

// IsSuccess returns true when this onload unauthorized response has a 2xx status code
func (o *OnloadUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this onload unauthorized response has a 3xx status code
func (o *OnloadUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this onload unauthorized response has a 4xx status code
func (o *OnloadUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this onload unauthorized response has a 5xx status code
func (o *OnloadUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this onload unauthorized response a status code equal to that given
func (o *OnloadUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the onload unauthorized response
func (o *OnloadUnauthorized) Code() int {
	return 401
}

func (o *OnloadUnauthorized) Error() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadUnauthorized ", 401)
}

func (o *OnloadUnauthorized) String() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadUnauthorized ", 401)
}

func (o *OnloadUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOnloadForbidden creates a OnloadForbidden with default headers values
func NewOnloadForbidden() *OnloadForbidden {
	return &OnloadForbidden{}
}

/*
OnloadForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type OnloadForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this onload forbidden response has a 2xx status code
func (o *OnloadForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this onload forbidden response has a 3xx status code
func (o *OnloadForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this onload forbidden response has a 4xx status code
func (o *OnloadForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this onload forbidden response has a 5xx status code
func (o *OnloadForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this onload forbidden response a status code equal to that given
func (o *OnloadForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the onload forbidden response
func (o *OnloadForbidden) Code() int {
	return 403
}

func (o *OnloadForbidden) Error() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadForbidden  %+v", 403, o.Payload)
}

func (o *OnloadForbidden) String() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadForbidden  %+v", 403, o.Payload)
}

func (o *OnloadForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OnloadForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOnloadNotFound creates a OnloadNotFound with default headers values
func NewOnloadNotFound() *OnloadNotFound {
	return &OnloadNotFound{}
}

/*
OnloadNotFound describes a response with status code 404, with default header values.

Not Found - offloaded tenant does not exist
*/
type OnloadNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this onload not found response has a 2xx status code
func (o *OnloadNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this onload not found response has a 3xx status code
func (o *OnloadNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this onload not found response has a 4xx status code
func (o *OnloadNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this onload not found response has a 5xx status code
func (o *OnloadNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this onload not found response a status code equal to that given
func (o *OnloadNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the onload not found response
func (o *OnloadNotFound) Code() int {
	return 404
}

func (o *OnloadNotFound) Error() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadNotFound  %+v", 404, o.Payload)
}

func (o *OnloadNotFound) String() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadNotFound  %+v", 404, o.Payload)
}

func (o *OnloadNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OnloadNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOnloadUnprocessableEntity creates a OnloadUnprocessableEntity with default headers values
func NewOnloadUnprocessableEntity() *OnloadUnprocessableEntity {
	return &OnloadUnprocessableEntity{}
}

/*
OnloadUnprocessableEntity describes a response with status code 422, with default header values.

Invalid onload attempt.
*/
type OnloadUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this onload unprocessable entity response has a 2xx status code
func (o *OnloadUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this onload unprocessable entity response has a 3xx status code
func (o *OnloadUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this onload unprocessable entity response has a 4xx status code
func (o *OnloadUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this onload unprocessable entity response has a 5xx status code
func (o *OnloadUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this onload unprocessable entity response a status code equal to that given
func (o *OnloadUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the onload unprocessable entity response
func (o *OnloadUnprocessableEntity) Code() int {
	return 422
}

func (o *OnloadUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *OnloadUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *OnloadUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OnloadUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOnloadInternalServerError creates a OnloadInternalServerError with default headers values
func NewOnloadInternalServerError() *OnloadInternalServerError {
	return &OnloadInternalServerError{}
}

/*
OnloadInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type OnloadInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this onload internal server error response has a 2xx status code
func (o *OnloadInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this onload internal server error response has a 3xx status code
func (o *OnloadInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this onload internal server error response has a 4xx status code
func (o *OnloadInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this onload internal server error response has a 5xx status code
func (o *OnloadInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this onload internal server error response a status code equal to that given
func (o *OnloadInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the onload internal server error response
func (o *OnloadInternalServerError) Code() int {
	return 500
}

func (o *OnloadInternalServerError) Error() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadInternalServerError  %+v", 500, o.Payload)
}

func (o *OnloadInternalServerError) String() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}/onload][%d] onloadInternalServerError  %+v", 500, o.Payload)
}

func (o *OnloadInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OnloadInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
