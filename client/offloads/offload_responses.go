//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package offloads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// OffloadReader is a Reader for the Offload structure.
type OffloadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OffloadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOffloadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewOffloadUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOffloadForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewOffloadUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOffloadInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOffloadOK creates a OffloadOK with default headers values
func NewOffloadOK() *OffloadOK {
	return &OffloadOK{}
}

/*
OffloadOK describes a response with status code 200, with default header values.

Backup create process successfully started.
*/
type OffloadOK struct {
	Payload *models.OffloadResponse
}

// IsSuccess returns true when this offload o k response has a 2xx status code
func (o *OffloadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this offload o k response has a 3xx status code
func (o *OffloadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this offload o k response has a 4xx status code
func (o *OffloadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this offload o k response has a 5xx status code
func (o *OffloadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this offload o k response a status code equal to that given
func (o *OffloadOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the offload o k response
func (o *OffloadOK) Code() int {
	return 200
}

func (o *OffloadOK) Error() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}][%d] offloadOK  %+v", 200, o.Payload)
}

func (o *OffloadOK) String() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}][%d] offloadOK  %+v", 200, o.Payload)
}

func (o *OffloadOK) GetPayload() *models.OffloadResponse {
	return o.Payload
}

func (o *OffloadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OffloadResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOffloadUnauthorized creates a OffloadUnauthorized with default headers values
func NewOffloadUnauthorized() *OffloadUnauthorized {
	return &OffloadUnauthorized{}
}

/*
OffloadUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type OffloadUnauthorized struct {
}

// IsSuccess returns true when this offload unauthorized response has a 2xx status code
func (o *OffloadUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this offload unauthorized response has a 3xx status code
func (o *OffloadUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this offload unauthorized response has a 4xx status code
func (o *OffloadUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this offload unauthorized response has a 5xx status code
func (o *OffloadUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this offload unauthorized response a status code equal to that given
func (o *OffloadUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the offload unauthorized response
func (o *OffloadUnauthorized) Code() int {
	return 401
}

func (o *OffloadUnauthorized) Error() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}][%d] offloadUnauthorized ", 401)
}

func (o *OffloadUnauthorized) String() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}][%d] offloadUnauthorized ", 401)
}

func (o *OffloadUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewOffloadForbidden creates a OffloadForbidden with default headers values
func NewOffloadForbidden() *OffloadForbidden {
	return &OffloadForbidden{}
}

/*
OffloadForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type OffloadForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this offload forbidden response has a 2xx status code
func (o *OffloadForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this offload forbidden response has a 3xx status code
func (o *OffloadForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this offload forbidden response has a 4xx status code
func (o *OffloadForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this offload forbidden response has a 5xx status code
func (o *OffloadForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this offload forbidden response a status code equal to that given
func (o *OffloadForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the offload forbidden response
func (o *OffloadForbidden) Code() int {
	return 403
}

func (o *OffloadForbidden) Error() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}][%d] offloadForbidden  %+v", 403, o.Payload)
}

func (o *OffloadForbidden) String() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}][%d] offloadForbidden  %+v", 403, o.Payload)
}

func (o *OffloadForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OffloadForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOffloadUnprocessableEntity creates a OffloadUnprocessableEntity with default headers values
func NewOffloadUnprocessableEntity() *OffloadUnprocessableEntity {
	return &OffloadUnprocessableEntity{}
}

/*
OffloadUnprocessableEntity describes a response with status code 422, with default header values.

Invalid offload attempt.
*/
type OffloadUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this offload unprocessable entity response has a 2xx status code
func (o *OffloadUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this offload unprocessable entity response has a 3xx status code
func (o *OffloadUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this offload unprocessable entity response has a 4xx status code
func (o *OffloadUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this offload unprocessable entity response has a 5xx status code
func (o *OffloadUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this offload unprocessable entity response a status code equal to that given
func (o *OffloadUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the offload unprocessable entity response
func (o *OffloadUnprocessableEntity) Code() int {
	return 422
}

func (o *OffloadUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}][%d] offloadUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *OffloadUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}][%d] offloadUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *OffloadUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OffloadUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOffloadInternalServerError creates a OffloadInternalServerError with default headers values
func NewOffloadInternalServerError() *OffloadInternalServerError {
	return &OffloadInternalServerError{}
}

/*
OffloadInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type OffloadInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this offload internal server error response has a 2xx status code
func (o *OffloadInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this offload internal server error response has a 3xx status code
func (o *OffloadInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this offload internal server error response has a 4xx status code
func (o *OffloadInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this offload internal server error response has a 5xx status code
func (o *OffloadInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this offload internal server error response a status code equal to that given
func (o *OffloadInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the offload internal server error response
func (o *OffloadInternalServerError) Code() int {
	return 500
}

func (o *OffloadInternalServerError) Error() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}][%d] offloadInternalServerError  %+v", 500, o.Payload)
}

func (o *OffloadInternalServerError) String() string {
	return fmt.Sprintf("[POST /offloads/{backend}/{class}][%d] offloadInternalServerError  %+v", 500, o.Payload)
}

func (o *OffloadInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OffloadInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
