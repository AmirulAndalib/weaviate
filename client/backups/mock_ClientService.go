//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package backups

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// BackupsCreate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BackupsCreate(params *BackupsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BackupsCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BackupsCreate")
	}

	var r0 *BackupsCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*BackupsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BackupsCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*BackupsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *BackupsCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BackupsCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*BackupsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BackupsCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupsCreate'
type MockClientService_BackupsCreate_Call struct {
	*mock.Call
}

// BackupsCreate is a helper method to define mock.On call
//   - params *BackupsCreateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) BackupsCreate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BackupsCreate_Call {
	return &MockClientService_BackupsCreate_Call{Call: _e.mock.On("BackupsCreate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BackupsCreate_Call) Run(run func(params *BackupsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_BackupsCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*BackupsCreateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BackupsCreate_Call) Return(_a0 *BackupsCreateOK, _a1 error) *MockClientService_BackupsCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BackupsCreate_Call) RunAndReturn(run func(*BackupsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BackupsCreateOK, error)) *MockClientService_BackupsCreate_Call {
	_c.Call.Return(run)
	return _c
}

// BackupsCreateStatus provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BackupsCreateStatus(params *BackupsCreateStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BackupsCreateStatusOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BackupsCreateStatus")
	}

	var r0 *BackupsCreateStatusOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*BackupsCreateStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BackupsCreateStatusOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*BackupsCreateStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) *BackupsCreateStatusOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BackupsCreateStatusOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*BackupsCreateStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BackupsCreateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupsCreateStatus'
type MockClientService_BackupsCreateStatus_Call struct {
	*mock.Call
}

// BackupsCreateStatus is a helper method to define mock.On call
//   - params *BackupsCreateStatusParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) BackupsCreateStatus(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BackupsCreateStatus_Call {
	return &MockClientService_BackupsCreateStatus_Call{Call: _e.mock.On("BackupsCreateStatus",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BackupsCreateStatus_Call) Run(run func(params *BackupsCreateStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_BackupsCreateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*BackupsCreateStatusParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BackupsCreateStatus_Call) Return(_a0 *BackupsCreateStatusOK, _a1 error) *MockClientService_BackupsCreateStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BackupsCreateStatus_Call) RunAndReturn(run func(*BackupsCreateStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BackupsCreateStatusOK, error)) *MockClientService_BackupsCreateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// BackupsRestore provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BackupsRestore(params *BackupsRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BackupsRestoreOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BackupsRestore")
	}

	var r0 *BackupsRestoreOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*BackupsRestoreParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BackupsRestoreOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*BackupsRestoreParams, runtime.ClientAuthInfoWriter, ...ClientOption) *BackupsRestoreOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BackupsRestoreOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*BackupsRestoreParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BackupsRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupsRestore'
type MockClientService_BackupsRestore_Call struct {
	*mock.Call
}

// BackupsRestore is a helper method to define mock.On call
//   - params *BackupsRestoreParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) BackupsRestore(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BackupsRestore_Call {
	return &MockClientService_BackupsRestore_Call{Call: _e.mock.On("BackupsRestore",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BackupsRestore_Call) Run(run func(params *BackupsRestoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_BackupsRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*BackupsRestoreParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BackupsRestore_Call) Return(_a0 *BackupsRestoreOK, _a1 error) *MockClientService_BackupsRestore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BackupsRestore_Call) RunAndReturn(run func(*BackupsRestoreParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BackupsRestoreOK, error)) *MockClientService_BackupsRestore_Call {
	_c.Call.Return(run)
	return _c
}

// BackupsRestoreStatus provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BackupsRestoreStatus(params *BackupsRestoreStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BackupsRestoreStatusOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BackupsRestoreStatus")
	}

	var r0 *BackupsRestoreStatusOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*BackupsRestoreStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BackupsRestoreStatusOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*BackupsRestoreStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) *BackupsRestoreStatusOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BackupsRestoreStatusOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*BackupsRestoreStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BackupsRestoreStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupsRestoreStatus'
type MockClientService_BackupsRestoreStatus_Call struct {
	*mock.Call
}

// BackupsRestoreStatus is a helper method to define mock.On call
//   - params *BackupsRestoreStatusParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) BackupsRestoreStatus(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BackupsRestoreStatus_Call {
	return &MockClientService_BackupsRestoreStatus_Call{Call: _e.mock.On("BackupsRestoreStatus",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BackupsRestoreStatus_Call) Run(run func(params *BackupsRestoreStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_BackupsRestoreStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*BackupsRestoreStatusParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BackupsRestoreStatus_Call) Return(_a0 *BackupsRestoreStatusOK, _a1 error) *MockClientService_BackupsRestoreStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BackupsRestoreStatus_Call) RunAndReturn(run func(*BackupsRestoreStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*BackupsRestoreStatusOK, error)) *MockClientService_BackupsRestoreStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
