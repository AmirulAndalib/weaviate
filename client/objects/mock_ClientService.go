//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package objects

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// ObjectsClassDelete provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsClassDelete(params *ObjectsClassDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsClassDeleteNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsClassDelete")
	}

	var r0 *ObjectsClassDeleteNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsClassDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassDeleteNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsClassDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsClassDeleteNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsClassDeleteNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsClassDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsClassDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsClassDelete'
type MockClientService_ObjectsClassDelete_Call struct {
	*mock.Call
}

// ObjectsClassDelete is a helper method to define mock.On call
//   - params *ObjectsClassDeleteParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsClassDelete(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsClassDelete_Call {
	return &MockClientService_ObjectsClassDelete_Call{Call: _e.mock.On("ObjectsClassDelete",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsClassDelete_Call) Run(run func(params *ObjectsClassDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsClassDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsClassDeleteParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsClassDelete_Call) Return(_a0 *ObjectsClassDeleteNoContent, _a1 error) *MockClientService_ObjectsClassDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsClassDelete_Call) RunAndReturn(run func(*ObjectsClassDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassDeleteNoContent, error)) *MockClientService_ObjectsClassDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsClassGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsClassGet(params *ObjectsClassGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsClassGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsClassGet")
	}

	var r0 *ObjectsClassGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsClassGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsClassGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsClassGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsClassGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsClassGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsClassGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsClassGet'
type MockClientService_ObjectsClassGet_Call struct {
	*mock.Call
}

// ObjectsClassGet is a helper method to define mock.On call
//   - params *ObjectsClassGetParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsClassGet(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsClassGet_Call {
	return &MockClientService_ObjectsClassGet_Call{Call: _e.mock.On("ObjectsClassGet",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsClassGet_Call) Run(run func(params *ObjectsClassGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsClassGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsClassGetParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsClassGet_Call) Return(_a0 *ObjectsClassGetOK, _a1 error) *MockClientService_ObjectsClassGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsClassGet_Call) RunAndReturn(run func(*ObjectsClassGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassGetOK, error)) *MockClientService_ObjectsClassGet_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsClassHead provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsClassHead(params *ObjectsClassHeadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsClassHeadNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsClassHead")
	}

	var r0 *ObjectsClassHeadNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsClassHeadParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassHeadNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsClassHeadParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsClassHeadNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsClassHeadNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsClassHeadParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsClassHead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsClassHead'
type MockClientService_ObjectsClassHead_Call struct {
	*mock.Call
}

// ObjectsClassHead is a helper method to define mock.On call
//   - params *ObjectsClassHeadParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsClassHead(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsClassHead_Call {
	return &MockClientService_ObjectsClassHead_Call{Call: _e.mock.On("ObjectsClassHead",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsClassHead_Call) Run(run func(params *ObjectsClassHeadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsClassHead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsClassHeadParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsClassHead_Call) Return(_a0 *ObjectsClassHeadNoContent, _a1 error) *MockClientService_ObjectsClassHead_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsClassHead_Call) RunAndReturn(run func(*ObjectsClassHeadParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassHeadNoContent, error)) *MockClientService_ObjectsClassHead_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsClassPatch provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsClassPatch(params *ObjectsClassPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsClassPatchNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsClassPatch")
	}

	var r0 *ObjectsClassPatchNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsClassPatchParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassPatchNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsClassPatchParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsClassPatchNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsClassPatchNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsClassPatchParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsClassPatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsClassPatch'
type MockClientService_ObjectsClassPatch_Call struct {
	*mock.Call
}

// ObjectsClassPatch is a helper method to define mock.On call
//   - params *ObjectsClassPatchParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsClassPatch(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsClassPatch_Call {
	return &MockClientService_ObjectsClassPatch_Call{Call: _e.mock.On("ObjectsClassPatch",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsClassPatch_Call) Run(run func(params *ObjectsClassPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsClassPatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsClassPatchParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsClassPatch_Call) Return(_a0 *ObjectsClassPatchNoContent, _a1 error) *MockClientService_ObjectsClassPatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsClassPatch_Call) RunAndReturn(run func(*ObjectsClassPatchParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassPatchNoContent, error)) *MockClientService_ObjectsClassPatch_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsClassPut provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsClassPut(params *ObjectsClassPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsClassPutOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsClassPut")
	}

	var r0 *ObjectsClassPutOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsClassPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassPutOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsClassPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsClassPutOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsClassPutOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsClassPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsClassPut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsClassPut'
type MockClientService_ObjectsClassPut_Call struct {
	*mock.Call
}

// ObjectsClassPut is a helper method to define mock.On call
//   - params *ObjectsClassPutParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsClassPut(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsClassPut_Call {
	return &MockClientService_ObjectsClassPut_Call{Call: _e.mock.On("ObjectsClassPut",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsClassPut_Call) Run(run func(params *ObjectsClassPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsClassPut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsClassPutParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsClassPut_Call) Return(_a0 *ObjectsClassPutOK, _a1 error) *MockClientService_ObjectsClassPut_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsClassPut_Call) RunAndReturn(run func(*ObjectsClassPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassPutOK, error)) *MockClientService_ObjectsClassPut_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsClassReferencesCreate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsClassReferencesCreate(params *ObjectsClassReferencesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsClassReferencesCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsClassReferencesCreate")
	}

	var r0 *ObjectsClassReferencesCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsClassReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassReferencesCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsClassReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsClassReferencesCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsClassReferencesCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsClassReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsClassReferencesCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsClassReferencesCreate'
type MockClientService_ObjectsClassReferencesCreate_Call struct {
	*mock.Call
}

// ObjectsClassReferencesCreate is a helper method to define mock.On call
//   - params *ObjectsClassReferencesCreateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsClassReferencesCreate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsClassReferencesCreate_Call {
	return &MockClientService_ObjectsClassReferencesCreate_Call{Call: _e.mock.On("ObjectsClassReferencesCreate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsClassReferencesCreate_Call) Run(run func(params *ObjectsClassReferencesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsClassReferencesCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsClassReferencesCreateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsClassReferencesCreate_Call) Return(_a0 *ObjectsClassReferencesCreateOK, _a1 error) *MockClientService_ObjectsClassReferencesCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsClassReferencesCreate_Call) RunAndReturn(run func(*ObjectsClassReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassReferencesCreateOK, error)) *MockClientService_ObjectsClassReferencesCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsClassReferencesDelete provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsClassReferencesDelete(params *ObjectsClassReferencesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsClassReferencesDeleteNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsClassReferencesDelete")
	}

	var r0 *ObjectsClassReferencesDeleteNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsClassReferencesDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassReferencesDeleteNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsClassReferencesDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsClassReferencesDeleteNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsClassReferencesDeleteNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsClassReferencesDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsClassReferencesDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsClassReferencesDelete'
type MockClientService_ObjectsClassReferencesDelete_Call struct {
	*mock.Call
}

// ObjectsClassReferencesDelete is a helper method to define mock.On call
//   - params *ObjectsClassReferencesDeleteParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsClassReferencesDelete(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsClassReferencesDelete_Call {
	return &MockClientService_ObjectsClassReferencesDelete_Call{Call: _e.mock.On("ObjectsClassReferencesDelete",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsClassReferencesDelete_Call) Run(run func(params *ObjectsClassReferencesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsClassReferencesDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsClassReferencesDeleteParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsClassReferencesDelete_Call) Return(_a0 *ObjectsClassReferencesDeleteNoContent, _a1 error) *MockClientService_ObjectsClassReferencesDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsClassReferencesDelete_Call) RunAndReturn(run func(*ObjectsClassReferencesDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassReferencesDeleteNoContent, error)) *MockClientService_ObjectsClassReferencesDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsClassReferencesPut provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsClassReferencesPut(params *ObjectsClassReferencesPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsClassReferencesPutOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsClassReferencesPut")
	}

	var r0 *ObjectsClassReferencesPutOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsClassReferencesPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassReferencesPutOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsClassReferencesPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsClassReferencesPutOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsClassReferencesPutOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsClassReferencesPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsClassReferencesPut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsClassReferencesPut'
type MockClientService_ObjectsClassReferencesPut_Call struct {
	*mock.Call
}

// ObjectsClassReferencesPut is a helper method to define mock.On call
//   - params *ObjectsClassReferencesPutParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsClassReferencesPut(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsClassReferencesPut_Call {
	return &MockClientService_ObjectsClassReferencesPut_Call{Call: _e.mock.On("ObjectsClassReferencesPut",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsClassReferencesPut_Call) Run(run func(params *ObjectsClassReferencesPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsClassReferencesPut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsClassReferencesPutParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsClassReferencesPut_Call) Return(_a0 *ObjectsClassReferencesPutOK, _a1 error) *MockClientService_ObjectsClassReferencesPut_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsClassReferencesPut_Call) RunAndReturn(run func(*ObjectsClassReferencesPutParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsClassReferencesPutOK, error)) *MockClientService_ObjectsClassReferencesPut_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsCreate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsCreate(params *ObjectsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsCreate")
	}

	var r0 *ObjectsCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsCreate'
type MockClientService_ObjectsCreate_Call struct {
	*mock.Call
}

// ObjectsCreate is a helper method to define mock.On call
//   - params *ObjectsCreateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsCreate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsCreate_Call {
	return &MockClientService_ObjectsCreate_Call{Call: _e.mock.On("ObjectsCreate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsCreate_Call) Run(run func(params *ObjectsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsCreateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsCreate_Call) Return(_a0 *ObjectsCreateOK, _a1 error) *MockClientService_ObjectsCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsCreate_Call) RunAndReturn(run func(*ObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsCreateOK, error)) *MockClientService_ObjectsCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsDelete provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsDelete(params *ObjectsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsDeleteNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsDelete")
	}

	var r0 *ObjectsDeleteNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsDeleteNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsDeleteNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsDeleteNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsDelete'
type MockClientService_ObjectsDelete_Call struct {
	*mock.Call
}

// ObjectsDelete is a helper method to define mock.On call
//   - params *ObjectsDeleteParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsDelete(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsDelete_Call {
	return &MockClientService_ObjectsDelete_Call{Call: _e.mock.On("ObjectsDelete",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsDelete_Call) Run(run func(params *ObjectsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsDeleteParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsDelete_Call) Return(_a0 *ObjectsDeleteNoContent, _a1 error) *MockClientService_ObjectsDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsDelete_Call) RunAndReturn(run func(*ObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsDeleteNoContent, error)) *MockClientService_ObjectsDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsGet(params *ObjectsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsGet")
	}

	var r0 *ObjectsGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsGet'
type MockClientService_ObjectsGet_Call struct {
	*mock.Call
}

// ObjectsGet is a helper method to define mock.On call
//   - params *ObjectsGetParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsGet(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsGet_Call {
	return &MockClientService_ObjectsGet_Call{Call: _e.mock.On("ObjectsGet",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsGet_Call) Run(run func(params *ObjectsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsGetParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsGet_Call) Return(_a0 *ObjectsGetOK, _a1 error) *MockClientService_ObjectsGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsGet_Call) RunAndReturn(run func(*ObjectsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsGetOK, error)) *MockClientService_ObjectsGet_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsHead provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsHead(params *ObjectsHeadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsHeadNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsHead")
	}

	var r0 *ObjectsHeadNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsHeadParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsHeadNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsHeadParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsHeadNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsHeadNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsHeadParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsHead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsHead'
type MockClientService_ObjectsHead_Call struct {
	*mock.Call
}

// ObjectsHead is a helper method to define mock.On call
//   - params *ObjectsHeadParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsHead(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsHead_Call {
	return &MockClientService_ObjectsHead_Call{Call: _e.mock.On("ObjectsHead",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsHead_Call) Run(run func(params *ObjectsHeadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsHead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsHeadParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsHead_Call) Return(_a0 *ObjectsHeadNoContent, _a1 error) *MockClientService_ObjectsHead_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsHead_Call) RunAndReturn(run func(*ObjectsHeadParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsHeadNoContent, error)) *MockClientService_ObjectsHead_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsList provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsList(params *ObjectsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsListOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsList")
	}

	var r0 *ObjectsListOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsListParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsListOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsListParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsListOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsListOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsListParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsList'
type MockClientService_ObjectsList_Call struct {
	*mock.Call
}

// ObjectsList is a helper method to define mock.On call
//   - params *ObjectsListParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsList(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsList_Call {
	return &MockClientService_ObjectsList_Call{Call: _e.mock.On("ObjectsList",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsList_Call) Run(run func(params *ObjectsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsListParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsList_Call) Return(_a0 *ObjectsListOK, _a1 error) *MockClientService_ObjectsList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsList_Call) RunAndReturn(run func(*ObjectsListParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsListOK, error)) *MockClientService_ObjectsList_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsPatch provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsPatch(params *ObjectsPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsPatchNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsPatch")
	}

	var r0 *ObjectsPatchNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsPatchParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsPatchNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsPatchParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsPatchNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsPatchNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsPatchParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsPatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsPatch'
type MockClientService_ObjectsPatch_Call struct {
	*mock.Call
}

// ObjectsPatch is a helper method to define mock.On call
//   - params *ObjectsPatchParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsPatch(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsPatch_Call {
	return &MockClientService_ObjectsPatch_Call{Call: _e.mock.On("ObjectsPatch",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsPatch_Call) Run(run func(params *ObjectsPatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsPatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsPatchParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsPatch_Call) Return(_a0 *ObjectsPatchNoContent, _a1 error) *MockClientService_ObjectsPatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsPatch_Call) RunAndReturn(run func(*ObjectsPatchParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsPatchNoContent, error)) *MockClientService_ObjectsPatch_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsReferencesCreate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsReferencesCreate(params *ObjectsReferencesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsReferencesCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsReferencesCreate")
	}

	var r0 *ObjectsReferencesCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsReferencesCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsReferencesCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsReferencesCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsReferencesCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsReferencesCreate'
type MockClientService_ObjectsReferencesCreate_Call struct {
	*mock.Call
}

// ObjectsReferencesCreate is a helper method to define mock.On call
//   - params *ObjectsReferencesCreateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsReferencesCreate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsReferencesCreate_Call {
	return &MockClientService_ObjectsReferencesCreate_Call{Call: _e.mock.On("ObjectsReferencesCreate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsReferencesCreate_Call) Run(run func(params *ObjectsReferencesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsReferencesCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsReferencesCreateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsReferencesCreate_Call) Return(_a0 *ObjectsReferencesCreateOK, _a1 error) *MockClientService_ObjectsReferencesCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsReferencesCreate_Call) RunAndReturn(run func(*ObjectsReferencesCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsReferencesCreateOK, error)) *MockClientService_ObjectsReferencesCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsReferencesDelete provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsReferencesDelete(params *ObjectsReferencesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsReferencesDeleteNoContent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsReferencesDelete")
	}

	var r0 *ObjectsReferencesDeleteNoContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsReferencesDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsReferencesDeleteNoContent, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsReferencesDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsReferencesDeleteNoContent); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsReferencesDeleteNoContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsReferencesDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsReferencesDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsReferencesDelete'
type MockClientService_ObjectsReferencesDelete_Call struct {
	*mock.Call
}

// ObjectsReferencesDelete is a helper method to define mock.On call
//   - params *ObjectsReferencesDeleteParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsReferencesDelete(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsReferencesDelete_Call {
	return &MockClientService_ObjectsReferencesDelete_Call{Call: _e.mock.On("ObjectsReferencesDelete",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsReferencesDelete_Call) Run(run func(params *ObjectsReferencesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsReferencesDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsReferencesDeleteParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsReferencesDelete_Call) Return(_a0 *ObjectsReferencesDeleteNoContent, _a1 error) *MockClientService_ObjectsReferencesDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsReferencesDelete_Call) RunAndReturn(run func(*ObjectsReferencesDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsReferencesDeleteNoContent, error)) *MockClientService_ObjectsReferencesDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsReferencesUpdate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsReferencesUpdate(params *ObjectsReferencesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsReferencesUpdateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsReferencesUpdate")
	}

	var r0 *ObjectsReferencesUpdateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsReferencesUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsReferencesUpdateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsReferencesUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsReferencesUpdateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsReferencesUpdateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsReferencesUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsReferencesUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsReferencesUpdate'
type MockClientService_ObjectsReferencesUpdate_Call struct {
	*mock.Call
}

// ObjectsReferencesUpdate is a helper method to define mock.On call
//   - params *ObjectsReferencesUpdateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsReferencesUpdate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsReferencesUpdate_Call {
	return &MockClientService_ObjectsReferencesUpdate_Call{Call: _e.mock.On("ObjectsReferencesUpdate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsReferencesUpdate_Call) Run(run func(params *ObjectsReferencesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsReferencesUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsReferencesUpdateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsReferencesUpdate_Call) Return(_a0 *ObjectsReferencesUpdateOK, _a1 error) *MockClientService_ObjectsReferencesUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsReferencesUpdate_Call) RunAndReturn(run func(*ObjectsReferencesUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsReferencesUpdateOK, error)) *MockClientService_ObjectsReferencesUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsUpdate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsUpdate(params *ObjectsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsUpdateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsUpdate")
	}

	var r0 *ObjectsUpdateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsUpdateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsUpdateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsUpdateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsUpdate'
type MockClientService_ObjectsUpdate_Call struct {
	*mock.Call
}

// ObjectsUpdate is a helper method to define mock.On call
//   - params *ObjectsUpdateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsUpdate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsUpdate_Call {
	return &MockClientService_ObjectsUpdate_Call{Call: _e.mock.On("ObjectsUpdate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsUpdate_Call) Run(run func(params *ObjectsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsUpdateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsUpdate_Call) Return(_a0 *ObjectsUpdateOK, _a1 error) *MockClientService_ObjectsUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsUpdate_Call) RunAndReturn(run func(*ObjectsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsUpdateOK, error)) *MockClientService_ObjectsUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsValidate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ObjectsValidate(params *ObjectsValidateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObjectsValidateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsValidate")
	}

	var r0 *ObjectsValidateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*ObjectsValidateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsValidateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*ObjectsValidateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *ObjectsValidateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ObjectsValidateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*ObjectsValidateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ObjectsValidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsValidate'
type MockClientService_ObjectsValidate_Call struct {
	*mock.Call
}

// ObjectsValidate is a helper method to define mock.On call
//   - params *ObjectsValidateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) ObjectsValidate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ObjectsValidate_Call {
	return &MockClientService_ObjectsValidate_Call{Call: _e.mock.On("ObjectsValidate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ObjectsValidate_Call) Run(run func(params *ObjectsValidateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_ObjectsValidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*ObjectsValidateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ObjectsValidate_Call) Return(_a0 *ObjectsValidateOK, _a1 error) *MockClientService_ObjectsValidate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ObjectsValidate_Call) RunAndReturn(run func(*ObjectsValidateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*ObjectsValidateOK, error)) *MockClientService_ObjectsValidate_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
