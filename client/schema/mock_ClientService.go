//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package schema

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// SchemaClusterStatus provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SchemaClusterStatus(params *SchemaClusterStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SchemaClusterStatusOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SchemaClusterStatus")
	}

	var r0 *SchemaClusterStatusOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SchemaClusterStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaClusterStatusOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SchemaClusterStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SchemaClusterStatusOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SchemaClusterStatusOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SchemaClusterStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SchemaClusterStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaClusterStatus'
type MockClientService_SchemaClusterStatus_Call struct {
	*mock.Call
}

// SchemaClusterStatus is a helper method to define mock.On call
//   - params *SchemaClusterStatusParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) SchemaClusterStatus(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SchemaClusterStatus_Call {
	return &MockClientService_SchemaClusterStatus_Call{Call: _e.mock.On("SchemaClusterStatus",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SchemaClusterStatus_Call) Run(run func(params *SchemaClusterStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_SchemaClusterStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*SchemaClusterStatusParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SchemaClusterStatus_Call) Return(_a0 *SchemaClusterStatusOK, _a1 error) *MockClientService_SchemaClusterStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SchemaClusterStatus_Call) RunAndReturn(run func(*SchemaClusterStatusParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaClusterStatusOK, error)) *MockClientService_SchemaClusterStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SchemaDump provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SchemaDump(params *SchemaDumpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SchemaDumpOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SchemaDump")
	}

	var r0 *SchemaDumpOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SchemaDumpParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaDumpOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SchemaDumpParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SchemaDumpOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SchemaDumpOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SchemaDumpParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SchemaDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaDump'
type MockClientService_SchemaDump_Call struct {
	*mock.Call
}

// SchemaDump is a helper method to define mock.On call
//   - params *SchemaDumpParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) SchemaDump(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SchemaDump_Call {
	return &MockClientService_SchemaDump_Call{Call: _e.mock.On("SchemaDump",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SchemaDump_Call) Run(run func(params *SchemaDumpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_SchemaDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*SchemaDumpParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SchemaDump_Call) Return(_a0 *SchemaDumpOK, _a1 error) *MockClientService_SchemaDump_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SchemaDump_Call) RunAndReturn(run func(*SchemaDumpParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaDumpOK, error)) *MockClientService_SchemaDump_Call {
	_c.Call.Return(run)
	return _c
}

// SchemaObjectsCreate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SchemaObjectsCreate(params *SchemaObjectsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SchemaObjectsCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SchemaObjectsCreate")
	}

	var r0 *SchemaObjectsCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SchemaObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SchemaObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SchemaObjectsCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SchemaObjectsCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SchemaObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SchemaObjectsCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaObjectsCreate'
type MockClientService_SchemaObjectsCreate_Call struct {
	*mock.Call
}

// SchemaObjectsCreate is a helper method to define mock.On call
//   - params *SchemaObjectsCreateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) SchemaObjectsCreate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SchemaObjectsCreate_Call {
	return &MockClientService_SchemaObjectsCreate_Call{Call: _e.mock.On("SchemaObjectsCreate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SchemaObjectsCreate_Call) Run(run func(params *SchemaObjectsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_SchemaObjectsCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*SchemaObjectsCreateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SchemaObjectsCreate_Call) Return(_a0 *SchemaObjectsCreateOK, _a1 error) *MockClientService_SchemaObjectsCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SchemaObjectsCreate_Call) RunAndReturn(run func(*SchemaObjectsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsCreateOK, error)) *MockClientService_SchemaObjectsCreate_Call {
	_c.Call.Return(run)
	return _c
}

// SchemaObjectsDelete provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SchemaObjectsDelete(params *SchemaObjectsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SchemaObjectsDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SchemaObjectsDelete")
	}

	var r0 *SchemaObjectsDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SchemaObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SchemaObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SchemaObjectsDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SchemaObjectsDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SchemaObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SchemaObjectsDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaObjectsDelete'
type MockClientService_SchemaObjectsDelete_Call struct {
	*mock.Call
}

// SchemaObjectsDelete is a helper method to define mock.On call
//   - params *SchemaObjectsDeleteParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) SchemaObjectsDelete(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SchemaObjectsDelete_Call {
	return &MockClientService_SchemaObjectsDelete_Call{Call: _e.mock.On("SchemaObjectsDelete",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SchemaObjectsDelete_Call) Run(run func(params *SchemaObjectsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_SchemaObjectsDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*SchemaObjectsDeleteParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SchemaObjectsDelete_Call) Return(_a0 *SchemaObjectsDeleteOK, _a1 error) *MockClientService_SchemaObjectsDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SchemaObjectsDelete_Call) RunAndReturn(run func(*SchemaObjectsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsDeleteOK, error)) *MockClientService_SchemaObjectsDelete_Call {
	_c.Call.Return(run)
	return _c
}

// SchemaObjectsGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SchemaObjectsGet(params *SchemaObjectsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SchemaObjectsGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SchemaObjectsGet")
	}

	var r0 *SchemaObjectsGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SchemaObjectsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SchemaObjectsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SchemaObjectsGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SchemaObjectsGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SchemaObjectsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SchemaObjectsGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaObjectsGet'
type MockClientService_SchemaObjectsGet_Call struct {
	*mock.Call
}

// SchemaObjectsGet is a helper method to define mock.On call
//   - params *SchemaObjectsGetParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) SchemaObjectsGet(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SchemaObjectsGet_Call {
	return &MockClientService_SchemaObjectsGet_Call{Call: _e.mock.On("SchemaObjectsGet",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SchemaObjectsGet_Call) Run(run func(params *SchemaObjectsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_SchemaObjectsGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*SchemaObjectsGetParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SchemaObjectsGet_Call) Return(_a0 *SchemaObjectsGetOK, _a1 error) *MockClientService_SchemaObjectsGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SchemaObjectsGet_Call) RunAndReturn(run func(*SchemaObjectsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsGetOK, error)) *MockClientService_SchemaObjectsGet_Call {
	_c.Call.Return(run)
	return _c
}

// SchemaObjectsPropertiesAdd provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SchemaObjectsPropertiesAdd(params *SchemaObjectsPropertiesAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SchemaObjectsPropertiesAddOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SchemaObjectsPropertiesAdd")
	}

	var r0 *SchemaObjectsPropertiesAddOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SchemaObjectsPropertiesAddParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsPropertiesAddOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SchemaObjectsPropertiesAddParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SchemaObjectsPropertiesAddOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SchemaObjectsPropertiesAddOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SchemaObjectsPropertiesAddParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SchemaObjectsPropertiesAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaObjectsPropertiesAdd'
type MockClientService_SchemaObjectsPropertiesAdd_Call struct {
	*mock.Call
}

// SchemaObjectsPropertiesAdd is a helper method to define mock.On call
//   - params *SchemaObjectsPropertiesAddParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) SchemaObjectsPropertiesAdd(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SchemaObjectsPropertiesAdd_Call {
	return &MockClientService_SchemaObjectsPropertiesAdd_Call{Call: _e.mock.On("SchemaObjectsPropertiesAdd",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SchemaObjectsPropertiesAdd_Call) Run(run func(params *SchemaObjectsPropertiesAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_SchemaObjectsPropertiesAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*SchemaObjectsPropertiesAddParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SchemaObjectsPropertiesAdd_Call) Return(_a0 *SchemaObjectsPropertiesAddOK, _a1 error) *MockClientService_SchemaObjectsPropertiesAdd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SchemaObjectsPropertiesAdd_Call) RunAndReturn(run func(*SchemaObjectsPropertiesAddParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsPropertiesAddOK, error)) *MockClientService_SchemaObjectsPropertiesAdd_Call {
	_c.Call.Return(run)
	return _c
}

// SchemaObjectsShardsGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SchemaObjectsShardsGet(params *SchemaObjectsShardsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SchemaObjectsShardsGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SchemaObjectsShardsGet")
	}

	var r0 *SchemaObjectsShardsGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SchemaObjectsShardsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsShardsGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SchemaObjectsShardsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SchemaObjectsShardsGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SchemaObjectsShardsGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SchemaObjectsShardsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SchemaObjectsShardsGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaObjectsShardsGet'
type MockClientService_SchemaObjectsShardsGet_Call struct {
	*mock.Call
}

// SchemaObjectsShardsGet is a helper method to define mock.On call
//   - params *SchemaObjectsShardsGetParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) SchemaObjectsShardsGet(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SchemaObjectsShardsGet_Call {
	return &MockClientService_SchemaObjectsShardsGet_Call{Call: _e.mock.On("SchemaObjectsShardsGet",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SchemaObjectsShardsGet_Call) Run(run func(params *SchemaObjectsShardsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_SchemaObjectsShardsGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*SchemaObjectsShardsGetParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SchemaObjectsShardsGet_Call) Return(_a0 *SchemaObjectsShardsGetOK, _a1 error) *MockClientService_SchemaObjectsShardsGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SchemaObjectsShardsGet_Call) RunAndReturn(run func(*SchemaObjectsShardsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsShardsGetOK, error)) *MockClientService_SchemaObjectsShardsGet_Call {
	_c.Call.Return(run)
	return _c
}

// SchemaObjectsShardsUpdate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SchemaObjectsShardsUpdate(params *SchemaObjectsShardsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SchemaObjectsShardsUpdateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SchemaObjectsShardsUpdate")
	}

	var r0 *SchemaObjectsShardsUpdateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SchemaObjectsShardsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsShardsUpdateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SchemaObjectsShardsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SchemaObjectsShardsUpdateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SchemaObjectsShardsUpdateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SchemaObjectsShardsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SchemaObjectsShardsUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaObjectsShardsUpdate'
type MockClientService_SchemaObjectsShardsUpdate_Call struct {
	*mock.Call
}

// SchemaObjectsShardsUpdate is a helper method to define mock.On call
//   - params *SchemaObjectsShardsUpdateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) SchemaObjectsShardsUpdate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SchemaObjectsShardsUpdate_Call {
	return &MockClientService_SchemaObjectsShardsUpdate_Call{Call: _e.mock.On("SchemaObjectsShardsUpdate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SchemaObjectsShardsUpdate_Call) Run(run func(params *SchemaObjectsShardsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_SchemaObjectsShardsUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*SchemaObjectsShardsUpdateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SchemaObjectsShardsUpdate_Call) Return(_a0 *SchemaObjectsShardsUpdateOK, _a1 error) *MockClientService_SchemaObjectsShardsUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SchemaObjectsShardsUpdate_Call) RunAndReturn(run func(*SchemaObjectsShardsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsShardsUpdateOK, error)) *MockClientService_SchemaObjectsShardsUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// SchemaObjectsUpdate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SchemaObjectsUpdate(params *SchemaObjectsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SchemaObjectsUpdateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SchemaObjectsUpdate")
	}

	var r0 *SchemaObjectsUpdateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*SchemaObjectsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsUpdateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*SchemaObjectsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *SchemaObjectsUpdateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SchemaObjectsUpdateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*SchemaObjectsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SchemaObjectsUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaObjectsUpdate'
type MockClientService_SchemaObjectsUpdate_Call struct {
	*mock.Call
}

// SchemaObjectsUpdate is a helper method to define mock.On call
//   - params *SchemaObjectsUpdateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) SchemaObjectsUpdate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SchemaObjectsUpdate_Call {
	return &MockClientService_SchemaObjectsUpdate_Call{Call: _e.mock.On("SchemaObjectsUpdate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SchemaObjectsUpdate_Call) Run(run func(params *SchemaObjectsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_SchemaObjectsUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*SchemaObjectsUpdateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SchemaObjectsUpdate_Call) Return(_a0 *SchemaObjectsUpdateOK, _a1 error) *MockClientService_SchemaObjectsUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SchemaObjectsUpdate_Call) RunAndReturn(run func(*SchemaObjectsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*SchemaObjectsUpdateOK, error)) *MockClientService_SchemaObjectsUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// TenantsCreate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) TenantsCreate(params *TenantsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TenantsCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TenantsCreate")
	}

	var r0 *TenantsCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*TenantsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*TenantsCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*TenantsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *TenantsCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TenantsCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*TenantsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_TenantsCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TenantsCreate'
type MockClientService_TenantsCreate_Call struct {
	*mock.Call
}

// TenantsCreate is a helper method to define mock.On call
//   - params *TenantsCreateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) TenantsCreate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_TenantsCreate_Call {
	return &MockClientService_TenantsCreate_Call{Call: _e.mock.On("TenantsCreate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_TenantsCreate_Call) Run(run func(params *TenantsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_TenantsCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*TenantsCreateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_TenantsCreate_Call) Return(_a0 *TenantsCreateOK, _a1 error) *MockClientService_TenantsCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_TenantsCreate_Call) RunAndReturn(run func(*TenantsCreateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*TenantsCreateOK, error)) *MockClientService_TenantsCreate_Call {
	_c.Call.Return(run)
	return _c
}

// TenantsDelete provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) TenantsDelete(params *TenantsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TenantsDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TenantsDelete")
	}

	var r0 *TenantsDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*TenantsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*TenantsDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*TenantsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) *TenantsDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TenantsDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*TenantsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_TenantsDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TenantsDelete'
type MockClientService_TenantsDelete_Call struct {
	*mock.Call
}

// TenantsDelete is a helper method to define mock.On call
//   - params *TenantsDeleteParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) TenantsDelete(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_TenantsDelete_Call {
	return &MockClientService_TenantsDelete_Call{Call: _e.mock.On("TenantsDelete",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_TenantsDelete_Call) Run(run func(params *TenantsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_TenantsDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*TenantsDeleteParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_TenantsDelete_Call) Return(_a0 *TenantsDeleteOK, _a1 error) *MockClientService_TenantsDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_TenantsDelete_Call) RunAndReturn(run func(*TenantsDeleteParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*TenantsDeleteOK, error)) *MockClientService_TenantsDelete_Call {
	_c.Call.Return(run)
	return _c
}

// TenantsGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) TenantsGet(params *TenantsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TenantsGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TenantsGet")
	}

	var r0 *TenantsGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*TenantsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*TenantsGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*TenantsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) *TenantsGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TenantsGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*TenantsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_TenantsGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TenantsGet'
type MockClientService_TenantsGet_Call struct {
	*mock.Call
}

// TenantsGet is a helper method to define mock.On call
//   - params *TenantsGetParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) TenantsGet(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_TenantsGet_Call {
	return &MockClientService_TenantsGet_Call{Call: _e.mock.On("TenantsGet",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_TenantsGet_Call) Run(run func(params *TenantsGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_TenantsGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*TenantsGetParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_TenantsGet_Call) Return(_a0 *TenantsGetOK, _a1 error) *MockClientService_TenantsGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_TenantsGet_Call) RunAndReturn(run func(*TenantsGetParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*TenantsGetOK, error)) *MockClientService_TenantsGet_Call {
	_c.Call.Return(run)
	return _c
}

// TenantsUpdate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) TenantsUpdate(params *TenantsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TenantsUpdateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TenantsUpdate")
	}

	var r0 *TenantsUpdateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*TenantsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*TenantsUpdateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*TenantsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) *TenantsUpdateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TenantsUpdateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*TenantsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_TenantsUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TenantsUpdate'
type MockClientService_TenantsUpdate_Call struct {
	*mock.Call
}

// TenantsUpdate is a helper method to define mock.On call
//   - params *TenantsUpdateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...ClientOption
func (_e *MockClientService_Expecter) TenantsUpdate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_TenantsUpdate_Call {
	return &MockClientService_TenantsUpdate_Call{Call: _e.mock.On("TenantsUpdate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_TenantsUpdate_Call) Run(run func(params *TenantsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption)) *MockClientService_TenantsUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(ClientOption)
			}
		}
		run(args[0].(*TenantsUpdateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_TenantsUpdate_Call) Return(_a0 *TenantsUpdateOK, _a1 error) *MockClientService_TenantsUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_TenantsUpdate_Call) RunAndReturn(run func(*TenantsUpdateParams, runtime.ClientAuthInfoWriter, ...ClientOption) (*TenantsUpdateOK, error)) *MockClientService_TenantsUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
