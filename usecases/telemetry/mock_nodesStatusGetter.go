//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package telemetry

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"
)

// MocknodesStatusGetter is an autogenerated mock type for the nodesStatusGetter type
type MocknodesStatusGetter struct {
	mock.Mock
}

type MocknodesStatusGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MocknodesStatusGetter) EXPECT() *MocknodesStatusGetter_Expecter {
	return &MocknodesStatusGetter_Expecter{mock: &_m.Mock}
}

// LocalNodeStatus provides a mock function with given fields: ctx, className, output
func (_m *MocknodesStatusGetter) LocalNodeStatus(ctx context.Context, className string, output string) *models.NodeStatus {
	ret := _m.Called(ctx, className, output)

	if len(ret) == 0 {
		panic("no return value specified for LocalNodeStatus")
	}

	var r0 *models.NodeStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.NodeStatus); ok {
		r0 = rf(ctx, className, output)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NodeStatus)
		}
	}

	return r0
}

// MocknodesStatusGetter_LocalNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalNodeStatus'
type MocknodesStatusGetter_LocalNodeStatus_Call struct {
	*mock.Call
}

// LocalNodeStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - output string
func (_e *MocknodesStatusGetter_Expecter) LocalNodeStatus(ctx interface{}, className interface{}, output interface{}) *MocknodesStatusGetter_LocalNodeStatus_Call {
	return &MocknodesStatusGetter_LocalNodeStatus_Call{Call: _e.mock.On("LocalNodeStatus", ctx, className, output)}
}

func (_c *MocknodesStatusGetter_LocalNodeStatus_Call) Run(run func(ctx context.Context, className string, output string)) *MocknodesStatusGetter_LocalNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MocknodesStatusGetter_LocalNodeStatus_Call) Return(_a0 *models.NodeStatus) *MocknodesStatusGetter_LocalNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocknodesStatusGetter_LocalNodeStatus_Call) RunAndReturn(run func(context.Context, string, string) *models.NodeStatus) *MocknodesStatusGetter_LocalNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocknodesStatusGetter creates a new instance of MocknodesStatusGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocknodesStatusGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocknodesStatusGetter {
	mock := &MocknodesStatusGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
