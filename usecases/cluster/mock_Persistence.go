//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package cluster

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPersistence is an autogenerated mock type for the Persistence type
type MockPersistence struct {
	mock.Mock
}

type MockPersistence_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPersistence) EXPECT() *MockPersistence_Expecter {
	return &MockPersistence_Expecter{mock: &_m.Mock}
}

// DeleteTx provides a mock function with given fields: ctx, txID
func (_m *MockPersistence) DeleteTx(ctx context.Context, txID string) error {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, txID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPersistence_DeleteTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTx'
type MockPersistence_DeleteTx_Call struct {
	*mock.Call
}

// DeleteTx is a helper method to define mock.On call
//   - ctx context.Context
//   - txID string
func (_e *MockPersistence_Expecter) DeleteTx(ctx interface{}, txID interface{}) *MockPersistence_DeleteTx_Call {
	return &MockPersistence_DeleteTx_Call{Call: _e.mock.On("DeleteTx", ctx, txID)}
}

func (_c *MockPersistence_DeleteTx_Call) Run(run func(ctx context.Context, txID string)) *MockPersistence_DeleteTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPersistence_DeleteTx_Call) Return(_a0 error) *MockPersistence_DeleteTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersistence_DeleteTx_Call) RunAndReturn(run func(context.Context, string) error) *MockPersistence_DeleteTx_Call {
	_c.Call.Return(run)
	return _c
}

// IterateAll provides a mock function with given fields: ctx, cb
func (_m *MockPersistence) IterateAll(ctx context.Context, cb func(*Transaction)) error {
	ret := _m.Called(ctx, cb)

	if len(ret) == 0 {
		panic("no return value specified for IterateAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*Transaction)) error); ok {
		r0 = rf(ctx, cb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPersistence_IterateAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterateAll'
type MockPersistence_IterateAll_Call struct {
	*mock.Call
}

// IterateAll is a helper method to define mock.On call
//   - ctx context.Context
//   - cb func(*Transaction)
func (_e *MockPersistence_Expecter) IterateAll(ctx interface{}, cb interface{}) *MockPersistence_IterateAll_Call {
	return &MockPersistence_IterateAll_Call{Call: _e.mock.On("IterateAll", ctx, cb)}
}

func (_c *MockPersistence_IterateAll_Call) Run(run func(ctx context.Context, cb func(*Transaction))) *MockPersistence_IterateAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(*Transaction)))
	})
	return _c
}

func (_c *MockPersistence_IterateAll_Call) Return(_a0 error) *MockPersistence_IterateAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersistence_IterateAll_Call) RunAndReturn(run func(context.Context, func(*Transaction)) error) *MockPersistence_IterateAll_Call {
	_c.Call.Return(run)
	return _c
}

// StoreTx provides a mock function with given fields: ctx, tx
func (_m *MockPersistence) StoreTx(ctx context.Context, tx *Transaction) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for StoreTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPersistence_StoreTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreTx'
type MockPersistence_StoreTx_Call struct {
	*mock.Call
}

// StoreTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *Transaction
func (_e *MockPersistence_Expecter) StoreTx(ctx interface{}, tx interface{}) *MockPersistence_StoreTx_Call {
	return &MockPersistence_StoreTx_Call{Call: _e.mock.On("StoreTx", ctx, tx)}
}

func (_c *MockPersistence_StoreTx_Call) Run(run func(ctx context.Context, tx *Transaction)) *MockPersistence_StoreTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Transaction))
	})
	return _c
}

func (_c *MockPersistence_StoreTx_Call) Return(_a0 error) *MockPersistence_StoreTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPersistence_StoreTx_Call) RunAndReturn(run func(context.Context, *Transaction) error) *MockPersistence_StoreTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPersistence creates a new instance of MockPersistence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPersistence(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPersistence {
	mock := &MockPersistence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
