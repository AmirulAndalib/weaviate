//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package cluster

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AbortTransaction provides a mock function with given fields: ctx, host, tx
func (_m *MockClient) AbortTransaction(ctx context.Context, host string, tx *Transaction) error {
	ret := _m.Called(ctx, host, tx)

	if len(ret) == 0 {
		panic("no return value specified for AbortTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *Transaction) error); ok {
		r0 = rf(ctx, host, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_AbortTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortTransaction'
type MockClient_AbortTransaction_Call struct {
	*mock.Call
}

// AbortTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - tx *Transaction
func (_e *MockClient_Expecter) AbortTransaction(ctx interface{}, host interface{}, tx interface{}) *MockClient_AbortTransaction_Call {
	return &MockClient_AbortTransaction_Call{Call: _e.mock.On("AbortTransaction", ctx, host, tx)}
}

func (_c *MockClient_AbortTransaction_Call) Run(run func(ctx context.Context, host string, tx *Transaction)) *MockClient_AbortTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*Transaction))
	})
	return _c
}

func (_c *MockClient_AbortTransaction_Call) Return(_a0 error) *MockClient_AbortTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_AbortTransaction_Call) RunAndReturn(run func(context.Context, string, *Transaction) error) *MockClient_AbortTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CommitTransaction provides a mock function with given fields: ctx, host, tx
func (_m *MockClient) CommitTransaction(ctx context.Context, host string, tx *Transaction) error {
	ret := _m.Called(ctx, host, tx)

	if len(ret) == 0 {
		panic("no return value specified for CommitTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *Transaction) error); ok {
		r0 = rf(ctx, host, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CommitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitTransaction'
type MockClient_CommitTransaction_Call struct {
	*mock.Call
}

// CommitTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - tx *Transaction
func (_e *MockClient_Expecter) CommitTransaction(ctx interface{}, host interface{}, tx interface{}) *MockClient_CommitTransaction_Call {
	return &MockClient_CommitTransaction_Call{Call: _e.mock.On("CommitTransaction", ctx, host, tx)}
}

func (_c *MockClient_CommitTransaction_Call) Run(run func(ctx context.Context, host string, tx *Transaction)) *MockClient_CommitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*Transaction))
	})
	return _c
}

func (_c *MockClient_CommitTransaction_Call) Return(_a0 error) *MockClient_CommitTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CommitTransaction_Call) RunAndReturn(run func(context.Context, string, *Transaction) error) *MockClient_CommitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// OpenTransaction provides a mock function with given fields: ctx, host, tx
func (_m *MockClient) OpenTransaction(ctx context.Context, host string, tx *Transaction) error {
	ret := _m.Called(ctx, host, tx)

	if len(ret) == 0 {
		panic("no return value specified for OpenTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *Transaction) error); ok {
		r0 = rf(ctx, host, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_OpenTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenTransaction'
type MockClient_OpenTransaction_Call struct {
	*mock.Call
}

// OpenTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - tx *Transaction
func (_e *MockClient_Expecter) OpenTransaction(ctx interface{}, host interface{}, tx interface{}) *MockClient_OpenTransaction_Call {
	return &MockClient_OpenTransaction_Call{Call: _e.mock.On("OpenTransaction", ctx, host, tx)}
}

func (_c *MockClient_OpenTransaction_Call) Run(run func(ctx context.Context, host string, tx *Transaction)) *MockClient_OpenTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*Transaction))
	})
	return _c
}

func (_c *MockClient_OpenTransaction_Call) Return(_a0 error) *MockClient_OpenTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_OpenTransaction_Call) RunAndReturn(run func(context.Context, string, *Transaction) error) *MockClient_OpenTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
