//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package cluster

import mock "github.com/stretchr/testify/mock"

// MockMemberLister is an autogenerated mock type for the MemberLister type
type MockMemberLister struct {
	mock.Mock
}

type MockMemberLister_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMemberLister) EXPECT() *MockMemberLister_Expecter {
	return &MockMemberLister_Expecter{mock: &_m.Mock}
}

// AllNames provides a mock function with given fields:
func (_m *MockMemberLister) AllNames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllNames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockMemberLister_AllNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllNames'
type MockMemberLister_AllNames_Call struct {
	*mock.Call
}

// AllNames is a helper method to define mock.On call
func (_e *MockMemberLister_Expecter) AllNames() *MockMemberLister_AllNames_Call {
	return &MockMemberLister_AllNames_Call{Call: _e.mock.On("AllNames")}
}

func (_c *MockMemberLister_AllNames_Call) Run(run func()) *MockMemberLister_AllNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMemberLister_AllNames_Call) Return(_a0 []string) *MockMemberLister_AllNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemberLister_AllNames_Call) RunAndReturn(run func() []string) *MockMemberLister_AllNames_Call {
	_c.Call.Return(run)
	return _c
}

// Hostnames provides a mock function with given fields:
func (_m *MockMemberLister) Hostnames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hostnames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockMemberLister_Hostnames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hostnames'
type MockMemberLister_Hostnames_Call struct {
	*mock.Call
}

// Hostnames is a helper method to define mock.On call
func (_e *MockMemberLister_Expecter) Hostnames() *MockMemberLister_Hostnames_Call {
	return &MockMemberLister_Hostnames_Call{Call: _e.mock.On("Hostnames")}
}

func (_c *MockMemberLister_Hostnames_Call) Run(run func()) *MockMemberLister_Hostnames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMemberLister_Hostnames_Call) Return(_a0 []string) *MockMemberLister_Hostnames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemberLister_Hostnames_Call) RunAndReturn(run func() []string) *MockMemberLister_Hostnames_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMemberLister creates a new instance of MockMemberLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMemberLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMemberLister {
	mock := &MockMemberLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
