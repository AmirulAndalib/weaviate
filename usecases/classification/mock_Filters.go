//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package classification

import (
	mock "github.com/stretchr/testify/mock"
	filters "github.com/weaviate/weaviate/entities/filters"
)

// MockFilters is an autogenerated mock type for the Filters type
type MockFilters struct {
	mock.Mock
}

type MockFilters_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilters) EXPECT() *MockFilters_Expecter {
	return &MockFilters_Expecter{mock: &_m.Mock}
}

// Source provides a mock function with given fields:
func (_m *MockFilters) Source() *filters.LocalFilter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Source")
	}

	var r0 *filters.LocalFilter
	if rf, ok := ret.Get(0).(func() *filters.LocalFilter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filters.LocalFilter)
		}
	}

	return r0
}

// MockFilters_Source_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Source'
type MockFilters_Source_Call struct {
	*mock.Call
}

// Source is a helper method to define mock.On call
func (_e *MockFilters_Expecter) Source() *MockFilters_Source_Call {
	return &MockFilters_Source_Call{Call: _e.mock.On("Source")}
}

func (_c *MockFilters_Source_Call) Run(run func()) *MockFilters_Source_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFilters_Source_Call) Return(_a0 *filters.LocalFilter) *MockFilters_Source_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilters_Source_Call) RunAndReturn(run func() *filters.LocalFilter) *MockFilters_Source_Call {
	_c.Call.Return(run)
	return _c
}

// Target provides a mock function with given fields:
func (_m *MockFilters) Target() *filters.LocalFilter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Target")
	}

	var r0 *filters.LocalFilter
	if rf, ok := ret.Get(0).(func() *filters.LocalFilter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filters.LocalFilter)
		}
	}

	return r0
}

// MockFilters_Target_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Target'
type MockFilters_Target_Call struct {
	*mock.Call
}

// Target is a helper method to define mock.On call
func (_e *MockFilters_Expecter) Target() *MockFilters_Target_Call {
	return &MockFilters_Target_Call{Call: _e.mock.On("Target")}
}

func (_c *MockFilters_Target_Call) Run(run func()) *MockFilters_Target_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFilters_Target_Call) Return(_a0 *filters.LocalFilter) *MockFilters_Target_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilters_Target_Call) RunAndReturn(run func() *filters.LocalFilter) *MockFilters_Target_Call {
	_c.Call.Return(run)
	return _c
}

// TrainingSet provides a mock function with given fields:
func (_m *MockFilters) TrainingSet() *filters.LocalFilter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TrainingSet")
	}

	var r0 *filters.LocalFilter
	if rf, ok := ret.Get(0).(func() *filters.LocalFilter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filters.LocalFilter)
		}
	}

	return r0
}

// MockFilters_TrainingSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrainingSet'
type MockFilters_TrainingSet_Call struct {
	*mock.Call
}

// TrainingSet is a helper method to define mock.On call
func (_e *MockFilters_Expecter) TrainingSet() *MockFilters_TrainingSet_Call {
	return &MockFilters_TrainingSet_Call{Call: _e.mock.On("TrainingSet")}
}

func (_c *MockFilters_TrainingSet_Call) Run(run func()) *MockFilters_TrainingSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFilters_TrainingSet_Call) Return(_a0 *filters.LocalFilter) *MockFilters_TrainingSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilters_TrainingSet_Call) RunAndReturn(run func() *filters.LocalFilter) *MockFilters_TrainingSet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFilters creates a new instance of MockFilters. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilters(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilters {
	mock := &MockFilters{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
