//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package classification

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"

	modulecapabilities "github.com/weaviate/weaviate/entities/modulecapabilities"
)

// MockModulesProvider is an autogenerated mock type for the ModulesProvider type
type MockModulesProvider struct {
	mock.Mock
}

type MockModulesProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModulesProvider) EXPECT() *MockModulesProvider_Expecter {
	return &MockModulesProvider_Expecter{mock: &_m.Mock}
}

// GetClassificationFn provides a mock function with given fields: className, name, params
func (_m *MockModulesProvider) GetClassificationFn(className string, name string, params modulecapabilities.ClassifyParams) (modulecapabilities.ClassifyItemFn, error) {
	ret := _m.Called(className, name, params)

	if len(ret) == 0 {
		panic("no return value specified for GetClassificationFn")
	}

	var r0 modulecapabilities.ClassifyItemFn
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, modulecapabilities.ClassifyParams) (modulecapabilities.ClassifyItemFn, error)); ok {
		return rf(className, name, params)
	}
	if rf, ok := ret.Get(0).(func(string, string, modulecapabilities.ClassifyParams) modulecapabilities.ClassifyItemFn); ok {
		r0 = rf(className, name, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(modulecapabilities.ClassifyItemFn)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, modulecapabilities.ClassifyParams) error); ok {
		r1 = rf(className, name, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModulesProvider_GetClassificationFn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClassificationFn'
type MockModulesProvider_GetClassificationFn_Call struct {
	*mock.Call
}

// GetClassificationFn is a helper method to define mock.On call
//   - className string
//   - name string
//   - params modulecapabilities.ClassifyParams
func (_e *MockModulesProvider_Expecter) GetClassificationFn(className interface{}, name interface{}, params interface{}) *MockModulesProvider_GetClassificationFn_Call {
	return &MockModulesProvider_GetClassificationFn_Call{Call: _e.mock.On("GetClassificationFn", className, name, params)}
}

func (_c *MockModulesProvider_GetClassificationFn_Call) Run(run func(className string, name string, params modulecapabilities.ClassifyParams)) *MockModulesProvider_GetClassificationFn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(modulecapabilities.ClassifyParams))
	})
	return _c
}

func (_c *MockModulesProvider_GetClassificationFn_Call) Return(_a0 modulecapabilities.ClassifyItemFn, _a1 error) *MockModulesProvider_GetClassificationFn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModulesProvider_GetClassificationFn_Call) RunAndReturn(run func(string, string, modulecapabilities.ClassifyParams) (modulecapabilities.ClassifyItemFn, error)) *MockModulesProvider_GetClassificationFn_Call {
	_c.Call.Return(run)
	return _c
}

// ParseClassifierSettings provides a mock function with given fields: name, params
func (_m *MockModulesProvider) ParseClassifierSettings(name string, params *models.Classification) error {
	ret := _m.Called(name, params)

	if len(ret) == 0 {
		panic("no return value specified for ParseClassifierSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.Classification) error); ok {
		r0 = rf(name, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModulesProvider_ParseClassifierSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseClassifierSettings'
type MockModulesProvider_ParseClassifierSettings_Call struct {
	*mock.Call
}

// ParseClassifierSettings is a helper method to define mock.On call
//   - name string
//   - params *models.Classification
func (_e *MockModulesProvider_Expecter) ParseClassifierSettings(name interface{}, params interface{}) *MockModulesProvider_ParseClassifierSettings_Call {
	return &MockModulesProvider_ParseClassifierSettings_Call{Call: _e.mock.On("ParseClassifierSettings", name, params)}
}

func (_c *MockModulesProvider_ParseClassifierSettings_Call) Run(run func(name string, params *models.Classification)) *MockModulesProvider_ParseClassifierSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*models.Classification))
	})
	return _c
}

func (_c *MockModulesProvider_ParseClassifierSettings_Call) Return(_a0 error) *MockModulesProvider_ParseClassifierSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_ParseClassifierSettings_Call) RunAndReturn(run func(string, *models.Classification) error) *MockModulesProvider_ParseClassifierSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModulesProvider creates a new instance of MockModulesProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModulesProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModulesProvider {
	mock := &MockModulesProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
