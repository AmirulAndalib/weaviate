//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package classification

import mock "github.com/stretchr/testify/mock"

// MockWriterResults is an autogenerated mock type for the WriterResults type
type MockWriterResults struct {
	mock.Mock
}

type MockWriterResults_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWriterResults) EXPECT() *MockWriterResults_Expecter {
	return &MockWriterResults_Expecter{mock: &_m.Mock}
}

// Err provides a mock function with given fields:
func (_m *MockWriterResults) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWriterResults_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockWriterResults_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockWriterResults_Expecter) Err() *MockWriterResults_Err_Call {
	return &MockWriterResults_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockWriterResults_Err_Call) Run(run func()) *MockWriterResults_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWriterResults_Err_Call) Return(_a0 error) *MockWriterResults_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWriterResults_Err_Call) RunAndReturn(run func() error) *MockWriterResults_Err_Call {
	_c.Call.Return(run)
	return _c
}

// ErrorCount provides a mock function with given fields:
func (_m *MockWriterResults) ErrorCount() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ErrorCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockWriterResults_ErrorCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorCount'
type MockWriterResults_ErrorCount_Call struct {
	*mock.Call
}

// ErrorCount is a helper method to define mock.On call
func (_e *MockWriterResults_Expecter) ErrorCount() *MockWriterResults_ErrorCount_Call {
	return &MockWriterResults_ErrorCount_Call{Call: _e.mock.On("ErrorCount")}
}

func (_c *MockWriterResults_ErrorCount_Call) Run(run func()) *MockWriterResults_ErrorCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWriterResults_ErrorCount_Call) Return(_a0 int64) *MockWriterResults_ErrorCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWriterResults_ErrorCount_Call) RunAndReturn(run func() int64) *MockWriterResults_ErrorCount_Call {
	_c.Call.Return(run)
	return _c
}

// SuccessCount provides a mock function with given fields:
func (_m *MockWriterResults) SuccessCount() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SuccessCount")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockWriterResults_SuccessCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuccessCount'
type MockWriterResults_SuccessCount_Call struct {
	*mock.Call
}

// SuccessCount is a helper method to define mock.On call
func (_e *MockWriterResults_Expecter) SuccessCount() *MockWriterResults_SuccessCount_Call {
	return &MockWriterResults_SuccessCount_Call{Call: _e.mock.On("SuccessCount")}
}

func (_c *MockWriterResults_SuccessCount_Call) Run(run func()) *MockWriterResults_SuccessCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWriterResults_SuccessCount_Call) Return(_a0 int64) *MockWriterResults_SuccessCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWriterResults_SuccessCount_Call) RunAndReturn(run func() int64) *MockWriterResults_SuccessCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWriterResults creates a new instance of MockWriterResults. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWriterResults(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWriterResults {
	mock := &MockWriterResults{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
