//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package classification

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	dto "github.com/weaviate/weaviate/entities/dto"

	filters "github.com/weaviate/weaviate/entities/filters"

	mock "github.com/stretchr/testify/mock"

	objects "github.com/weaviate/weaviate/usecases/objects"

	search "github.com/weaviate/weaviate/entities/search"
)

// MockvectorRepo is an autogenerated mock type for the vectorRepo type
type MockvectorRepo struct {
	mock.Mock
}

type MockvectorRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockvectorRepo) EXPECT() *MockvectorRepo_Expecter {
	return &MockvectorRepo_Expecter{mock: &_m.Mock}
}

// AggregateNeighbors provides a mock function with given fields: ctx, vector, class, properties, k, filter
func (_m *MockvectorRepo) AggregateNeighbors(ctx context.Context, vector []float32, class string, properties []string, k int, filter *filters.LocalFilter) ([]NeighborRef, error) {
	ret := _m.Called(ctx, vector, class, properties, k, filter)

	if len(ret) == 0 {
		panic("no return value specified for AggregateNeighbors")
	}

	var r0 []NeighborRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []float32, string, []string, int, *filters.LocalFilter) ([]NeighborRef, error)); ok {
		return rf(ctx, vector, class, properties, k, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []float32, string, []string, int, *filters.LocalFilter) []NeighborRef); ok {
		r0 = rf(ctx, vector, class, properties, k, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NeighborRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []float32, string, []string, int, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, vector, class, properties, k, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_AggregateNeighbors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AggregateNeighbors'
type MockvectorRepo_AggregateNeighbors_Call struct {
	*mock.Call
}

// AggregateNeighbors is a helper method to define mock.On call
//   - ctx context.Context
//   - vector []float32
//   - class string
//   - properties []string
//   - k int
//   - filter *filters.LocalFilter
func (_e *MockvectorRepo_Expecter) AggregateNeighbors(ctx interface{}, vector interface{}, class interface{}, properties interface{}, k interface{}, filter interface{}) *MockvectorRepo_AggregateNeighbors_Call {
	return &MockvectorRepo_AggregateNeighbors_Call{Call: _e.mock.On("AggregateNeighbors", ctx, vector, class, properties, k, filter)}
}

func (_c *MockvectorRepo_AggregateNeighbors_Call) Run(run func(ctx context.Context, vector []float32, class string, properties []string, k int, filter *filters.LocalFilter)) *MockvectorRepo_AggregateNeighbors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]float32), args[2].(string), args[3].([]string), args[4].(int), args[5].(*filters.LocalFilter))
	})
	return _c
}

func (_c *MockvectorRepo_AggregateNeighbors_Call) Return(_a0 []NeighborRef, _a1 error) *MockvectorRepo_AggregateNeighbors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_AggregateNeighbors_Call) RunAndReturn(run func(context.Context, []float32, string, []string, int, *filters.LocalFilter) ([]NeighborRef, error)) *MockvectorRepo_AggregateNeighbors_Call {
	_c.Call.Return(run)
	return _c
}

// BatchPutObjects provides a mock function with given fields: ctx, _a1, repl
func (_m *MockvectorRepo) BatchPutObjects(ctx context.Context, _a1 objects.BatchObjects, repl *additional.ReplicationProperties) (objects.BatchObjects, error) {
	ret := _m.Called(ctx, _a1, repl)

	if len(ret) == 0 {
		panic("no return value specified for BatchPutObjects")
	}

	var r0 objects.BatchObjects
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, objects.BatchObjects, *additional.ReplicationProperties) (objects.BatchObjects, error)); ok {
		return rf(ctx, _a1, repl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, objects.BatchObjects, *additional.ReplicationProperties) objects.BatchObjects); ok {
		r0 = rf(ctx, _a1, repl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(objects.BatchObjects)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, objects.BatchObjects, *additional.ReplicationProperties) error); ok {
		r1 = rf(ctx, _a1, repl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_BatchPutObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchPutObjects'
type MockvectorRepo_BatchPutObjects_Call struct {
	*mock.Call
}

// BatchPutObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 objects.BatchObjects
//   - repl *additional.ReplicationProperties
func (_e *MockvectorRepo_Expecter) BatchPutObjects(ctx interface{}, _a1 interface{}, repl interface{}) *MockvectorRepo_BatchPutObjects_Call {
	return &MockvectorRepo_BatchPutObjects_Call{Call: _e.mock.On("BatchPutObjects", ctx, _a1, repl)}
}

func (_c *MockvectorRepo_BatchPutObjects_Call) Run(run func(ctx context.Context, _a1 objects.BatchObjects, repl *additional.ReplicationProperties)) *MockvectorRepo_BatchPutObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(objects.BatchObjects), args[2].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockvectorRepo_BatchPutObjects_Call) Return(_a0 objects.BatchObjects, _a1 error) *MockvectorRepo_BatchPutObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_BatchPutObjects_Call) RunAndReturn(run func(context.Context, objects.BatchObjects, *additional.ReplicationProperties) (objects.BatchObjects, error)) *MockvectorRepo_BatchPutObjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnclassified provides a mock function with given fields: ctx, class, properties, filter
func (_m *MockvectorRepo) GetUnclassified(ctx context.Context, class string, properties []string, filter *filters.LocalFilter) ([]search.Result, error) {
	ret := _m.Called(ctx, class, properties, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetUnclassified")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, *filters.LocalFilter) ([]search.Result, error)); ok {
		return rf(ctx, class, properties, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, *filters.LocalFilter) []search.Result); ok {
		r0 = rf(ctx, class, properties, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, class, properties, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_GetUnclassified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnclassified'
type MockvectorRepo_GetUnclassified_Call struct {
	*mock.Call
}

// GetUnclassified is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
//   - properties []string
//   - filter *filters.LocalFilter
func (_e *MockvectorRepo_Expecter) GetUnclassified(ctx interface{}, class interface{}, properties interface{}, filter interface{}) *MockvectorRepo_GetUnclassified_Call {
	return &MockvectorRepo_GetUnclassified_Call{Call: _e.mock.On("GetUnclassified", ctx, class, properties, filter)}
}

func (_c *MockvectorRepo_GetUnclassified_Call) Run(run func(ctx context.Context, class string, properties []string, filter *filters.LocalFilter)) *MockvectorRepo_GetUnclassified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].(*filters.LocalFilter))
	})
	return _c
}

func (_c *MockvectorRepo_GetUnclassified_Call) Return(_a0 []search.Result, _a1 error) *MockvectorRepo_GetUnclassified_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_GetUnclassified_Call) RunAndReturn(run func(context.Context, string, []string, *filters.LocalFilter) ([]search.Result, error)) *MockvectorRepo_GetUnclassified_Call {
	_c.Call.Return(run)
	return _c
}

// VectorSearch provides a mock function with given fields: ctx, params
func (_m *MockvectorRepo) VectorSearch(ctx context.Context, params dto.GetParams) ([]search.Result, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for VectorSearch")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetParams) ([]search.Result, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetParams) []search.Result); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_VectorSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorSearch'
type MockvectorRepo_VectorSearch_Call struct {
	*mock.Call
}

// VectorSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - params dto.GetParams
func (_e *MockvectorRepo_Expecter) VectorSearch(ctx interface{}, params interface{}) *MockvectorRepo_VectorSearch_Call {
	return &MockvectorRepo_VectorSearch_Call{Call: _e.mock.On("VectorSearch", ctx, params)}
}

func (_c *MockvectorRepo_VectorSearch_Call) Run(run func(ctx context.Context, params dto.GetParams)) *MockvectorRepo_VectorSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.GetParams))
	})
	return _c
}

func (_c *MockvectorRepo_VectorSearch_Call) Return(_a0 []search.Result, _a1 error) *MockvectorRepo_VectorSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_VectorSearch_Call) RunAndReturn(run func(context.Context, dto.GetParams) ([]search.Result, error)) *MockvectorRepo_VectorSearch_Call {
	_c.Call.Return(run)
	return _c
}

// ZeroShotSearch provides a mock function with given fields: ctx, vector, class, properties, filter
func (_m *MockvectorRepo) ZeroShotSearch(ctx context.Context, vector []float32, class string, properties []string, filter *filters.LocalFilter) ([]search.Result, error) {
	ret := _m.Called(ctx, vector, class, properties, filter)

	if len(ret) == 0 {
		panic("no return value specified for ZeroShotSearch")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []float32, string, []string, *filters.LocalFilter) ([]search.Result, error)); ok {
		return rf(ctx, vector, class, properties, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []float32, string, []string, *filters.LocalFilter) []search.Result); ok {
		r0 = rf(ctx, vector, class, properties, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []float32, string, []string, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, vector, class, properties, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockvectorRepo_ZeroShotSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZeroShotSearch'
type MockvectorRepo_ZeroShotSearch_Call struct {
	*mock.Call
}

// ZeroShotSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - vector []float32
//   - class string
//   - properties []string
//   - filter *filters.LocalFilter
func (_e *MockvectorRepo_Expecter) ZeroShotSearch(ctx interface{}, vector interface{}, class interface{}, properties interface{}, filter interface{}) *MockvectorRepo_ZeroShotSearch_Call {
	return &MockvectorRepo_ZeroShotSearch_Call{Call: _e.mock.On("ZeroShotSearch", ctx, vector, class, properties, filter)}
}

func (_c *MockvectorRepo_ZeroShotSearch_Call) Run(run func(ctx context.Context, vector []float32, class string, properties []string, filter *filters.LocalFilter)) *MockvectorRepo_ZeroShotSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]float32), args[2].(string), args[3].([]string), args[4].(*filters.LocalFilter))
	})
	return _c
}

func (_c *MockvectorRepo_ZeroShotSearch_Call) Return(_a0 []search.Result, _a1 error) *MockvectorRepo_ZeroShotSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockvectorRepo_ZeroShotSearch_Call) RunAndReturn(run func(context.Context, []float32, string, []string, *filters.LocalFilter) ([]search.Result, error)) *MockvectorRepo_ZeroShotSearch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockvectorRepo creates a new instance of MockvectorRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockvectorRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockvectorRepo {
	mock := &MockvectorRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
