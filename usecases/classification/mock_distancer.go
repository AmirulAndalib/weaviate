//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package classification

import mock "github.com/stretchr/testify/mock"

// Mockdistancer is an autogenerated mock type for the distancer type
type Mockdistancer struct {
	mock.Mock
}

type Mockdistancer_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockdistancer) EXPECT() *Mockdistancer_Expecter {
	return &Mockdistancer_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: a, b
func (_m *Mockdistancer) Execute(a []float32, b []float32) (float32, error) {
	ret := _m.Called(a, b)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func([]float32, []float32) (float32, error)); ok {
		return rf(a, b)
	}
	if rf, ok := ret.Get(0).(func([]float32, []float32) float32); ok {
		r0 = rf(a, b)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func([]float32, []float32) error); ok {
		r1 = rf(a, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockdistancer_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Mockdistancer_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - a []float32
//   - b []float32
func (_e *Mockdistancer_Expecter) Execute(a interface{}, b interface{}) *Mockdistancer_Execute_Call {
	return &Mockdistancer_Execute_Call{Call: _e.mock.On("Execute", a, b)}
}

func (_c *Mockdistancer_Execute_Call) Run(run func(a []float32, b []float32)) *Mockdistancer_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float32), args[1].([]float32))
	})
	return _c
}

func (_c *Mockdistancer_Execute_Call) Return(_a0 float32, _a1 error) *Mockdistancer_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockdistancer_Execute_Call) RunAndReturn(run func([]float32, []float32) (float32, error)) *Mockdistancer_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdistancer creates a new instance of Mockdistancer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdistancer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockdistancer {
	mock := &Mockdistancer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
