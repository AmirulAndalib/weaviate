//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package traverser

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	search "github.com/weaviate/weaviate/entities/search"

	strfmt "github.com/go-openapi/strfmt"
)

// MockModulesProvider is an autogenerated mock type for the ModulesProvider type
type MockModulesProvider struct {
	mock.Mock
}

type MockModulesProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModulesProvider) EXPECT() *MockModulesProvider_Expecter {
	return &MockModulesProvider_Expecter{mock: &_m.Mock}
}

// CrossClassValidateSearchParam provides a mock function with given fields: name, value
func (_m *MockModulesProvider) CrossClassValidateSearchParam(name string, value interface{}) error {
	ret := _m.Called(name, value)

	if len(ret) == 0 {
		panic("no return value specified for CrossClassValidateSearchParam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(name, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModulesProvider_CrossClassValidateSearchParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CrossClassValidateSearchParam'
type MockModulesProvider_CrossClassValidateSearchParam_Call struct {
	*mock.Call
}

// CrossClassValidateSearchParam is a helper method to define mock.On call
//   - name string
//   - value interface{}
func (_e *MockModulesProvider_Expecter) CrossClassValidateSearchParam(name interface{}, value interface{}) *MockModulesProvider_CrossClassValidateSearchParam_Call {
	return &MockModulesProvider_CrossClassValidateSearchParam_Call{Call: _e.mock.On("CrossClassValidateSearchParam", name, value)}
}

func (_c *MockModulesProvider_CrossClassValidateSearchParam_Call) Run(run func(name string, value interface{})) *MockModulesProvider_CrossClassValidateSearchParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockModulesProvider_CrossClassValidateSearchParam_Call) Return(_a0 error) *MockModulesProvider_CrossClassValidateSearchParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_CrossClassValidateSearchParam_Call) RunAndReturn(run func(string, interface{}) error) *MockModulesProvider_CrossClassValidateSearchParam_Call {
	_c.Call.Return(run)
	return _c
}

// CrossClassVectorFromSearchParam provides a mock function with given fields: ctx, param, params, findVectorFn
func (_m *MockModulesProvider) CrossClassVectorFromSearchParam(ctx context.Context, param string, params interface{}, findVectorFn func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error)) ([]float32, string, error) {
	ret := _m.Called(ctx, param, params, findVectorFn)

	if len(ret) == 0 {
		panic("no return value specified for CrossClassVectorFromSearchParam")
	}

	var r0 []float32
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error)) ([]float32, string, error)); ok {
		return rf(ctx, param, params, findVectorFn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error)) []float32); ok {
		r0 = rf(ctx, param, params, findVectorFn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error)) string); ok {
		r1 = rf(ctx, param, params, findVectorFn)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, interface{}, func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error)) error); ok {
		r2 = rf(ctx, param, params, findVectorFn)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockModulesProvider_CrossClassVectorFromSearchParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CrossClassVectorFromSearchParam'
type MockModulesProvider_CrossClassVectorFromSearchParam_Call struct {
	*mock.Call
}

// CrossClassVectorFromSearchParam is a helper method to define mock.On call
//   - ctx context.Context
//   - param string
//   - params interface{}
//   - findVectorFn func(context.Context , string , strfmt.UUID , string , string)([]float32 , string , error)
func (_e *MockModulesProvider_Expecter) CrossClassVectorFromSearchParam(ctx interface{}, param interface{}, params interface{}, findVectorFn interface{}) *MockModulesProvider_CrossClassVectorFromSearchParam_Call {
	return &MockModulesProvider_CrossClassVectorFromSearchParam_Call{Call: _e.mock.On("CrossClassVectorFromSearchParam", ctx, param, params, findVectorFn)}
}

func (_c *MockModulesProvider_CrossClassVectorFromSearchParam_Call) Run(run func(ctx context.Context, param string, params interface{}, findVectorFn func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error))) *MockModulesProvider_CrossClassVectorFromSearchParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error)))
	})
	return _c
}

func (_c *MockModulesProvider_CrossClassVectorFromSearchParam_Call) Return(_a0 []float32, _a1 string, _a2 error) *MockModulesProvider_CrossClassVectorFromSearchParam_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockModulesProvider_CrossClassVectorFromSearchParam_Call) RunAndReturn(run func(context.Context, string, interface{}, func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error)) ([]float32, string, error)) *MockModulesProvider_CrossClassVectorFromSearchParam_Call {
	_c.Call.Return(run)
	return _c
}

// GetExploreAdditionalExtend provides a mock function with given fields: ctx, in, moduleParams, searchVector, argumentModuleParams
func (_m *MockModulesProvider) GetExploreAdditionalExtend(ctx context.Context, in []search.Result, moduleParams map[string]interface{}, searchVector []float32, argumentModuleParams map[string]interface{}) ([]search.Result, error) {
	ret := _m.Called(ctx, in, moduleParams, searchVector, argumentModuleParams)

	if len(ret) == 0 {
		panic("no return value specified for GetExploreAdditionalExtend")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []search.Result, map[string]interface{}, []float32, map[string]interface{}) ([]search.Result, error)); ok {
		return rf(ctx, in, moduleParams, searchVector, argumentModuleParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []search.Result, map[string]interface{}, []float32, map[string]interface{}) []search.Result); ok {
		r0 = rf(ctx, in, moduleParams, searchVector, argumentModuleParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []search.Result, map[string]interface{}, []float32, map[string]interface{}) error); ok {
		r1 = rf(ctx, in, moduleParams, searchVector, argumentModuleParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModulesProvider_GetExploreAdditionalExtend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExploreAdditionalExtend'
type MockModulesProvider_GetExploreAdditionalExtend_Call struct {
	*mock.Call
}

// GetExploreAdditionalExtend is a helper method to define mock.On call
//   - ctx context.Context
//   - in []search.Result
//   - moduleParams map[string]interface{}
//   - searchVector []float32
//   - argumentModuleParams map[string]interface{}
func (_e *MockModulesProvider_Expecter) GetExploreAdditionalExtend(ctx interface{}, in interface{}, moduleParams interface{}, searchVector interface{}, argumentModuleParams interface{}) *MockModulesProvider_GetExploreAdditionalExtend_Call {
	return &MockModulesProvider_GetExploreAdditionalExtend_Call{Call: _e.mock.On("GetExploreAdditionalExtend", ctx, in, moduleParams, searchVector, argumentModuleParams)}
}

func (_c *MockModulesProvider_GetExploreAdditionalExtend_Call) Run(run func(ctx context.Context, in []search.Result, moduleParams map[string]interface{}, searchVector []float32, argumentModuleParams map[string]interface{})) *MockModulesProvider_GetExploreAdditionalExtend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]search.Result), args[2].(map[string]interface{}), args[3].([]float32), args[4].(map[string]interface{}))
	})
	return _c
}

func (_c *MockModulesProvider_GetExploreAdditionalExtend_Call) Return(_a0 []search.Result, _a1 error) *MockModulesProvider_GetExploreAdditionalExtend_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModulesProvider_GetExploreAdditionalExtend_Call) RunAndReturn(run func(context.Context, []search.Result, map[string]interface{}, []float32, map[string]interface{}) ([]search.Result, error)) *MockModulesProvider_GetExploreAdditionalExtend_Call {
	_c.Call.Return(run)
	return _c
}

// ListExploreAdditionalExtend provides a mock function with given fields: ctx, in, moduleParams, argumentModuleParams
func (_m *MockModulesProvider) ListExploreAdditionalExtend(ctx context.Context, in []search.Result, moduleParams map[string]interface{}, argumentModuleParams map[string]interface{}) ([]search.Result, error) {
	ret := _m.Called(ctx, in, moduleParams, argumentModuleParams)

	if len(ret) == 0 {
		panic("no return value specified for ListExploreAdditionalExtend")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []search.Result, map[string]interface{}, map[string]interface{}) ([]search.Result, error)); ok {
		return rf(ctx, in, moduleParams, argumentModuleParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []search.Result, map[string]interface{}, map[string]interface{}) []search.Result); ok {
		r0 = rf(ctx, in, moduleParams, argumentModuleParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []search.Result, map[string]interface{}, map[string]interface{}) error); ok {
		r1 = rf(ctx, in, moduleParams, argumentModuleParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModulesProvider_ListExploreAdditionalExtend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExploreAdditionalExtend'
type MockModulesProvider_ListExploreAdditionalExtend_Call struct {
	*mock.Call
}

// ListExploreAdditionalExtend is a helper method to define mock.On call
//   - ctx context.Context
//   - in []search.Result
//   - moduleParams map[string]interface{}
//   - argumentModuleParams map[string]interface{}
func (_e *MockModulesProvider_Expecter) ListExploreAdditionalExtend(ctx interface{}, in interface{}, moduleParams interface{}, argumentModuleParams interface{}) *MockModulesProvider_ListExploreAdditionalExtend_Call {
	return &MockModulesProvider_ListExploreAdditionalExtend_Call{Call: _e.mock.On("ListExploreAdditionalExtend", ctx, in, moduleParams, argumentModuleParams)}
}

func (_c *MockModulesProvider_ListExploreAdditionalExtend_Call) Run(run func(ctx context.Context, in []search.Result, moduleParams map[string]interface{}, argumentModuleParams map[string]interface{})) *MockModulesProvider_ListExploreAdditionalExtend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]search.Result), args[2].(map[string]interface{}), args[3].(map[string]interface{}))
	})
	return _c
}

func (_c *MockModulesProvider_ListExploreAdditionalExtend_Call) Return(_a0 []search.Result, _a1 error) *MockModulesProvider_ListExploreAdditionalExtend_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModulesProvider_ListExploreAdditionalExtend_Call) RunAndReturn(run func(context.Context, []search.Result, map[string]interface{}, map[string]interface{}) ([]search.Result, error)) *MockModulesProvider_ListExploreAdditionalExtend_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSearchParam provides a mock function with given fields: name, value, className
func (_m *MockModulesProvider) ValidateSearchParam(name string, value interface{}, className string) error {
	ret := _m.Called(name, value, className)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSearchParam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, string) error); ok {
		r0 = rf(name, value, className)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModulesProvider_ValidateSearchParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSearchParam'
type MockModulesProvider_ValidateSearchParam_Call struct {
	*mock.Call
}

// ValidateSearchParam is a helper method to define mock.On call
//   - name string
//   - value interface{}
//   - className string
func (_e *MockModulesProvider_Expecter) ValidateSearchParam(name interface{}, value interface{}, className interface{}) *MockModulesProvider_ValidateSearchParam_Call {
	return &MockModulesProvider_ValidateSearchParam_Call{Call: _e.mock.On("ValidateSearchParam", name, value, className)}
}

func (_c *MockModulesProvider_ValidateSearchParam_Call) Run(run func(name string, value interface{}, className string)) *MockModulesProvider_ValidateSearchParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *MockModulesProvider_ValidateSearchParam_Call) Return(_a0 error) *MockModulesProvider_ValidateSearchParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_ValidateSearchParam_Call) RunAndReturn(run func(string, interface{}, string) error) *MockModulesProvider_ValidateSearchParam_Call {
	_c.Call.Return(run)
	return _c
}

// VectorFromInput provides a mock function with given fields: ctx, className, input, targetVector
func (_m *MockModulesProvider) VectorFromInput(ctx context.Context, className string, input string, targetVector string) ([]float32, error) {
	ret := _m.Called(ctx, className, input, targetVector)

	if len(ret) == 0 {
		panic("no return value specified for VectorFromInput")
	}

	var r0 []float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]float32, error)); ok {
		return rf(ctx, className, input, targetVector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []float32); ok {
		r0 = rf(ctx, className, input, targetVector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, className, input, targetVector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModulesProvider_VectorFromInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorFromInput'
type MockModulesProvider_VectorFromInput_Call struct {
	*mock.Call
}

// VectorFromInput is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - input string
//   - targetVector string
func (_e *MockModulesProvider_Expecter) VectorFromInput(ctx interface{}, className interface{}, input interface{}, targetVector interface{}) *MockModulesProvider_VectorFromInput_Call {
	return &MockModulesProvider_VectorFromInput_Call{Call: _e.mock.On("VectorFromInput", ctx, className, input, targetVector)}
}

func (_c *MockModulesProvider_VectorFromInput_Call) Run(run func(ctx context.Context, className string, input string, targetVector string)) *MockModulesProvider_VectorFromInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockModulesProvider_VectorFromInput_Call) Return(_a0 []float32, _a1 error) *MockModulesProvider_VectorFromInput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModulesProvider_VectorFromInput_Call) RunAndReturn(run func(context.Context, string, string, string) ([]float32, error)) *MockModulesProvider_VectorFromInput_Call {
	_c.Call.Return(run)
	return _c
}

// VectorFromSearchParam provides a mock function with given fields: ctx, className, param, params, findVectorFn, tenant
func (_m *MockModulesProvider) VectorFromSearchParam(ctx context.Context, className string, param string, params interface{}, findVectorFn func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error), tenant string) ([]float32, string, error) {
	ret := _m.Called(ctx, className, param, params, findVectorFn, tenant)

	if len(ret) == 0 {
		panic("no return value specified for VectorFromSearchParam")
	}

	var r0 []float32
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error), string) ([]float32, string, error)); ok {
		return rf(ctx, className, param, params, findVectorFn, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error), string) []float32); ok {
		r0 = rf(ctx, className, param, params, findVectorFn, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error), string) string); ok {
		r1 = rf(ctx, className, param, params, findVectorFn, tenant)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, interface{}, func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error), string) error); ok {
		r2 = rf(ctx, className, param, params, findVectorFn, tenant)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockModulesProvider_VectorFromSearchParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorFromSearchParam'
type MockModulesProvider_VectorFromSearchParam_Call struct {
	*mock.Call
}

// VectorFromSearchParam is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - param string
//   - params interface{}
//   - findVectorFn func(context.Context , string , strfmt.UUID , string , string)([]float32 , string , error)
//   - tenant string
func (_e *MockModulesProvider_Expecter) VectorFromSearchParam(ctx interface{}, className interface{}, param interface{}, params interface{}, findVectorFn interface{}, tenant interface{}) *MockModulesProvider_VectorFromSearchParam_Call {
	return &MockModulesProvider_VectorFromSearchParam_Call{Call: _e.mock.On("VectorFromSearchParam", ctx, className, param, params, findVectorFn, tenant)}
}

func (_c *MockModulesProvider_VectorFromSearchParam_Call) Run(run func(ctx context.Context, className string, param string, params interface{}, findVectorFn func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error), tenant string)) *MockModulesProvider_VectorFromSearchParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error)), args[5].(string))
	})
	return _c
}

func (_c *MockModulesProvider_VectorFromSearchParam_Call) Return(_a0 []float32, _a1 string, _a2 error) *MockModulesProvider_VectorFromSearchParam_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockModulesProvider_VectorFromSearchParam_Call) RunAndReturn(run func(context.Context, string, string, interface{}, func(context.Context, string, strfmt.UUID, string, string) ([]float32, string, error), string) ([]float32, string, error)) *MockModulesProvider_VectorFromSearchParam_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModulesProvider creates a new instance of MockModulesProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModulesProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModulesProvider {
	mock := &MockModulesProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
