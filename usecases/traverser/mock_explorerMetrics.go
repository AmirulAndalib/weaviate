//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package traverser

import mock "github.com/stretchr/testify/mock"

// MockexplorerMetrics is an autogenerated mock type for the explorerMetrics type
type MockexplorerMetrics struct {
	mock.Mock
}

type MockexplorerMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockexplorerMetrics) EXPECT() *MockexplorerMetrics_Expecter {
	return &MockexplorerMetrics_Expecter{mock: &_m.Mock}
}

// AddUsageDimensions provides a mock function with given fields: className, queryType, operation, dims
func (_m *MockexplorerMetrics) AddUsageDimensions(className string, queryType string, operation string, dims int) {
	_m.Called(className, queryType, operation, dims)
}

// MockexplorerMetrics_AddUsageDimensions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUsageDimensions'
type MockexplorerMetrics_AddUsageDimensions_Call struct {
	*mock.Call
}

// AddUsageDimensions is a helper method to define mock.On call
//   - className string
//   - queryType string
//   - operation string
//   - dims int
func (_e *MockexplorerMetrics_Expecter) AddUsageDimensions(className interface{}, queryType interface{}, operation interface{}, dims interface{}) *MockexplorerMetrics_AddUsageDimensions_Call {
	return &MockexplorerMetrics_AddUsageDimensions_Call{Call: _e.mock.On("AddUsageDimensions", className, queryType, operation, dims)}
}

func (_c *MockexplorerMetrics_AddUsageDimensions_Call) Run(run func(className string, queryType string, operation string, dims int)) *MockexplorerMetrics_AddUsageDimensions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockexplorerMetrics_AddUsageDimensions_Call) Return() *MockexplorerMetrics_AddUsageDimensions_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockexplorerMetrics_AddUsageDimensions_Call) RunAndReturn(run func(string, string, string, int)) *MockexplorerMetrics_AddUsageDimensions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockexplorerMetrics creates a new instance of MockexplorerMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockexplorerMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockexplorerMetrics {
	mock := &MockexplorerMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
