//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package traverser

import (
	additional "github.com/weaviate/weaviate/entities/additional"
	aggregation "github.com/weaviate/weaviate/entities/aggregation"

	context "context"

	mock "github.com/stretchr/testify/mock"

	search "github.com/weaviate/weaviate/entities/search"

	strfmt "github.com/go-openapi/strfmt"
)

// MockVectorSearcher is an autogenerated mock type for the VectorSearcher type
type MockVectorSearcher struct {
	mock.Mock
}

type MockVectorSearcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVectorSearcher) EXPECT() *MockVectorSearcher_Expecter {
	return &MockVectorSearcher_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with given fields: ctx, params
func (_m *MockVectorSearcher) Aggregate(ctx context.Context, params aggregation.Params) (*aggregation.Result, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 *aggregation.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aggregation.Params) (*aggregation.Result, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aggregation.Params) *aggregation.Result); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregation.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aggregation.Params) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorSearcher_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockVectorSearcher_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - params aggregation.Params
func (_e *MockVectorSearcher_Expecter) Aggregate(ctx interface{}, params interface{}) *MockVectorSearcher_Aggregate_Call {
	return &MockVectorSearcher_Aggregate_Call{Call: _e.mock.On("Aggregate", ctx, params)}
}

func (_c *MockVectorSearcher_Aggregate_Call) Run(run func(ctx context.Context, params aggregation.Params)) *MockVectorSearcher_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aggregation.Params))
	})
	return _c
}

func (_c *MockVectorSearcher_Aggregate_Call) Return(_a0 *aggregation.Result, _a1 error) *MockVectorSearcher_Aggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorSearcher_Aggregate_Call) RunAndReturn(run func(context.Context, aggregation.Params) (*aggregation.Result, error)) *MockVectorSearcher_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// Object provides a mock function with given fields: ctx, className, id, props, _a4, properties, tenant
func (_m *MockVectorSearcher) Object(ctx context.Context, className string, id strfmt.UUID, props search.SelectProperties, _a4 additional.Properties, properties *additional.ReplicationProperties, tenant string) (*search.Result, error) {
	ret := _m.Called(ctx, className, id, props, _a4, properties, tenant)

	if len(ret) == 0 {
		panic("no return value specified for Object")
	}

	var r0 *search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) (*search.Result, error)); ok {
		return rf(ctx, className, id, props, _a4, properties, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) *search.Result); ok {
		r0 = rf(ctx, className, id, props, _a4, properties, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) error); ok {
		r1 = rf(ctx, className, id, props, _a4, properties, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorSearcher_Object_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Object'
type MockVectorSearcher_Object_Call struct {
	*mock.Call
}

// Object is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a4 additional.Properties
//   - properties *additional.ReplicationProperties
//   - tenant string
func (_e *MockVectorSearcher_Expecter) Object(ctx interface{}, className interface{}, id interface{}, props interface{}, _a4 interface{}, properties interface{}, tenant interface{}) *MockVectorSearcher_Object_Call {
	return &MockVectorSearcher_Object_Call{Call: _e.mock.On("Object", ctx, className, id, props, _a4, properties, tenant)}
}

func (_c *MockVectorSearcher_Object_Call) Run(run func(ctx context.Context, className string, id strfmt.UUID, props search.SelectProperties, _a4 additional.Properties, properties *additional.ReplicationProperties, tenant string)) *MockVectorSearcher_Object_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID), args[3].(search.SelectProperties), args[4].(additional.Properties), args[5].(*additional.ReplicationProperties), args[6].(string))
	})
	return _c
}

func (_c *MockVectorSearcher_Object_Call) Return(_a0 *search.Result, _a1 error) *MockVectorSearcher_Object_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorSearcher_Object_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) (*search.Result, error)) *MockVectorSearcher_Object_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsByID provides a mock function with given fields: ctx, id, props, _a3, tenant
func (_m *MockVectorSearcher) ObjectsByID(ctx context.Context, id strfmt.UUID, props search.SelectProperties, _a3 additional.Properties, tenant string) (search.Results, error) {
	ret := _m.Called(ctx, id, props, _a3, tenant)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsByID")
	}

	var r0 search.Results
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) (search.Results, error)); ok {
		return rf(ctx, id, props, _a3, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) search.Results); ok {
		r0 = rf(ctx, id, props, _a3, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(search.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) error); ok {
		r1 = rf(ctx, id, props, _a3, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorSearcher_ObjectsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsByID'
type MockVectorSearcher_ObjectsByID_Call struct {
	*mock.Call
}

// ObjectsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a3 additional.Properties
//   - tenant string
func (_e *MockVectorSearcher_Expecter) ObjectsByID(ctx interface{}, id interface{}, props interface{}, _a3 interface{}, tenant interface{}) *MockVectorSearcher_ObjectsByID_Call {
	return &MockVectorSearcher_ObjectsByID_Call{Call: _e.mock.On("ObjectsByID", ctx, id, props, _a3, tenant)}
}

func (_c *MockVectorSearcher_ObjectsByID_Call) Run(run func(ctx context.Context, id strfmt.UUID, props search.SelectProperties, _a3 additional.Properties, tenant string)) *MockVectorSearcher_ObjectsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(strfmt.UUID), args[2].(search.SelectProperties), args[3].(additional.Properties), args[4].(string))
	})
	return _c
}

func (_c *MockVectorSearcher_ObjectsByID_Call) Return(_a0 search.Results, _a1 error) *MockVectorSearcher_ObjectsByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorSearcher_ObjectsByID_Call) RunAndReturn(run func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) (search.Results, error)) *MockVectorSearcher_ObjectsByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVectorSearcher creates a new instance of MockVectorSearcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVectorSearcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVectorSearcher {
	mock := &MockVectorSearcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
