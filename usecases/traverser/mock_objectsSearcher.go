//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package traverser

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	dto "github.com/weaviate/weaviate/entities/dto"

	filters "github.com/weaviate/weaviate/entities/filters"

	mock "github.com/stretchr/testify/mock"

	search "github.com/weaviate/weaviate/entities/search"

	searchparams "github.com/weaviate/weaviate/entities/searchparams"

	storobj "github.com/weaviate/weaviate/entities/storobj"

	strfmt "github.com/go-openapi/strfmt"
)

// MockobjectsSearcher is an autogenerated mock type for the objectsSearcher type
type MockobjectsSearcher struct {
	mock.Mock
}

type MockobjectsSearcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockobjectsSearcher) EXPECT() *MockobjectsSearcher_Expecter {
	return &MockobjectsSearcher_Expecter{mock: &_m.Mock}
}

// CrossClassVectorSearch provides a mock function with given fields: ctx, vector, targetVector, offset, limit, _a5
func (_m *MockobjectsSearcher) CrossClassVectorSearch(ctx context.Context, vector []float32, targetVector string, offset int, limit int, _a5 *filters.LocalFilter) ([]search.Result, error) {
	ret := _m.Called(ctx, vector, targetVector, offset, limit, _a5)

	if len(ret) == 0 {
		panic("no return value specified for CrossClassVectorSearch")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []float32, string, int, int, *filters.LocalFilter) ([]search.Result, error)); ok {
		return rf(ctx, vector, targetVector, offset, limit, _a5)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []float32, string, int, int, *filters.LocalFilter) []search.Result); ok {
		r0 = rf(ctx, vector, targetVector, offset, limit, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []float32, string, int, int, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, vector, targetVector, offset, limit, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsSearcher_CrossClassVectorSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CrossClassVectorSearch'
type MockobjectsSearcher_CrossClassVectorSearch_Call struct {
	*mock.Call
}

// CrossClassVectorSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - vector []float32
//   - targetVector string
//   - offset int
//   - limit int
//   - _a5 *filters.LocalFilter
func (_e *MockobjectsSearcher_Expecter) CrossClassVectorSearch(ctx interface{}, vector interface{}, targetVector interface{}, offset interface{}, limit interface{}, _a5 interface{}) *MockobjectsSearcher_CrossClassVectorSearch_Call {
	return &MockobjectsSearcher_CrossClassVectorSearch_Call{Call: _e.mock.On("CrossClassVectorSearch", ctx, vector, targetVector, offset, limit, _a5)}
}

func (_c *MockobjectsSearcher_CrossClassVectorSearch_Call) Run(run func(ctx context.Context, vector []float32, targetVector string, offset int, limit int, _a5 *filters.LocalFilter)) *MockobjectsSearcher_CrossClassVectorSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]float32), args[2].(string), args[3].(int), args[4].(int), args[5].(*filters.LocalFilter))
	})
	return _c
}

func (_c *MockobjectsSearcher_CrossClassVectorSearch_Call) Return(_a0 []search.Result, _a1 error) *MockobjectsSearcher_CrossClassVectorSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsSearcher_CrossClassVectorSearch_Call) RunAndReturn(run func(context.Context, []float32, string, int, int, *filters.LocalFilter) ([]search.Result, error)) *MockobjectsSearcher_CrossClassVectorSearch_Call {
	_c.Call.Return(run)
	return _c
}

// DenseObjectSearch provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8
func (_m *MockobjectsSearcher) DenseObjectSearch(_a0 context.Context, _a1 string, _a2 []float32, _a3 string, _a4 int, _a5 int, _a6 *filters.LocalFilter, _a7 additional.Properties, _a8 string) ([]*storobj.Object, []float32, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)

	if len(ret) == 0 {
		panic("no return value specified for DenseObjectSearch")
	}

	var r0 []*storobj.Object
	var r1 []float32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []float32, string, int, int, *filters.LocalFilter, additional.Properties, string) ([]*storobj.Object, []float32, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []float32, string, int, int, *filters.LocalFilter, additional.Properties, string) []*storobj.Object); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []float32, string, int, int, *filters.LocalFilter, additional.Properties, string) []float32); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float32)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, []float32, string, int, int, *filters.LocalFilter, additional.Properties, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockobjectsSearcher_DenseObjectSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DenseObjectSearch'
type MockobjectsSearcher_DenseObjectSearch_Call struct {
	*mock.Call
}

// DenseObjectSearch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 []float32
//   - _a3 string
//   - _a4 int
//   - _a5 int
//   - _a6 *filters.LocalFilter
//   - _a7 additional.Properties
//   - _a8 string
func (_e *MockobjectsSearcher_Expecter) DenseObjectSearch(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}, _a6 interface{}, _a7 interface{}, _a8 interface{}) *MockobjectsSearcher_DenseObjectSearch_Call {
	return &MockobjectsSearcher_DenseObjectSearch_Call{Call: _e.mock.On("DenseObjectSearch", _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8)}
}

func (_c *MockobjectsSearcher_DenseObjectSearch_Call) Run(run func(_a0 context.Context, _a1 string, _a2 []float32, _a3 string, _a4 int, _a5 int, _a6 *filters.LocalFilter, _a7 additional.Properties, _a8 string)) *MockobjectsSearcher_DenseObjectSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]float32), args[3].(string), args[4].(int), args[5].(int), args[6].(*filters.LocalFilter), args[7].(additional.Properties), args[8].(string))
	})
	return _c
}

func (_c *MockobjectsSearcher_DenseObjectSearch_Call) Return(_a0 []*storobj.Object, _a1 []float32, _a2 error) *MockobjectsSearcher_DenseObjectSearch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockobjectsSearcher_DenseObjectSearch_Call) RunAndReturn(run func(context.Context, string, []float32, string, int, int, *filters.LocalFilter, additional.Properties, string) ([]*storobj.Object, []float32, error)) *MockobjectsSearcher_DenseObjectSearch_Call {
	_c.Call.Return(run)
	return _c
}

// Object provides a mock function with given fields: ctx, className, id, props, _a4, properties, tenant
func (_m *MockobjectsSearcher) Object(ctx context.Context, className string, id strfmt.UUID, props search.SelectProperties, _a4 additional.Properties, properties *additional.ReplicationProperties, tenant string) (*search.Result, error) {
	ret := _m.Called(ctx, className, id, props, _a4, properties, tenant)

	if len(ret) == 0 {
		panic("no return value specified for Object")
	}

	var r0 *search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) (*search.Result, error)); ok {
		return rf(ctx, className, id, props, _a4, properties, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) *search.Result); ok {
		r0 = rf(ctx, className, id, props, _a4, properties, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) error); ok {
		r1 = rf(ctx, className, id, props, _a4, properties, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsSearcher_Object_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Object'
type MockobjectsSearcher_Object_Call struct {
	*mock.Call
}

// Object is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a4 additional.Properties
//   - properties *additional.ReplicationProperties
//   - tenant string
func (_e *MockobjectsSearcher_Expecter) Object(ctx interface{}, className interface{}, id interface{}, props interface{}, _a4 interface{}, properties interface{}, tenant interface{}) *MockobjectsSearcher_Object_Call {
	return &MockobjectsSearcher_Object_Call{Call: _e.mock.On("Object", ctx, className, id, props, _a4, properties, tenant)}
}

func (_c *MockobjectsSearcher_Object_Call) Run(run func(ctx context.Context, className string, id strfmt.UUID, props search.SelectProperties, _a4 additional.Properties, properties *additional.ReplicationProperties, tenant string)) *MockobjectsSearcher_Object_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID), args[3].(search.SelectProperties), args[4].(additional.Properties), args[5].(*additional.ReplicationProperties), args[6].(string))
	})
	return _c
}

func (_c *MockobjectsSearcher_Object_Call) Return(_a0 *search.Result, _a1 error) *MockobjectsSearcher_Object_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsSearcher_Object_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) (*search.Result, error)) *MockobjectsSearcher_Object_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsByID provides a mock function with given fields: ctx, id, props, _a3, tenant
func (_m *MockobjectsSearcher) ObjectsByID(ctx context.Context, id strfmt.UUID, props search.SelectProperties, _a3 additional.Properties, tenant string) (search.Results, error) {
	ret := _m.Called(ctx, id, props, _a3, tenant)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsByID")
	}

	var r0 search.Results
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) (search.Results, error)); ok {
		return rf(ctx, id, props, _a3, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) search.Results); ok {
		r0 = rf(ctx, id, props, _a3, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(search.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) error); ok {
		r1 = rf(ctx, id, props, _a3, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsSearcher_ObjectsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsByID'
type MockobjectsSearcher_ObjectsByID_Call struct {
	*mock.Call
}

// ObjectsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a3 additional.Properties
//   - tenant string
func (_e *MockobjectsSearcher_Expecter) ObjectsByID(ctx interface{}, id interface{}, props interface{}, _a3 interface{}, tenant interface{}) *MockobjectsSearcher_ObjectsByID_Call {
	return &MockobjectsSearcher_ObjectsByID_Call{Call: _e.mock.On("ObjectsByID", ctx, id, props, _a3, tenant)}
}

func (_c *MockobjectsSearcher_ObjectsByID_Call) Run(run func(ctx context.Context, id strfmt.UUID, props search.SelectProperties, _a3 additional.Properties, tenant string)) *MockobjectsSearcher_ObjectsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(strfmt.UUID), args[2].(search.SelectProperties), args[3].(additional.Properties), args[4].(string))
	})
	return _c
}

func (_c *MockobjectsSearcher_ObjectsByID_Call) Return(_a0 search.Results, _a1 error) *MockobjectsSearcher_ObjectsByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsSearcher_ObjectsByID_Call) RunAndReturn(run func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) (search.Results, error)) *MockobjectsSearcher_ObjectsByID_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveReferences provides a mock function with given fields: ctx, objs, props, groupBy, _a4, tenant
func (_m *MockobjectsSearcher) ResolveReferences(ctx context.Context, objs search.Results, props search.SelectProperties, groupBy *searchparams.GroupBy, _a4 additional.Properties, tenant string) (search.Results, error) {
	ret := _m.Called(ctx, objs, props, groupBy, _a4, tenant)

	if len(ret) == 0 {
		panic("no return value specified for ResolveReferences")
	}

	var r0 search.Results
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, search.Results, search.SelectProperties, *searchparams.GroupBy, additional.Properties, string) (search.Results, error)); ok {
		return rf(ctx, objs, props, groupBy, _a4, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, search.Results, search.SelectProperties, *searchparams.GroupBy, additional.Properties, string) search.Results); ok {
		r0 = rf(ctx, objs, props, groupBy, _a4, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(search.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, search.Results, search.SelectProperties, *searchparams.GroupBy, additional.Properties, string) error); ok {
		r1 = rf(ctx, objs, props, groupBy, _a4, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsSearcher_ResolveReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveReferences'
type MockobjectsSearcher_ResolveReferences_Call struct {
	*mock.Call
}

// ResolveReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - objs search.Results
//   - props search.SelectProperties
//   - groupBy *searchparams.GroupBy
//   - _a4 additional.Properties
//   - tenant string
func (_e *MockobjectsSearcher_Expecter) ResolveReferences(ctx interface{}, objs interface{}, props interface{}, groupBy interface{}, _a4 interface{}, tenant interface{}) *MockobjectsSearcher_ResolveReferences_Call {
	return &MockobjectsSearcher_ResolveReferences_Call{Call: _e.mock.On("ResolveReferences", ctx, objs, props, groupBy, _a4, tenant)}
}

func (_c *MockobjectsSearcher_ResolveReferences_Call) Run(run func(ctx context.Context, objs search.Results, props search.SelectProperties, groupBy *searchparams.GroupBy, _a4 additional.Properties, tenant string)) *MockobjectsSearcher_ResolveReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(search.Results), args[2].(search.SelectProperties), args[3].(*searchparams.GroupBy), args[4].(additional.Properties), args[5].(string))
	})
	return _c
}

func (_c *MockobjectsSearcher_ResolveReferences_Call) Return(_a0 search.Results, _a1 error) *MockobjectsSearcher_ResolveReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsSearcher_ResolveReferences_Call) RunAndReturn(run func(context.Context, search.Results, search.SelectProperties, *searchparams.GroupBy, additional.Properties, string) (search.Results, error)) *MockobjectsSearcher_ResolveReferences_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, params
func (_m *MockobjectsSearcher) Search(ctx context.Context, params dto.GetParams) ([]search.Result, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetParams) ([]search.Result, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetParams) []search.Result); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsSearcher_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockobjectsSearcher_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - params dto.GetParams
func (_e *MockobjectsSearcher_Expecter) Search(ctx interface{}, params interface{}) *MockobjectsSearcher_Search_Call {
	return &MockobjectsSearcher_Search_Call{Call: _e.mock.On("Search", ctx, params)}
}

func (_c *MockobjectsSearcher_Search_Call) Run(run func(ctx context.Context, params dto.GetParams)) *MockobjectsSearcher_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.GetParams))
	})
	return _c
}

func (_c *MockobjectsSearcher_Search_Call) Return(_a0 []search.Result, _a1 error) *MockobjectsSearcher_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsSearcher_Search_Call) RunAndReturn(run func(context.Context, dto.GetParams) ([]search.Result, error)) *MockobjectsSearcher_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SparseObjectSearch provides a mock function with given fields: ctx, params
func (_m *MockobjectsSearcher) SparseObjectSearch(ctx context.Context, params dto.GetParams) ([]*storobj.Object, []float32, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SparseObjectSearch")
	}

	var r0 []*storobj.Object
	var r1 []float32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetParams) ([]*storobj.Object, []float32, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetParams) []*storobj.Object); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetParams) []float32); ok {
		r1 = rf(ctx, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float32)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, dto.GetParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockobjectsSearcher_SparseObjectSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SparseObjectSearch'
type MockobjectsSearcher_SparseObjectSearch_Call struct {
	*mock.Call
}

// SparseObjectSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - params dto.GetParams
func (_e *MockobjectsSearcher_Expecter) SparseObjectSearch(ctx interface{}, params interface{}) *MockobjectsSearcher_SparseObjectSearch_Call {
	return &MockobjectsSearcher_SparseObjectSearch_Call{Call: _e.mock.On("SparseObjectSearch", ctx, params)}
}

func (_c *MockobjectsSearcher_SparseObjectSearch_Call) Run(run func(ctx context.Context, params dto.GetParams)) *MockobjectsSearcher_SparseObjectSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.GetParams))
	})
	return _c
}

func (_c *MockobjectsSearcher_SparseObjectSearch_Call) Return(_a0 []*storobj.Object, _a1 []float32, _a2 error) *MockobjectsSearcher_SparseObjectSearch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockobjectsSearcher_SparseObjectSearch_Call) RunAndReturn(run func(context.Context, dto.GetParams) ([]*storobj.Object, []float32, error)) *MockobjectsSearcher_SparseObjectSearch_Call {
	_c.Call.Return(run)
	return _c
}

// VectorSearch provides a mock function with given fields: ctx, params
func (_m *MockobjectsSearcher) VectorSearch(ctx context.Context, params dto.GetParams) ([]search.Result, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for VectorSearch")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetParams) ([]search.Result, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetParams) []search.Result); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockobjectsSearcher_VectorSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorSearch'
type MockobjectsSearcher_VectorSearch_Call struct {
	*mock.Call
}

// VectorSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - params dto.GetParams
func (_e *MockobjectsSearcher_Expecter) VectorSearch(ctx interface{}, params interface{}) *MockobjectsSearcher_VectorSearch_Call {
	return &MockobjectsSearcher_VectorSearch_Call{Call: _e.mock.On("VectorSearch", ctx, params)}
}

func (_c *MockobjectsSearcher_VectorSearch_Call) Run(run func(ctx context.Context, params dto.GetParams)) *MockobjectsSearcher_VectorSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.GetParams))
	})
	return _c
}

func (_c *MockobjectsSearcher_VectorSearch_Call) Return(_a0 []search.Result, _a1 error) *MockobjectsSearcher_VectorSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockobjectsSearcher_VectorSearch_Call) RunAndReturn(run func(context.Context, dto.GetParams) ([]search.Result, error)) *MockobjectsSearcher_VectorSearch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockobjectsSearcher creates a new instance of MockobjectsSearcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockobjectsSearcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockobjectsSearcher {
	mock := &MockobjectsSearcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
