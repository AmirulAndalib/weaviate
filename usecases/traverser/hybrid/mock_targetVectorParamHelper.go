//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package hybrid

import (
	mock "github.com/stretchr/testify/mock"
	schema "github.com/weaviate/weaviate/entities/schema"
)

// MocktargetVectorParamHelper is an autogenerated mock type for the targetVectorParamHelper type
type MocktargetVectorParamHelper struct {
	mock.Mock
}

type MocktargetVectorParamHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MocktargetVectorParamHelper) EXPECT() *MocktargetVectorParamHelper_Expecter {
	return &MocktargetVectorParamHelper_Expecter{mock: &_m.Mock}
}

// GetTargetVectorOrDefault provides a mock function with given fields: sch, className, targetVector
func (_m *MocktargetVectorParamHelper) GetTargetVectorOrDefault(sch schema.Schema, className string, targetVector string) (string, error) {
	ret := _m.Called(sch, className, targetVector)

	if len(ret) == 0 {
		panic("no return value specified for GetTargetVectorOrDefault")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(schema.Schema, string, string) (string, error)); ok {
		return rf(sch, className, targetVector)
	}
	if rf, ok := ret.Get(0).(func(schema.Schema, string, string) string); ok {
		r0 = rf(sch, className, targetVector)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(schema.Schema, string, string) error); ok {
		r1 = rf(sch, className, targetVector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MocktargetVectorParamHelper_GetTargetVectorOrDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTargetVectorOrDefault'
type MocktargetVectorParamHelper_GetTargetVectorOrDefault_Call struct {
	*mock.Call
}

// GetTargetVectorOrDefault is a helper method to define mock.On call
//   - sch schema.Schema
//   - className string
//   - targetVector string
func (_e *MocktargetVectorParamHelper_Expecter) GetTargetVectorOrDefault(sch interface{}, className interface{}, targetVector interface{}) *MocktargetVectorParamHelper_GetTargetVectorOrDefault_Call {
	return &MocktargetVectorParamHelper_GetTargetVectorOrDefault_Call{Call: _e.mock.On("GetTargetVectorOrDefault", sch, className, targetVector)}
}

func (_c *MocktargetVectorParamHelper_GetTargetVectorOrDefault_Call) Run(run func(sch schema.Schema, className string, targetVector string)) *MocktargetVectorParamHelper_GetTargetVectorOrDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Schema), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MocktargetVectorParamHelper_GetTargetVectorOrDefault_Call) Return(_a0 string, _a1 error) *MocktargetVectorParamHelper_GetTargetVectorOrDefault_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocktargetVectorParamHelper_GetTargetVectorOrDefault_Call) RunAndReturn(run func(schema.Schema, string, string) (string, error)) *MocktargetVectorParamHelper_GetTargetVectorOrDefault_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocktargetVectorParamHelper creates a new instance of MocktargetVectorParamHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocktargetVectorParamHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocktargetVectorParamHelper {
	mock := &MocktargetVectorParamHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
