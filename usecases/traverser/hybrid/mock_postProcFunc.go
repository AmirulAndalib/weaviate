//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package hybrid

import (
	mock "github.com/stretchr/testify/mock"
	search "github.com/weaviate/weaviate/entities/search"
)

// MockpostProcFunc is an autogenerated mock type for the postProcFunc type
type MockpostProcFunc struct {
	mock.Mock
}

type MockpostProcFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockpostProcFunc) EXPECT() *MockpostProcFunc_Expecter {
	return &MockpostProcFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: hybridResults
func (_m *MockpostProcFunc) Execute(hybridResults []*search.Result) ([]search.Result, error) {
	ret := _m.Called(hybridResults)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func([]*search.Result) ([]search.Result, error)); ok {
		return rf(hybridResults)
	}
	if rf, ok := ret.Get(0).(func([]*search.Result) []search.Result); ok {
		r0 = rf(hybridResults)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func([]*search.Result) error); ok {
		r1 = rf(hybridResults)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockpostProcFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockpostProcFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - hybridResults []*search.Result
func (_e *MockpostProcFunc_Expecter) Execute(hybridResults interface{}) *MockpostProcFunc_Execute_Call {
	return &MockpostProcFunc_Execute_Call{Call: _e.mock.On("Execute", hybridResults)}
}

func (_c *MockpostProcFunc_Execute_Call) Run(run func(hybridResults []*search.Result)) *MockpostProcFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*search.Result))
	})
	return _c
}

func (_c *MockpostProcFunc_Execute_Call) Return(postProcResults []search.Result, err error) *MockpostProcFunc_Execute_Call {
	_c.Call.Return(postProcResults, err)
	return _c
}

func (_c *MockpostProcFunc_Execute_Call) RunAndReturn(run func([]*search.Result) ([]search.Result, error)) *MockpostProcFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockpostProcFunc creates a new instance of MockpostProcFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockpostProcFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockpostProcFunc {
	mock := &MockpostProcFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
