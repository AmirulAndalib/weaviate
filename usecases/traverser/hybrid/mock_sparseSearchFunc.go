//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package hybrid

import (
	mock "github.com/stretchr/testify/mock"
	storobj "github.com/weaviate/weaviate/entities/storobj"
)

// MocksparseSearchFunc is an autogenerated mock type for the sparseSearchFunc type
type MocksparseSearchFunc struct {
	mock.Mock
}

type MocksparseSearchFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MocksparseSearchFunc) EXPECT() *MocksparseSearchFunc_Expecter {
	return &MocksparseSearchFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *MocksparseSearchFunc) Execute() ([]*storobj.Object, []float32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []*storobj.Object
	var r1 []float32
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]*storobj.Object, []float32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*storobj.Object); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func() []float32); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float32)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MocksparseSearchFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MocksparseSearchFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MocksparseSearchFunc_Expecter) Execute() *MocksparseSearchFunc_Execute_Call {
	return &MocksparseSearchFunc_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MocksparseSearchFunc_Execute_Call) Run(run func()) *MocksparseSearchFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MocksparseSearchFunc_Execute_Call) Return(results []*storobj.Object, weights []float32, err error) *MocksparseSearchFunc_Execute_Call {
	_c.Call.Return(results, weights, err)
	return _c
}

func (_c *MocksparseSearchFunc_Execute_Call) RunAndReturn(run func() ([]*storobj.Object, []float32, error)) *MocksparseSearchFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocksparseSearchFunc creates a new instance of MocksparseSearchFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksparseSearchFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocksparseSearchFunc {
	mock := &MocksparseSearchFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
