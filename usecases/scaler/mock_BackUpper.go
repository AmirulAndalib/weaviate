//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package scaler

import (
	context "context"

	backup "github.com/weaviate/weaviate/entities/backup"

	mock "github.com/stretchr/testify/mock"
)

// MockBackUpper is an autogenerated mock type for the BackUpper type
type MockBackUpper struct {
	mock.Mock
}

type MockBackUpper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBackUpper) EXPECT() *MockBackUpper_Expecter {
	return &MockBackUpper_Expecter{mock: &_m.Mock}
}

// ReleaseBackup provides a mock function with given fields: ctx, id, className
func (_m *MockBackUpper) ReleaseBackup(ctx context.Context, id string, className string) error {
	ret := _m.Called(ctx, id, className)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseBackup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, className)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBackUpper_ReleaseBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseBackup'
type MockBackUpper_ReleaseBackup_Call struct {
	*mock.Call
}

// ReleaseBackup is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - className string
func (_e *MockBackUpper_Expecter) ReleaseBackup(ctx interface{}, id interface{}, className interface{}) *MockBackUpper_ReleaseBackup_Call {
	return &MockBackUpper_ReleaseBackup_Call{Call: _e.mock.On("ReleaseBackup", ctx, id, className)}
}

func (_c *MockBackUpper_ReleaseBackup_Call) Run(run func(ctx context.Context, id string, className string)) *MockBackUpper_ReleaseBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockBackUpper_ReleaseBackup_Call) Return(_a0 error) *MockBackUpper_ReleaseBackup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackUpper_ReleaseBackup_Call) RunAndReturn(run func(context.Context, string, string) error) *MockBackUpper_ReleaseBackup_Call {
	_c.Call.Return(run)
	return _c
}

// ShardsBackup provides a mock function with given fields: _a0, id, class, shards
func (_m *MockBackUpper) ShardsBackup(_a0 context.Context, id string, class string, shards []string) (backup.ClassDescriptor, error) {
	ret := _m.Called(_a0, id, class, shards)

	if len(ret) == 0 {
		panic("no return value specified for ShardsBackup")
	}

	var r0 backup.ClassDescriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (backup.ClassDescriptor, error)); ok {
		return rf(_a0, id, class, shards)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) backup.ClassDescriptor); ok {
		r0 = rf(_a0, id, class, shards)
	} else {
		r0 = ret.Get(0).(backup.ClassDescriptor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(_a0, id, class, shards)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBackUpper_ShardsBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShardsBackup'
type MockBackUpper_ShardsBackup_Call struct {
	*mock.Call
}

// ShardsBackup is a helper method to define mock.On call
//   - _a0 context.Context
//   - id string
//   - class string
//   - shards []string
func (_e *MockBackUpper_Expecter) ShardsBackup(_a0 interface{}, id interface{}, class interface{}, shards interface{}) *MockBackUpper_ShardsBackup_Call {
	return &MockBackUpper_ShardsBackup_Call{Call: _e.mock.On("ShardsBackup", _a0, id, class, shards)}
}

func (_c *MockBackUpper_ShardsBackup_Call) Run(run func(_a0 context.Context, id string, class string, shards []string)) *MockBackUpper_ShardsBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *MockBackUpper_ShardsBackup_Call) Return(_a0 backup.ClassDescriptor, _a1 error) *MockBackUpper_ShardsBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBackUpper_ShardsBackup_Call) RunAndReturn(run func(context.Context, string, string, []string) (backup.ClassDescriptor, error)) *MockBackUpper_ShardsBackup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBackUpper creates a new instance of MockBackUpper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBackUpper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBackUpper {
	mock := &MockBackUpper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
