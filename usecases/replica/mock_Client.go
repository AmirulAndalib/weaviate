//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package replica

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	filters "github.com/weaviate/weaviate/entities/filters"

	mock "github.com/stretchr/testify/mock"

	objects "github.com/weaviate/weaviate/usecases/objects"

	search "github.com/weaviate/weaviate/entities/search"

	storobj "github.com/weaviate/weaviate/entities/storobj"

	strfmt "github.com/go-openapi/strfmt"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with given fields: ctx, host, index, shard, requestID
func (_m *MockClient) Abort(ctx context.Context, host string, index string, shard string, requestID string) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID)

	if len(ret) == 0 {
		panic("no return value specified for Abort")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, host, index, shard, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type MockClient_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
func (_e *MockClient_Expecter) Abort(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}) *MockClient_Abort_Call {
	return &MockClient_Abort_Call{Call: _e.mock.On("Abort", ctx, host, index, shard, requestID)}
}

func (_c *MockClient_Abort_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string)) *MockClient_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockClient_Abort_Call) Return(_a0 SimpleResponse, _a1 error) *MockClient_Abort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Abort_Call) RunAndReturn(run func(context.Context, string, string, string, string) (SimpleResponse, error)) *MockClient_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// AddReferences provides a mock function with given fields: ctx, host, index, shard, requestID, refs
func (_m *MockClient) AddReferences(ctx context.Context, host string, index string, shard string, requestID string, refs []objects.BatchReference) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, refs)

	if len(ret) == 0 {
		panic("no return value specified for AddReferences")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []objects.BatchReference) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, refs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []objects.BatchReference) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, refs)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []objects.BatchReference) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, refs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_AddReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReferences'
type MockClient_AddReferences_Call struct {
	*mock.Call
}

// AddReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - refs []objects.BatchReference
func (_e *MockClient_Expecter) AddReferences(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, refs interface{}) *MockClient_AddReferences_Call {
	return &MockClient_AddReferences_Call{Call: _e.mock.On("AddReferences", ctx, host, index, shard, requestID, refs)}
}

func (_c *MockClient_AddReferences_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, refs []objects.BatchReference)) *MockClient_AddReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]objects.BatchReference))
	})
	return _c
}

func (_c *MockClient_AddReferences_Call) Return(_a0 SimpleResponse, _a1 error) *MockClient_AddReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_AddReferences_Call) RunAndReturn(run func(context.Context, string, string, string, string, []objects.BatchReference) (SimpleResponse, error)) *MockClient_AddReferences_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx, host, index, shard, requestID, resp
func (_m *MockClient) Commit(ctx context.Context, host string, index string, shard string, requestID string, resp interface{}) error {
	ret := _m.Called(ctx, host, index, shard, requestID, resp)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, interface{}) error); ok {
		r0 = rf(ctx, host, index, shard, requestID, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockClient_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - resp interface{}
func (_e *MockClient_Expecter) Commit(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, resp interface{}) *MockClient_Commit_Call {
	return &MockClient_Commit_Call{Call: _e.mock.On("Commit", ctx, host, index, shard, requestID, resp)}
}

func (_c *MockClient_Commit_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, resp interface{})) *MockClient_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(interface{}))
	})
	return _c
}

func (_c *MockClient_Commit_Call) Return(_a0 error) *MockClient_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Commit_Call) RunAndReturn(run func(context.Context, string, string, string, string, interface{}) error) *MockClient_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function with given fields: ctx, host, index, shard, requestID, id
func (_m *MockClient) DeleteObject(ctx context.Context, host string, index string, shard string, requestID string, id strfmt.UUID) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, strfmt.UUID) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, strfmt.UUID) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, id)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, strfmt.UUID) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type MockClient_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - id strfmt.UUID
func (_e *MockClient_Expecter) DeleteObject(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, id interface{}) *MockClient_DeleteObject_Call {
	return &MockClient_DeleteObject_Call{Call: _e.mock.On("DeleteObject", ctx, host, index, shard, requestID, id)}
}

func (_c *MockClient_DeleteObject_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, id strfmt.UUID)) *MockClient_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(strfmt.UUID))
	})
	return _c
}

func (_c *MockClient_DeleteObject_Call) Return(_a0 SimpleResponse, _a1 error) *MockClient_DeleteObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_DeleteObject_Call) RunAndReturn(run func(context.Context, string, string, string, string, strfmt.UUID) (SimpleResponse, error)) *MockClient_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObjects provides a mock function with given fields: ctx, host, index, shard, requestID, uuids, dryRun
func (_m *MockClient) DeleteObjects(ctx context.Context, host string, index string, shard string, requestID string, uuids []strfmt.UUID, dryRun bool) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, uuids, dryRun)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObjects")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []strfmt.UUID, bool) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, uuids, dryRun)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []strfmt.UUID, bool) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, uuids, dryRun)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []strfmt.UUID, bool) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, uuids, dryRun)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_DeleteObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObjects'
type MockClient_DeleteObjects_Call struct {
	*mock.Call
}

// DeleteObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - uuids []strfmt.UUID
//   - dryRun bool
func (_e *MockClient_Expecter) DeleteObjects(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, uuids interface{}, dryRun interface{}) *MockClient_DeleteObjects_Call {
	return &MockClient_DeleteObjects_Call{Call: _e.mock.On("DeleteObjects", ctx, host, index, shard, requestID, uuids, dryRun)}
}

func (_c *MockClient_DeleteObjects_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, uuids []strfmt.UUID, dryRun bool)) *MockClient_DeleteObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]strfmt.UUID), args[6].(bool))
	})
	return _c
}

func (_c *MockClient_DeleteObjects_Call) Return(_a0 SimpleResponse, _a1 error) *MockClient_DeleteObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_DeleteObjects_Call) RunAndReturn(run func(context.Context, string, string, string, string, []strfmt.UUID, bool) (SimpleResponse, error)) *MockClient_DeleteObjects_Call {
	_c.Call.Return(run)
	return _c
}

// DigestObjects provides a mock function with given fields: ctx, host, index, shard, ids
func (_m *MockClient) DigestObjects(ctx context.Context, host string, index string, shard string, ids []strfmt.UUID) ([]RepairResponse, error) {
	ret := _m.Called(ctx, host, index, shard, ids)

	if len(ret) == 0 {
		panic("no return value specified for DigestObjects")
	}

	var r0 []RepairResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID) ([]RepairResponse, error)); ok {
		return rf(ctx, host, index, shard, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID) []RepairResponse); ok {
		r0 = rf(ctx, host, index, shard, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RepairResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []strfmt.UUID) error); ok {
		r1 = rf(ctx, host, index, shard, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_DigestObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DigestObjects'
type MockClient_DigestObjects_Call struct {
	*mock.Call
}

// DigestObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - ids []strfmt.UUID
func (_e *MockClient_Expecter) DigestObjects(ctx interface{}, host interface{}, index interface{}, shard interface{}, ids interface{}) *MockClient_DigestObjects_Call {
	return &MockClient_DigestObjects_Call{Call: _e.mock.On("DigestObjects", ctx, host, index, shard, ids)}
}

func (_c *MockClient_DigestObjects_Call) Run(run func(ctx context.Context, host string, index string, shard string, ids []strfmt.UUID)) *MockClient_DigestObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]strfmt.UUID))
	})
	return _c
}

func (_c *MockClient_DigestObjects_Call) Return(_a0 []RepairResponse, _a1 error) *MockClient_DigestObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_DigestObjects_Call) RunAndReturn(run func(context.Context, string, string, string, []strfmt.UUID) ([]RepairResponse, error)) *MockClient_DigestObjects_Call {
	_c.Call.Return(run)
	return _c
}

// FetchObject provides a mock function with given fields: _a0, host, index, shard, id, props, _a6
func (_m *MockClient) FetchObject(_a0 context.Context, host string, index string, shard string, id strfmt.UUID, props search.SelectProperties, _a6 additional.Properties) (objects.Replica, error) {
	ret := _m.Called(_a0, host, index, shard, id, props, _a6)

	if len(ret) == 0 {
		panic("no return value specified for FetchObject")
	}

	var r0 objects.Replica
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) (objects.Replica, error)); ok {
		return rf(_a0, host, index, shard, id, props, _a6)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) objects.Replica); ok {
		r0 = rf(_a0, host, index, shard, id, props, _a6)
	} else {
		r0 = ret.Get(0).(objects.Replica)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) error); ok {
		r1 = rf(_a0, host, index, shard, id, props, _a6)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_FetchObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchObject'
type MockClient_FetchObject_Call struct {
	*mock.Call
}

// FetchObject is a helper method to define mock.On call
//   - _a0 context.Context
//   - host string
//   - index string
//   - shard string
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a6 additional.Properties
func (_e *MockClient_Expecter) FetchObject(_a0 interface{}, host interface{}, index interface{}, shard interface{}, id interface{}, props interface{}, _a6 interface{}) *MockClient_FetchObject_Call {
	return &MockClient_FetchObject_Call{Call: _e.mock.On("FetchObject", _a0, host, index, shard, id, props, _a6)}
}

func (_c *MockClient_FetchObject_Call) Run(run func(_a0 context.Context, host string, index string, shard string, id strfmt.UUID, props search.SelectProperties, _a6 additional.Properties)) *MockClient_FetchObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(strfmt.UUID), args[5].(search.SelectProperties), args[6].(additional.Properties))
	})
	return _c
}

func (_c *MockClient_FetchObject_Call) Return(_a0 objects.Replica, _a1 error) *MockClient_FetchObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_FetchObject_Call) RunAndReturn(run func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) (objects.Replica, error)) *MockClient_FetchObject_Call {
	_c.Call.Return(run)
	return _c
}

// FetchObjects provides a mock function with given fields: _a0, host, index, shard, ids
func (_m *MockClient) FetchObjects(_a0 context.Context, host string, index string, shard string, ids []strfmt.UUID) ([]objects.Replica, error) {
	ret := _m.Called(_a0, host, index, shard, ids)

	if len(ret) == 0 {
		panic("no return value specified for FetchObjects")
	}

	var r0 []objects.Replica
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID) ([]objects.Replica, error)); ok {
		return rf(_a0, host, index, shard, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID) []objects.Replica); ok {
		r0 = rf(_a0, host, index, shard, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]objects.Replica)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []strfmt.UUID) error); ok {
		r1 = rf(_a0, host, index, shard, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_FetchObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchObjects'
type MockClient_FetchObjects_Call struct {
	*mock.Call
}

// FetchObjects is a helper method to define mock.On call
//   - _a0 context.Context
//   - host string
//   - index string
//   - shard string
//   - ids []strfmt.UUID
func (_e *MockClient_Expecter) FetchObjects(_a0 interface{}, host interface{}, index interface{}, shard interface{}, ids interface{}) *MockClient_FetchObjects_Call {
	return &MockClient_FetchObjects_Call{Call: _e.mock.On("FetchObjects", _a0, host, index, shard, ids)}
}

func (_c *MockClient_FetchObjects_Call) Run(run func(_a0 context.Context, host string, index string, shard string, ids []strfmt.UUID)) *MockClient_FetchObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]strfmt.UUID))
	})
	return _c
}

func (_c *MockClient_FetchObjects_Call) Return(_a0 []objects.Replica, _a1 error) *MockClient_FetchObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_FetchObjects_Call) RunAndReturn(run func(context.Context, string, string, string, []strfmt.UUID) ([]objects.Replica, error)) *MockClient_FetchObjects_Call {
	_c.Call.Return(run)
	return _c
}

// FindUUIDs provides a mock function with given fields: ctx, host, index, shard, _a4
func (_m *MockClient) FindUUIDs(ctx context.Context, host string, index string, shard string, _a4 *filters.LocalFilter) ([]strfmt.UUID, error) {
	ret := _m.Called(ctx, host, index, shard, _a4)

	if len(ret) == 0 {
		panic("no return value specified for FindUUIDs")
	}

	var r0 []strfmt.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *filters.LocalFilter) ([]strfmt.UUID, error)); ok {
		return rf(ctx, host, index, shard, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *filters.LocalFilter) []strfmt.UUID); ok {
		r0 = rf(ctx, host, index, shard, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]strfmt.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, host, index, shard, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_FindUUIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUUIDs'
type MockClient_FindUUIDs_Call struct {
	*mock.Call
}

// FindUUIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - _a4 *filters.LocalFilter
func (_e *MockClient_Expecter) FindUUIDs(ctx interface{}, host interface{}, index interface{}, shard interface{}, _a4 interface{}) *MockClient_FindUUIDs_Call {
	return &MockClient_FindUUIDs_Call{Call: _e.mock.On("FindUUIDs", ctx, host, index, shard, _a4)}
}

func (_c *MockClient_FindUUIDs_Call) Run(run func(ctx context.Context, host string, index string, shard string, _a4 *filters.LocalFilter)) *MockClient_FindUUIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*filters.LocalFilter))
	})
	return _c
}

func (_c *MockClient_FindUUIDs_Call) Return(_a0 []strfmt.UUID, _a1 error) *MockClient_FindUUIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_FindUUIDs_Call) RunAndReturn(run func(context.Context, string, string, string, *filters.LocalFilter) ([]strfmt.UUID, error)) *MockClient_FindUUIDs_Call {
	_c.Call.Return(run)
	return _c
}

// MergeObject provides a mock function with given fields: ctx, host, index, shard, requestID, mergeDoc
func (_m *MockClient) MergeObject(ctx context.Context, host string, index string, shard string, requestID string, mergeDoc *objects.MergeDocument) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, mergeDoc)

	if len(ret) == 0 {
		panic("no return value specified for MergeObject")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *objects.MergeDocument) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, mergeDoc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *objects.MergeDocument) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, mergeDoc)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, *objects.MergeDocument) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, mergeDoc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_MergeObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeObject'
type MockClient_MergeObject_Call struct {
	*mock.Call
}

// MergeObject is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - mergeDoc *objects.MergeDocument
func (_e *MockClient_Expecter) MergeObject(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, mergeDoc interface{}) *MockClient_MergeObject_Call {
	return &MockClient_MergeObject_Call{Call: _e.mock.On("MergeObject", ctx, host, index, shard, requestID, mergeDoc)}
}

func (_c *MockClient_MergeObject_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, mergeDoc *objects.MergeDocument)) *MockClient_MergeObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(*objects.MergeDocument))
	})
	return _c
}

func (_c *MockClient_MergeObject_Call) Return(_a0 SimpleResponse, _a1 error) *MockClient_MergeObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_MergeObject_Call) RunAndReturn(run func(context.Context, string, string, string, string, *objects.MergeDocument) (SimpleResponse, error)) *MockClient_MergeObject_Call {
	_c.Call.Return(run)
	return _c
}

// OverwriteObjects provides a mock function with given fields: _a0, host, index, shard, _a4
func (_m *MockClient) OverwriteObjects(_a0 context.Context, host string, index string, shard string, _a4 []*objects.VObject) ([]RepairResponse, error) {
	ret := _m.Called(_a0, host, index, shard, _a4)

	if len(ret) == 0 {
		panic("no return value specified for OverwriteObjects")
	}

	var r0 []RepairResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*objects.VObject) ([]RepairResponse, error)); ok {
		return rf(_a0, host, index, shard, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*objects.VObject) []RepairResponse); ok {
		r0 = rf(_a0, host, index, shard, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RepairResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []*objects.VObject) error); ok {
		r1 = rf(_a0, host, index, shard, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_OverwriteObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OverwriteObjects'
type MockClient_OverwriteObjects_Call struct {
	*mock.Call
}

// OverwriteObjects is a helper method to define mock.On call
//   - _a0 context.Context
//   - host string
//   - index string
//   - shard string
//   - _a4 []*objects.VObject
func (_e *MockClient_Expecter) OverwriteObjects(_a0 interface{}, host interface{}, index interface{}, shard interface{}, _a4 interface{}) *MockClient_OverwriteObjects_Call {
	return &MockClient_OverwriteObjects_Call{Call: _e.mock.On("OverwriteObjects", _a0, host, index, shard, _a4)}
}

func (_c *MockClient_OverwriteObjects_Call) Run(run func(_a0 context.Context, host string, index string, shard string, _a4 []*objects.VObject)) *MockClient_OverwriteObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]*objects.VObject))
	})
	return _c
}

func (_c *MockClient_OverwriteObjects_Call) Return(_a0 []RepairResponse, _a1 error) *MockClient_OverwriteObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_OverwriteObjects_Call) RunAndReturn(run func(context.Context, string, string, string, []*objects.VObject) ([]RepairResponse, error)) *MockClient_OverwriteObjects_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, host, index, shard, requestID, obj
func (_m *MockClient) PutObject(ctx context.Context, host string, index string, shard string, requestID string, obj *storobj.Object) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, obj)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *storobj.Object) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *storobj.Object) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, obj)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, *storobj.Object) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type MockClient_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - obj *storobj.Object
func (_e *MockClient_Expecter) PutObject(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, obj interface{}) *MockClient_PutObject_Call {
	return &MockClient_PutObject_Call{Call: _e.mock.On("PutObject", ctx, host, index, shard, requestID, obj)}
}

func (_c *MockClient_PutObject_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, obj *storobj.Object)) *MockClient_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(*storobj.Object))
	})
	return _c
}

func (_c *MockClient_PutObject_Call) Return(_a0 SimpleResponse, _a1 error) *MockClient_PutObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_PutObject_Call) RunAndReturn(run func(context.Context, string, string, string, string, *storobj.Object) (SimpleResponse, error)) *MockClient_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutObjects provides a mock function with given fields: ctx, host, index, shard, requestID, objs
func (_m *MockClient) PutObjects(ctx context.Context, host string, index string, shard string, requestID string, objs []*storobj.Object) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, objs)

	if len(ret) == 0 {
		panic("no return value specified for PutObjects")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []*storobj.Object) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, objs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []*storobj.Object) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, objs)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []*storobj.Object) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, objs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_PutObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObjects'
type MockClient_PutObjects_Call struct {
	*mock.Call
}

// PutObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - objs []*storobj.Object
func (_e *MockClient_Expecter) PutObjects(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, objs interface{}) *MockClient_PutObjects_Call {
	return &MockClient_PutObjects_Call{Call: _e.mock.On("PutObjects", ctx, host, index, shard, requestID, objs)}
}

func (_c *MockClient_PutObjects_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, objs []*storobj.Object)) *MockClient_PutObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]*storobj.Object))
	})
	return _c
}

func (_c *MockClient_PutObjects_Call) Return(_a0 SimpleResponse, _a1 error) *MockClient_PutObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_PutObjects_Call) RunAndReturn(run func(context.Context, string, string, string, string, []*storobj.Object) (SimpleResponse, error)) *MockClient_PutObjects_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
