//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package replica

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockreadOp is an autogenerated mock type for the readOp type
type MockreadOp[T interface{}] struct {
	mock.Mock
}

type MockreadOp_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockreadOp[T]) EXPECT() *MockreadOp_Expecter[T] {
	return &MockreadOp_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, host, fullRead
func (_m *MockreadOp[T]) Execute(_a0 context.Context, host string, fullRead bool) (T, error) {
	ret := _m.Called(_a0, host, fullRead)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (T, error)); ok {
		return rf(_a0, host, fullRead)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) T); ok {
		r0 = rf(_a0, host, fullRead)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(_a0, host, fullRead)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockreadOp_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockreadOp_Execute_Call[T interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - host string
//   - fullRead bool
func (_e *MockreadOp_Expecter[T]) Execute(_a0 interface{}, host interface{}, fullRead interface{}) *MockreadOp_Execute_Call[T] {
	return &MockreadOp_Execute_Call[T]{Call: _e.mock.On("Execute", _a0, host, fullRead)}
}

func (_c *MockreadOp_Execute_Call[T]) Run(run func(_a0 context.Context, host string, fullRead bool)) *MockreadOp_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockreadOp_Execute_Call[T]) Return(_a0 T, _a1 error) *MockreadOp_Execute_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockreadOp_Execute_Call[T]) RunAndReturn(run func(context.Context, string, bool) (T, error)) *MockreadOp_Execute_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockreadOp creates a new instance of MockreadOp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockreadOp[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockreadOp[T] {
	mock := &MockreadOp[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
