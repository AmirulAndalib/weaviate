//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package replica

import mock "github.com/stretchr/testify/mock"

// MockshardingState is an autogenerated mock type for the shardingState type
type MockshardingState struct {
	mock.Mock
}

type MockshardingState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockshardingState) EXPECT() *MockshardingState_Expecter {
	return &MockshardingState_Expecter{mock: &_m.Mock}
}

// NodeName provides a mock function with given fields:
func (_m *MockshardingState) NodeName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockshardingState_NodeName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeName'
type MockshardingState_NodeName_Call struct {
	*mock.Call
}

// NodeName is a helper method to define mock.On call
func (_e *MockshardingState_Expecter) NodeName() *MockshardingState_NodeName_Call {
	return &MockshardingState_NodeName_Call{Call: _e.mock.On("NodeName")}
}

func (_c *MockshardingState_NodeName_Call) Run(run func()) *MockshardingState_NodeName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockshardingState_NodeName_Call) Return(_a0 string) *MockshardingState_NodeName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockshardingState_NodeName_Call) RunAndReturn(run func() string) *MockshardingState_NodeName_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveParentNodes provides a mock function with given fields: class, shardName
func (_m *MockshardingState) ResolveParentNodes(class string, shardName string) (map[string]string, error) {
	ret := _m.Called(class, shardName)

	if len(ret) == 0 {
		panic("no return value specified for ResolveParentNodes")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string]string, error)); ok {
		return rf(class, shardName)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string]string); ok {
		r0 = rf(class, shardName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(class, shardName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockshardingState_ResolveParentNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveParentNodes'
type MockshardingState_ResolveParentNodes_Call struct {
	*mock.Call
}

// ResolveParentNodes is a helper method to define mock.On call
//   - class string
//   - shardName string
func (_e *MockshardingState_Expecter) ResolveParentNodes(class interface{}, shardName interface{}) *MockshardingState_ResolveParentNodes_Call {
	return &MockshardingState_ResolveParentNodes_Call{Call: _e.mock.On("ResolveParentNodes", class, shardName)}
}

func (_c *MockshardingState_ResolveParentNodes_Call) Run(run func(class string, shardName string)) *MockshardingState_ResolveParentNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockshardingState_ResolveParentNodes_Call) Return(_a0 map[string]string, _a1 error) *MockshardingState_ResolveParentNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockshardingState_ResolveParentNodes_Call) RunAndReturn(run func(string, string) (map[string]string, error)) *MockshardingState_ResolveParentNodes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockshardingState creates a new instance of MockshardingState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockshardingState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockshardingState {
	mock := &MockshardingState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
