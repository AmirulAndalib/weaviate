//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package replica

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	filters "github.com/weaviate/weaviate/entities/filters"

	mock "github.com/stretchr/testify/mock"

	objects "github.com/weaviate/weaviate/usecases/objects"

	search "github.com/weaviate/weaviate/entities/search"

	strfmt "github.com/go-openapi/strfmt"
)

// MockrClient is an autogenerated mock type for the rClient type
type MockrClient struct {
	mock.Mock
}

type MockrClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockrClient) EXPECT() *MockrClient_Expecter {
	return &MockrClient_Expecter{mock: &_m.Mock}
}

// DigestObjects provides a mock function with given fields: ctx, host, index, shard, ids
func (_m *MockrClient) DigestObjects(ctx context.Context, host string, index string, shard string, ids []strfmt.UUID) ([]RepairResponse, error) {
	ret := _m.Called(ctx, host, index, shard, ids)

	if len(ret) == 0 {
		panic("no return value specified for DigestObjects")
	}

	var r0 []RepairResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID) ([]RepairResponse, error)); ok {
		return rf(ctx, host, index, shard, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID) []RepairResponse); ok {
		r0 = rf(ctx, host, index, shard, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RepairResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []strfmt.UUID) error); ok {
		r1 = rf(ctx, host, index, shard, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockrClient_DigestObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DigestObjects'
type MockrClient_DigestObjects_Call struct {
	*mock.Call
}

// DigestObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - ids []strfmt.UUID
func (_e *MockrClient_Expecter) DigestObjects(ctx interface{}, host interface{}, index interface{}, shard interface{}, ids interface{}) *MockrClient_DigestObjects_Call {
	return &MockrClient_DigestObjects_Call{Call: _e.mock.On("DigestObjects", ctx, host, index, shard, ids)}
}

func (_c *MockrClient_DigestObjects_Call) Run(run func(ctx context.Context, host string, index string, shard string, ids []strfmt.UUID)) *MockrClient_DigestObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]strfmt.UUID))
	})
	return _c
}

func (_c *MockrClient_DigestObjects_Call) Return(_a0 []RepairResponse, _a1 error) *MockrClient_DigestObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockrClient_DigestObjects_Call) RunAndReturn(run func(context.Context, string, string, string, []strfmt.UUID) ([]RepairResponse, error)) *MockrClient_DigestObjects_Call {
	_c.Call.Return(run)
	return _c
}

// FetchObject provides a mock function with given fields: _a0, host, index, shard, id, props, _a6
func (_m *MockrClient) FetchObject(_a0 context.Context, host string, index string, shard string, id strfmt.UUID, props search.SelectProperties, _a6 additional.Properties) (objects.Replica, error) {
	ret := _m.Called(_a0, host, index, shard, id, props, _a6)

	if len(ret) == 0 {
		panic("no return value specified for FetchObject")
	}

	var r0 objects.Replica
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) (objects.Replica, error)); ok {
		return rf(_a0, host, index, shard, id, props, _a6)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) objects.Replica); ok {
		r0 = rf(_a0, host, index, shard, id, props, _a6)
	} else {
		r0 = ret.Get(0).(objects.Replica)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) error); ok {
		r1 = rf(_a0, host, index, shard, id, props, _a6)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockrClient_FetchObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchObject'
type MockrClient_FetchObject_Call struct {
	*mock.Call
}

// FetchObject is a helper method to define mock.On call
//   - _a0 context.Context
//   - host string
//   - index string
//   - shard string
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a6 additional.Properties
func (_e *MockrClient_Expecter) FetchObject(_a0 interface{}, host interface{}, index interface{}, shard interface{}, id interface{}, props interface{}, _a6 interface{}) *MockrClient_FetchObject_Call {
	return &MockrClient_FetchObject_Call{Call: _e.mock.On("FetchObject", _a0, host, index, shard, id, props, _a6)}
}

func (_c *MockrClient_FetchObject_Call) Run(run func(_a0 context.Context, host string, index string, shard string, id strfmt.UUID, props search.SelectProperties, _a6 additional.Properties)) *MockrClient_FetchObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(strfmt.UUID), args[5].(search.SelectProperties), args[6].(additional.Properties))
	})
	return _c
}

func (_c *MockrClient_FetchObject_Call) Return(_a0 objects.Replica, _a1 error) *MockrClient_FetchObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockrClient_FetchObject_Call) RunAndReturn(run func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) (objects.Replica, error)) *MockrClient_FetchObject_Call {
	_c.Call.Return(run)
	return _c
}

// FetchObjects provides a mock function with given fields: _a0, host, index, shard, ids
func (_m *MockrClient) FetchObjects(_a0 context.Context, host string, index string, shard string, ids []strfmt.UUID) ([]objects.Replica, error) {
	ret := _m.Called(_a0, host, index, shard, ids)

	if len(ret) == 0 {
		panic("no return value specified for FetchObjects")
	}

	var r0 []objects.Replica
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID) ([]objects.Replica, error)); ok {
		return rf(_a0, host, index, shard, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID) []objects.Replica); ok {
		r0 = rf(_a0, host, index, shard, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]objects.Replica)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []strfmt.UUID) error); ok {
		r1 = rf(_a0, host, index, shard, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockrClient_FetchObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchObjects'
type MockrClient_FetchObjects_Call struct {
	*mock.Call
}

// FetchObjects is a helper method to define mock.On call
//   - _a0 context.Context
//   - host string
//   - index string
//   - shard string
//   - ids []strfmt.UUID
func (_e *MockrClient_Expecter) FetchObjects(_a0 interface{}, host interface{}, index interface{}, shard interface{}, ids interface{}) *MockrClient_FetchObjects_Call {
	return &MockrClient_FetchObjects_Call{Call: _e.mock.On("FetchObjects", _a0, host, index, shard, ids)}
}

func (_c *MockrClient_FetchObjects_Call) Run(run func(_a0 context.Context, host string, index string, shard string, ids []strfmt.UUID)) *MockrClient_FetchObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]strfmt.UUID))
	})
	return _c
}

func (_c *MockrClient_FetchObjects_Call) Return(_a0 []objects.Replica, _a1 error) *MockrClient_FetchObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockrClient_FetchObjects_Call) RunAndReturn(run func(context.Context, string, string, string, []strfmt.UUID) ([]objects.Replica, error)) *MockrClient_FetchObjects_Call {
	_c.Call.Return(run)
	return _c
}

// FindUUIDs provides a mock function with given fields: ctx, host, index, shard, _a4
func (_m *MockrClient) FindUUIDs(ctx context.Context, host string, index string, shard string, _a4 *filters.LocalFilter) ([]strfmt.UUID, error) {
	ret := _m.Called(ctx, host, index, shard, _a4)

	if len(ret) == 0 {
		panic("no return value specified for FindUUIDs")
	}

	var r0 []strfmt.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *filters.LocalFilter) ([]strfmt.UUID, error)); ok {
		return rf(ctx, host, index, shard, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *filters.LocalFilter) []strfmt.UUID); ok {
		r0 = rf(ctx, host, index, shard, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]strfmt.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, host, index, shard, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockrClient_FindUUIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUUIDs'
type MockrClient_FindUUIDs_Call struct {
	*mock.Call
}

// FindUUIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - _a4 *filters.LocalFilter
func (_e *MockrClient_Expecter) FindUUIDs(ctx interface{}, host interface{}, index interface{}, shard interface{}, _a4 interface{}) *MockrClient_FindUUIDs_Call {
	return &MockrClient_FindUUIDs_Call{Call: _e.mock.On("FindUUIDs", ctx, host, index, shard, _a4)}
}

func (_c *MockrClient_FindUUIDs_Call) Run(run func(ctx context.Context, host string, index string, shard string, _a4 *filters.LocalFilter)) *MockrClient_FindUUIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*filters.LocalFilter))
	})
	return _c
}

func (_c *MockrClient_FindUUIDs_Call) Return(_a0 []strfmt.UUID, _a1 error) *MockrClient_FindUUIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockrClient_FindUUIDs_Call) RunAndReturn(run func(context.Context, string, string, string, *filters.LocalFilter) ([]strfmt.UUID, error)) *MockrClient_FindUUIDs_Call {
	_c.Call.Return(run)
	return _c
}

// OverwriteObjects provides a mock function with given fields: _a0, host, index, shard, _a4
func (_m *MockrClient) OverwriteObjects(_a0 context.Context, host string, index string, shard string, _a4 []*objects.VObject) ([]RepairResponse, error) {
	ret := _m.Called(_a0, host, index, shard, _a4)

	if len(ret) == 0 {
		panic("no return value specified for OverwriteObjects")
	}

	var r0 []RepairResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*objects.VObject) ([]RepairResponse, error)); ok {
		return rf(_a0, host, index, shard, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*objects.VObject) []RepairResponse); ok {
		r0 = rf(_a0, host, index, shard, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RepairResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []*objects.VObject) error); ok {
		r1 = rf(_a0, host, index, shard, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockrClient_OverwriteObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OverwriteObjects'
type MockrClient_OverwriteObjects_Call struct {
	*mock.Call
}

// OverwriteObjects is a helper method to define mock.On call
//   - _a0 context.Context
//   - host string
//   - index string
//   - shard string
//   - _a4 []*objects.VObject
func (_e *MockrClient_Expecter) OverwriteObjects(_a0 interface{}, host interface{}, index interface{}, shard interface{}, _a4 interface{}) *MockrClient_OverwriteObjects_Call {
	return &MockrClient_OverwriteObjects_Call{Call: _e.mock.On("OverwriteObjects", _a0, host, index, shard, _a4)}
}

func (_c *MockrClient_OverwriteObjects_Call) Run(run func(_a0 context.Context, host string, index string, shard string, _a4 []*objects.VObject)) *MockrClient_OverwriteObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]*objects.VObject))
	})
	return _c
}

func (_c *MockrClient_OverwriteObjects_Call) Return(_a0 []RepairResponse, _a1 error) *MockrClient_OverwriteObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockrClient_OverwriteObjects_Call) RunAndReturn(run func(context.Context, string, string, string, []*objects.VObject) ([]RepairResponse, error)) *MockrClient_OverwriteObjects_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockrClient creates a new instance of MockrClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockrClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockrClient {
	mock := &MockrClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
