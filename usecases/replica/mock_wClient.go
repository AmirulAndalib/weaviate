//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package replica

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	objects "github.com/weaviate/weaviate/usecases/objects"

	storobj "github.com/weaviate/weaviate/entities/storobj"

	strfmt "github.com/go-openapi/strfmt"
)

// MockwClient is an autogenerated mock type for the wClient type
type MockwClient struct {
	mock.Mock
}

type MockwClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockwClient) EXPECT() *MockwClient_Expecter {
	return &MockwClient_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with given fields: ctx, host, index, shard, requestID
func (_m *MockwClient) Abort(ctx context.Context, host string, index string, shard string, requestID string) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID)

	if len(ret) == 0 {
		panic("no return value specified for Abort")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, host, index, shard, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockwClient_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type MockwClient_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
func (_e *MockwClient_Expecter) Abort(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}) *MockwClient_Abort_Call {
	return &MockwClient_Abort_Call{Call: _e.mock.On("Abort", ctx, host, index, shard, requestID)}
}

func (_c *MockwClient_Abort_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string)) *MockwClient_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockwClient_Abort_Call) Return(_a0 SimpleResponse, _a1 error) *MockwClient_Abort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockwClient_Abort_Call) RunAndReturn(run func(context.Context, string, string, string, string) (SimpleResponse, error)) *MockwClient_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// AddReferences provides a mock function with given fields: ctx, host, index, shard, requestID, refs
func (_m *MockwClient) AddReferences(ctx context.Context, host string, index string, shard string, requestID string, refs []objects.BatchReference) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, refs)

	if len(ret) == 0 {
		panic("no return value specified for AddReferences")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []objects.BatchReference) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, refs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []objects.BatchReference) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, refs)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []objects.BatchReference) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, refs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockwClient_AddReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReferences'
type MockwClient_AddReferences_Call struct {
	*mock.Call
}

// AddReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - refs []objects.BatchReference
func (_e *MockwClient_Expecter) AddReferences(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, refs interface{}) *MockwClient_AddReferences_Call {
	return &MockwClient_AddReferences_Call{Call: _e.mock.On("AddReferences", ctx, host, index, shard, requestID, refs)}
}

func (_c *MockwClient_AddReferences_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, refs []objects.BatchReference)) *MockwClient_AddReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]objects.BatchReference))
	})
	return _c
}

func (_c *MockwClient_AddReferences_Call) Return(_a0 SimpleResponse, _a1 error) *MockwClient_AddReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockwClient_AddReferences_Call) RunAndReturn(run func(context.Context, string, string, string, string, []objects.BatchReference) (SimpleResponse, error)) *MockwClient_AddReferences_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx, host, index, shard, requestID, resp
func (_m *MockwClient) Commit(ctx context.Context, host string, index string, shard string, requestID string, resp interface{}) error {
	ret := _m.Called(ctx, host, index, shard, requestID, resp)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, interface{}) error); ok {
		r0 = rf(ctx, host, index, shard, requestID, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockwClient_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockwClient_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - resp interface{}
func (_e *MockwClient_Expecter) Commit(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, resp interface{}) *MockwClient_Commit_Call {
	return &MockwClient_Commit_Call{Call: _e.mock.On("Commit", ctx, host, index, shard, requestID, resp)}
}

func (_c *MockwClient_Commit_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, resp interface{})) *MockwClient_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(interface{}))
	})
	return _c
}

func (_c *MockwClient_Commit_Call) Return(_a0 error) *MockwClient_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockwClient_Commit_Call) RunAndReturn(run func(context.Context, string, string, string, string, interface{}) error) *MockwClient_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function with given fields: ctx, host, index, shard, requestID, id
func (_m *MockwClient) DeleteObject(ctx context.Context, host string, index string, shard string, requestID string, id strfmt.UUID) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, strfmt.UUID) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, strfmt.UUID) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, id)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, strfmt.UUID) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockwClient_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type MockwClient_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - id strfmt.UUID
func (_e *MockwClient_Expecter) DeleteObject(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, id interface{}) *MockwClient_DeleteObject_Call {
	return &MockwClient_DeleteObject_Call{Call: _e.mock.On("DeleteObject", ctx, host, index, shard, requestID, id)}
}

func (_c *MockwClient_DeleteObject_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, id strfmt.UUID)) *MockwClient_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(strfmt.UUID))
	})
	return _c
}

func (_c *MockwClient_DeleteObject_Call) Return(_a0 SimpleResponse, _a1 error) *MockwClient_DeleteObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockwClient_DeleteObject_Call) RunAndReturn(run func(context.Context, string, string, string, string, strfmt.UUID) (SimpleResponse, error)) *MockwClient_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObjects provides a mock function with given fields: ctx, host, index, shard, requestID, uuids, dryRun
func (_m *MockwClient) DeleteObjects(ctx context.Context, host string, index string, shard string, requestID string, uuids []strfmt.UUID, dryRun bool) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, uuids, dryRun)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObjects")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []strfmt.UUID, bool) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, uuids, dryRun)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []strfmt.UUID, bool) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, uuids, dryRun)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []strfmt.UUID, bool) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, uuids, dryRun)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockwClient_DeleteObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObjects'
type MockwClient_DeleteObjects_Call struct {
	*mock.Call
}

// DeleteObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - uuids []strfmt.UUID
//   - dryRun bool
func (_e *MockwClient_Expecter) DeleteObjects(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, uuids interface{}, dryRun interface{}) *MockwClient_DeleteObjects_Call {
	return &MockwClient_DeleteObjects_Call{Call: _e.mock.On("DeleteObjects", ctx, host, index, shard, requestID, uuids, dryRun)}
}

func (_c *MockwClient_DeleteObjects_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, uuids []strfmt.UUID, dryRun bool)) *MockwClient_DeleteObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]strfmt.UUID), args[6].(bool))
	})
	return _c
}

func (_c *MockwClient_DeleteObjects_Call) Return(_a0 SimpleResponse, _a1 error) *MockwClient_DeleteObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockwClient_DeleteObjects_Call) RunAndReturn(run func(context.Context, string, string, string, string, []strfmt.UUID, bool) (SimpleResponse, error)) *MockwClient_DeleteObjects_Call {
	_c.Call.Return(run)
	return _c
}

// MergeObject provides a mock function with given fields: ctx, host, index, shard, requestID, mergeDoc
func (_m *MockwClient) MergeObject(ctx context.Context, host string, index string, shard string, requestID string, mergeDoc *objects.MergeDocument) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, mergeDoc)

	if len(ret) == 0 {
		panic("no return value specified for MergeObject")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *objects.MergeDocument) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, mergeDoc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *objects.MergeDocument) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, mergeDoc)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, *objects.MergeDocument) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, mergeDoc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockwClient_MergeObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeObject'
type MockwClient_MergeObject_Call struct {
	*mock.Call
}

// MergeObject is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - mergeDoc *objects.MergeDocument
func (_e *MockwClient_Expecter) MergeObject(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, mergeDoc interface{}) *MockwClient_MergeObject_Call {
	return &MockwClient_MergeObject_Call{Call: _e.mock.On("MergeObject", ctx, host, index, shard, requestID, mergeDoc)}
}

func (_c *MockwClient_MergeObject_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, mergeDoc *objects.MergeDocument)) *MockwClient_MergeObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(*objects.MergeDocument))
	})
	return _c
}

func (_c *MockwClient_MergeObject_Call) Return(_a0 SimpleResponse, _a1 error) *MockwClient_MergeObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockwClient_MergeObject_Call) RunAndReturn(run func(context.Context, string, string, string, string, *objects.MergeDocument) (SimpleResponse, error)) *MockwClient_MergeObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, host, index, shard, requestID, obj
func (_m *MockwClient) PutObject(ctx context.Context, host string, index string, shard string, requestID string, obj *storobj.Object) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, obj)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *storobj.Object) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *storobj.Object) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, obj)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, *storobj.Object) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockwClient_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type MockwClient_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - obj *storobj.Object
func (_e *MockwClient_Expecter) PutObject(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, obj interface{}) *MockwClient_PutObject_Call {
	return &MockwClient_PutObject_Call{Call: _e.mock.On("PutObject", ctx, host, index, shard, requestID, obj)}
}

func (_c *MockwClient_PutObject_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, obj *storobj.Object)) *MockwClient_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(*storobj.Object))
	})
	return _c
}

func (_c *MockwClient_PutObject_Call) Return(_a0 SimpleResponse, _a1 error) *MockwClient_PutObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockwClient_PutObject_Call) RunAndReturn(run func(context.Context, string, string, string, string, *storobj.Object) (SimpleResponse, error)) *MockwClient_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutObjects provides a mock function with given fields: ctx, host, index, shard, requestID, objs
func (_m *MockwClient) PutObjects(ctx context.Context, host string, index string, shard string, requestID string, objs []*storobj.Object) (SimpleResponse, error) {
	ret := _m.Called(ctx, host, index, shard, requestID, objs)

	if len(ret) == 0 {
		panic("no return value specified for PutObjects")
	}

	var r0 SimpleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []*storobj.Object) (SimpleResponse, error)); ok {
		return rf(ctx, host, index, shard, requestID, objs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []*storobj.Object) SimpleResponse); ok {
		r0 = rf(ctx, host, index, shard, requestID, objs)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []*storobj.Object) error); ok {
		r1 = rf(ctx, host, index, shard, requestID, objs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockwClient_PutObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObjects'
type MockwClient_PutObjects_Call struct {
	*mock.Call
}

// PutObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - host string
//   - index string
//   - shard string
//   - requestID string
//   - objs []*storobj.Object
func (_e *MockwClient_Expecter) PutObjects(ctx interface{}, host interface{}, index interface{}, shard interface{}, requestID interface{}, objs interface{}) *MockwClient_PutObjects_Call {
	return &MockwClient_PutObjects_Call{Call: _e.mock.On("PutObjects", ctx, host, index, shard, requestID, objs)}
}

func (_c *MockwClient_PutObjects_Call) Run(run func(ctx context.Context, host string, index string, shard string, requestID string, objs []*storobj.Object)) *MockwClient_PutObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]*storobj.Object))
	})
	return _c
}

func (_c *MockwClient_PutObjects_Call) Return(_a0 SimpleResponse, _a1 error) *MockwClient_PutObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockwClient_PutObjects_Call) RunAndReturn(run func(context.Context, string, string, string, string, []*storobj.Object) (SimpleResponse, error)) *MockwClient_PutObjects_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockwClient creates a new instance of MockwClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockwClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockwClient {
	mock := &MockwClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
