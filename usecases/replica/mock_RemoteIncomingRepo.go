//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package replica

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	objects "github.com/weaviate/weaviate/usecases/objects"

	storobj "github.com/weaviate/weaviate/entities/storobj"

	strfmt "github.com/go-openapi/strfmt"
)

// MockRemoteIncomingRepo is an autogenerated mock type for the RemoteIncomingRepo type
type MockRemoteIncomingRepo struct {
	mock.Mock
}

type MockRemoteIncomingRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteIncomingRepo) EXPECT() *MockRemoteIncomingRepo_Expecter {
	return &MockRemoteIncomingRepo_Expecter{mock: &_m.Mock}
}

// AbortReplication provides a mock function with given fields: indexName, shardName, requestID
func (_m *MockRemoteIncomingRepo) AbortReplication(indexName string, shardName string, requestID string) interface{} {
	ret := _m.Called(indexName, shardName, requestID)

	if len(ret) == 0 {
		panic("no return value specified for AbortReplication")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string, string) interface{}); ok {
		r0 = rf(indexName, shardName, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockRemoteIncomingRepo_AbortReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortReplication'
type MockRemoteIncomingRepo_AbortReplication_Call struct {
	*mock.Call
}

// AbortReplication is a helper method to define mock.On call
//   - indexName string
//   - shardName string
//   - requestID string
func (_e *MockRemoteIncomingRepo_Expecter) AbortReplication(indexName interface{}, shardName interface{}, requestID interface{}) *MockRemoteIncomingRepo_AbortReplication_Call {
	return &MockRemoteIncomingRepo_AbortReplication_Call{Call: _e.mock.On("AbortReplication", indexName, shardName, requestID)}
}

func (_c *MockRemoteIncomingRepo_AbortReplication_Call) Run(run func(indexName string, shardName string, requestID string)) *MockRemoteIncomingRepo_AbortReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_AbortReplication_Call) Return(_a0 interface{}) *MockRemoteIncomingRepo_AbortReplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIncomingRepo_AbortReplication_Call) RunAndReturn(run func(string, string, string) interface{}) *MockRemoteIncomingRepo_AbortReplication_Call {
	_c.Call.Return(run)
	return _c
}

// CommitReplication provides a mock function with given fields: indexName, shardName, requestID
func (_m *MockRemoteIncomingRepo) CommitReplication(indexName string, shardName string, requestID string) interface{} {
	ret := _m.Called(indexName, shardName, requestID)

	if len(ret) == 0 {
		panic("no return value specified for CommitReplication")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string, string) interface{}); ok {
		r0 = rf(indexName, shardName, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockRemoteIncomingRepo_CommitReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitReplication'
type MockRemoteIncomingRepo_CommitReplication_Call struct {
	*mock.Call
}

// CommitReplication is a helper method to define mock.On call
//   - indexName string
//   - shardName string
//   - requestID string
func (_e *MockRemoteIncomingRepo_Expecter) CommitReplication(indexName interface{}, shardName interface{}, requestID interface{}) *MockRemoteIncomingRepo_CommitReplication_Call {
	return &MockRemoteIncomingRepo_CommitReplication_Call{Call: _e.mock.On("CommitReplication", indexName, shardName, requestID)}
}

func (_c *MockRemoteIncomingRepo_CommitReplication_Call) Run(run func(indexName string, shardName string, requestID string)) *MockRemoteIncomingRepo_CommitReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_CommitReplication_Call) Return(_a0 interface{}) *MockRemoteIncomingRepo_CommitReplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIncomingRepo_CommitReplication_Call) RunAndReturn(run func(string, string, string) interface{}) *MockRemoteIncomingRepo_CommitReplication_Call {
	_c.Call.Return(run)
	return _c
}

// DigestObjects provides a mock function with given fields: ctx, class, shardName, ids
func (_m *MockRemoteIncomingRepo) DigestObjects(ctx context.Context, class string, shardName string, ids []strfmt.UUID) ([]RepairResponse, error) {
	ret := _m.Called(ctx, class, shardName, ids)

	if len(ret) == 0 {
		panic("no return value specified for DigestObjects")
	}

	var r0 []RepairResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []strfmt.UUID) ([]RepairResponse, error)); ok {
		return rf(ctx, class, shardName, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []strfmt.UUID) []RepairResponse); ok {
		r0 = rf(ctx, class, shardName, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RepairResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []strfmt.UUID) error); ok {
		r1 = rf(ctx, class, shardName, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIncomingRepo_DigestObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DigestObjects'
type MockRemoteIncomingRepo_DigestObjects_Call struct {
	*mock.Call
}

// DigestObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
//   - shardName string
//   - ids []strfmt.UUID
func (_e *MockRemoteIncomingRepo_Expecter) DigestObjects(ctx interface{}, class interface{}, shardName interface{}, ids interface{}) *MockRemoteIncomingRepo_DigestObjects_Call {
	return &MockRemoteIncomingRepo_DigestObjects_Call{Call: _e.mock.On("DigestObjects", ctx, class, shardName, ids)}
}

func (_c *MockRemoteIncomingRepo_DigestObjects_Call) Run(run func(ctx context.Context, class string, shardName string, ids []strfmt.UUID)) *MockRemoteIncomingRepo_DigestObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]strfmt.UUID))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_DigestObjects_Call) Return(result []RepairResponse, err error) *MockRemoteIncomingRepo_DigestObjects_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockRemoteIncomingRepo_DigestObjects_Call) RunAndReturn(run func(context.Context, string, string, []strfmt.UUID) ([]RepairResponse, error)) *MockRemoteIncomingRepo_DigestObjects_Call {
	_c.Call.Return(run)
	return _c
}

// FetchObject provides a mock function with given fields: ctx, indexName, shardName, id
func (_m *MockRemoteIncomingRepo) FetchObject(ctx context.Context, indexName string, shardName string, id strfmt.UUID) (objects.Replica, error) {
	ret := _m.Called(ctx, indexName, shardName, id)

	if len(ret) == 0 {
		panic("no return value specified for FetchObject")
	}

	var r0 objects.Replica
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, strfmt.UUID) (objects.Replica, error)); ok {
		return rf(ctx, indexName, shardName, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, strfmt.UUID) objects.Replica); ok {
		r0 = rf(ctx, indexName, shardName, id)
	} else {
		r0 = ret.Get(0).(objects.Replica)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, strfmt.UUID) error); ok {
		r1 = rf(ctx, indexName, shardName, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIncomingRepo_FetchObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchObject'
type MockRemoteIncomingRepo_FetchObject_Call struct {
	*mock.Call
}

// FetchObject is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - id strfmt.UUID
func (_e *MockRemoteIncomingRepo_Expecter) FetchObject(ctx interface{}, indexName interface{}, shardName interface{}, id interface{}) *MockRemoteIncomingRepo_FetchObject_Call {
	return &MockRemoteIncomingRepo_FetchObject_Call{Call: _e.mock.On("FetchObject", ctx, indexName, shardName, id)}
}

func (_c *MockRemoteIncomingRepo_FetchObject_Call) Run(run func(ctx context.Context, indexName string, shardName string, id strfmt.UUID)) *MockRemoteIncomingRepo_FetchObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(strfmt.UUID))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_FetchObject_Call) Return(_a0 objects.Replica, _a1 error) *MockRemoteIncomingRepo_FetchObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIncomingRepo_FetchObject_Call) RunAndReturn(run func(context.Context, string, string, strfmt.UUID) (objects.Replica, error)) *MockRemoteIncomingRepo_FetchObject_Call {
	_c.Call.Return(run)
	return _c
}

// FetchObjects provides a mock function with given fields: ctx, class, shardName, ids
func (_m *MockRemoteIncomingRepo) FetchObjects(ctx context.Context, class string, shardName string, ids []strfmt.UUID) ([]objects.Replica, error) {
	ret := _m.Called(ctx, class, shardName, ids)

	if len(ret) == 0 {
		panic("no return value specified for FetchObjects")
	}

	var r0 []objects.Replica
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []strfmt.UUID) ([]objects.Replica, error)); ok {
		return rf(ctx, class, shardName, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []strfmt.UUID) []objects.Replica); ok {
		r0 = rf(ctx, class, shardName, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]objects.Replica)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []strfmt.UUID) error); ok {
		r1 = rf(ctx, class, shardName, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIncomingRepo_FetchObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchObjects'
type MockRemoteIncomingRepo_FetchObjects_Call struct {
	*mock.Call
}

// FetchObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
//   - shardName string
//   - ids []strfmt.UUID
func (_e *MockRemoteIncomingRepo_Expecter) FetchObjects(ctx interface{}, class interface{}, shardName interface{}, ids interface{}) *MockRemoteIncomingRepo_FetchObjects_Call {
	return &MockRemoteIncomingRepo_FetchObjects_Call{Call: _e.mock.On("FetchObjects", ctx, class, shardName, ids)}
}

func (_c *MockRemoteIncomingRepo_FetchObjects_Call) Run(run func(ctx context.Context, class string, shardName string, ids []strfmt.UUID)) *MockRemoteIncomingRepo_FetchObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]strfmt.UUID))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_FetchObjects_Call) Return(_a0 []objects.Replica, _a1 error) *MockRemoteIncomingRepo_FetchObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIncomingRepo_FetchObjects_Call) RunAndReturn(run func(context.Context, string, string, []strfmt.UUID) ([]objects.Replica, error)) *MockRemoteIncomingRepo_FetchObjects_Call {
	_c.Call.Return(run)
	return _c
}

// OverwriteObjects provides a mock function with given fields: ctx, index, shard, vobjects
func (_m *MockRemoteIncomingRepo) OverwriteObjects(ctx context.Context, index string, shard string, vobjects []*objects.VObject) ([]RepairResponse, error) {
	ret := _m.Called(ctx, index, shard, vobjects)

	if len(ret) == 0 {
		panic("no return value specified for OverwriteObjects")
	}

	var r0 []RepairResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []*objects.VObject) ([]RepairResponse, error)); ok {
		return rf(ctx, index, shard, vobjects)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []*objects.VObject) []RepairResponse); ok {
		r0 = rf(ctx, index, shard, vobjects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RepairResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []*objects.VObject) error); ok {
		r1 = rf(ctx, index, shard, vobjects)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIncomingRepo_OverwriteObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OverwriteObjects'
type MockRemoteIncomingRepo_OverwriteObjects_Call struct {
	*mock.Call
}

// OverwriteObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - shard string
//   - vobjects []*objects.VObject
func (_e *MockRemoteIncomingRepo_Expecter) OverwriteObjects(ctx interface{}, index interface{}, shard interface{}, vobjects interface{}) *MockRemoteIncomingRepo_OverwriteObjects_Call {
	return &MockRemoteIncomingRepo_OverwriteObjects_Call{Call: _e.mock.On("OverwriteObjects", ctx, index, shard, vobjects)}
}

func (_c *MockRemoteIncomingRepo_OverwriteObjects_Call) Run(run func(ctx context.Context, index string, shard string, vobjects []*objects.VObject)) *MockRemoteIncomingRepo_OverwriteObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]*objects.VObject))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_OverwriteObjects_Call) Return(_a0 []RepairResponse, _a1 error) *MockRemoteIncomingRepo_OverwriteObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIncomingRepo_OverwriteObjects_Call) RunAndReturn(run func(context.Context, string, string, []*objects.VObject) ([]RepairResponse, error)) *MockRemoteIncomingRepo_OverwriteObjects_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateDeletion provides a mock function with given fields: ctx, indexName, shardName, requestID, uuid
func (_m *MockRemoteIncomingRepo) ReplicateDeletion(ctx context.Context, indexName string, shardName string, requestID string, uuid strfmt.UUID) SimpleResponse {
	ret := _m.Called(ctx, indexName, shardName, requestID, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateDeletion")
	}

	var r0 SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, strfmt.UUID) SimpleResponse); ok {
		r0 = rf(ctx, indexName, shardName, requestID, uuid)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	return r0
}

// MockRemoteIncomingRepo_ReplicateDeletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateDeletion'
type MockRemoteIncomingRepo_ReplicateDeletion_Call struct {
	*mock.Call
}

// ReplicateDeletion is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - requestID string
//   - uuid strfmt.UUID
func (_e *MockRemoteIncomingRepo_Expecter) ReplicateDeletion(ctx interface{}, indexName interface{}, shardName interface{}, requestID interface{}, uuid interface{}) *MockRemoteIncomingRepo_ReplicateDeletion_Call {
	return &MockRemoteIncomingRepo_ReplicateDeletion_Call{Call: _e.mock.On("ReplicateDeletion", ctx, indexName, shardName, requestID, uuid)}
}

func (_c *MockRemoteIncomingRepo_ReplicateDeletion_Call) Run(run func(ctx context.Context, indexName string, shardName string, requestID string, uuid strfmt.UUID)) *MockRemoteIncomingRepo_ReplicateDeletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(strfmt.UUID))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateDeletion_Call) Return(_a0 SimpleResponse) *MockRemoteIncomingRepo_ReplicateDeletion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateDeletion_Call) RunAndReturn(run func(context.Context, string, string, string, strfmt.UUID) SimpleResponse) *MockRemoteIncomingRepo_ReplicateDeletion_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateDeletions provides a mock function with given fields: ctx, indexName, shardName, requestID, uuids, dryRun
func (_m *MockRemoteIncomingRepo) ReplicateDeletions(ctx context.Context, indexName string, shardName string, requestID string, uuids []strfmt.UUID, dryRun bool) SimpleResponse {
	ret := _m.Called(ctx, indexName, shardName, requestID, uuids, dryRun)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateDeletions")
	}

	var r0 SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID, bool) SimpleResponse); ok {
		r0 = rf(ctx, indexName, shardName, requestID, uuids, dryRun)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	return r0
}

// MockRemoteIncomingRepo_ReplicateDeletions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateDeletions'
type MockRemoteIncomingRepo_ReplicateDeletions_Call struct {
	*mock.Call
}

// ReplicateDeletions is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - requestID string
//   - uuids []strfmt.UUID
//   - dryRun bool
func (_e *MockRemoteIncomingRepo_Expecter) ReplicateDeletions(ctx interface{}, indexName interface{}, shardName interface{}, requestID interface{}, uuids interface{}, dryRun interface{}) *MockRemoteIncomingRepo_ReplicateDeletions_Call {
	return &MockRemoteIncomingRepo_ReplicateDeletions_Call{Call: _e.mock.On("ReplicateDeletions", ctx, indexName, shardName, requestID, uuids, dryRun)}
}

func (_c *MockRemoteIncomingRepo_ReplicateDeletions_Call) Run(run func(ctx context.Context, indexName string, shardName string, requestID string, uuids []strfmt.UUID, dryRun bool)) *MockRemoteIncomingRepo_ReplicateDeletions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]strfmt.UUID), args[5].(bool))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateDeletions_Call) Return(_a0 SimpleResponse) *MockRemoteIncomingRepo_ReplicateDeletions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateDeletions_Call) RunAndReturn(run func(context.Context, string, string, string, []strfmt.UUID, bool) SimpleResponse) *MockRemoteIncomingRepo_ReplicateDeletions_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateObject provides a mock function with given fields: ctx, indexName, shardName, requestID, object
func (_m *MockRemoteIncomingRepo) ReplicateObject(ctx context.Context, indexName string, shardName string, requestID string, object *storobj.Object) SimpleResponse {
	ret := _m.Called(ctx, indexName, shardName, requestID, object)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateObject")
	}

	var r0 SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *storobj.Object) SimpleResponse); ok {
		r0 = rf(ctx, indexName, shardName, requestID, object)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	return r0
}

// MockRemoteIncomingRepo_ReplicateObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateObject'
type MockRemoteIncomingRepo_ReplicateObject_Call struct {
	*mock.Call
}

// ReplicateObject is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - requestID string
//   - object *storobj.Object
func (_e *MockRemoteIncomingRepo_Expecter) ReplicateObject(ctx interface{}, indexName interface{}, shardName interface{}, requestID interface{}, object interface{}) *MockRemoteIncomingRepo_ReplicateObject_Call {
	return &MockRemoteIncomingRepo_ReplicateObject_Call{Call: _e.mock.On("ReplicateObject", ctx, indexName, shardName, requestID, object)}
}

func (_c *MockRemoteIncomingRepo_ReplicateObject_Call) Run(run func(ctx context.Context, indexName string, shardName string, requestID string, object *storobj.Object)) *MockRemoteIncomingRepo_ReplicateObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*storobj.Object))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateObject_Call) Return(_a0 SimpleResponse) *MockRemoteIncomingRepo_ReplicateObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateObject_Call) RunAndReturn(run func(context.Context, string, string, string, *storobj.Object) SimpleResponse) *MockRemoteIncomingRepo_ReplicateObject_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateObjects provides a mock function with given fields: ctx, indexName, shardName, requestID, _a4
func (_m *MockRemoteIncomingRepo) ReplicateObjects(ctx context.Context, indexName string, shardName string, requestID string, _a4 []*storobj.Object) SimpleResponse {
	ret := _m.Called(ctx, indexName, shardName, requestID, _a4)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateObjects")
	}

	var r0 SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*storobj.Object) SimpleResponse); ok {
		r0 = rf(ctx, indexName, shardName, requestID, _a4)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	return r0
}

// MockRemoteIncomingRepo_ReplicateObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateObjects'
type MockRemoteIncomingRepo_ReplicateObjects_Call struct {
	*mock.Call
}

// ReplicateObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - requestID string
//   - _a4 []*storobj.Object
func (_e *MockRemoteIncomingRepo_Expecter) ReplicateObjects(ctx interface{}, indexName interface{}, shardName interface{}, requestID interface{}, _a4 interface{}) *MockRemoteIncomingRepo_ReplicateObjects_Call {
	return &MockRemoteIncomingRepo_ReplicateObjects_Call{Call: _e.mock.On("ReplicateObjects", ctx, indexName, shardName, requestID, _a4)}
}

func (_c *MockRemoteIncomingRepo_ReplicateObjects_Call) Run(run func(ctx context.Context, indexName string, shardName string, requestID string, _a4 []*storobj.Object)) *MockRemoteIncomingRepo_ReplicateObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]*storobj.Object))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateObjects_Call) Return(_a0 SimpleResponse) *MockRemoteIncomingRepo_ReplicateObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateObjects_Call) RunAndReturn(run func(context.Context, string, string, string, []*storobj.Object) SimpleResponse) *MockRemoteIncomingRepo_ReplicateObjects_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateReferences provides a mock function with given fields: ctx, indexName, shardName, requestID, refs
func (_m *MockRemoteIncomingRepo) ReplicateReferences(ctx context.Context, indexName string, shardName string, requestID string, refs []objects.BatchReference) SimpleResponse {
	ret := _m.Called(ctx, indexName, shardName, requestID, refs)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateReferences")
	}

	var r0 SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []objects.BatchReference) SimpleResponse); ok {
		r0 = rf(ctx, indexName, shardName, requestID, refs)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	return r0
}

// MockRemoteIncomingRepo_ReplicateReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateReferences'
type MockRemoteIncomingRepo_ReplicateReferences_Call struct {
	*mock.Call
}

// ReplicateReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - requestID string
//   - refs []objects.BatchReference
func (_e *MockRemoteIncomingRepo_Expecter) ReplicateReferences(ctx interface{}, indexName interface{}, shardName interface{}, requestID interface{}, refs interface{}) *MockRemoteIncomingRepo_ReplicateReferences_Call {
	return &MockRemoteIncomingRepo_ReplicateReferences_Call{Call: _e.mock.On("ReplicateReferences", ctx, indexName, shardName, requestID, refs)}
}

func (_c *MockRemoteIncomingRepo_ReplicateReferences_Call) Run(run func(ctx context.Context, indexName string, shardName string, requestID string, refs []objects.BatchReference)) *MockRemoteIncomingRepo_ReplicateReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]objects.BatchReference))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateReferences_Call) Return(_a0 SimpleResponse) *MockRemoteIncomingRepo_ReplicateReferences_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateReferences_Call) RunAndReturn(run func(context.Context, string, string, string, []objects.BatchReference) SimpleResponse) *MockRemoteIncomingRepo_ReplicateReferences_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateUpdate provides a mock function with given fields: ctx, indexName, shardName, requestID, mergeDoc
func (_m *MockRemoteIncomingRepo) ReplicateUpdate(ctx context.Context, indexName string, shardName string, requestID string, mergeDoc *objects.MergeDocument) SimpleResponse {
	ret := _m.Called(ctx, indexName, shardName, requestID, mergeDoc)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateUpdate")
	}

	var r0 SimpleResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *objects.MergeDocument) SimpleResponse); ok {
		r0 = rf(ctx, indexName, shardName, requestID, mergeDoc)
	} else {
		r0 = ret.Get(0).(SimpleResponse)
	}

	return r0
}

// MockRemoteIncomingRepo_ReplicateUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateUpdate'
type MockRemoteIncomingRepo_ReplicateUpdate_Call struct {
	*mock.Call
}

// ReplicateUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - indexName string
//   - shardName string
//   - requestID string
//   - mergeDoc *objects.MergeDocument
func (_e *MockRemoteIncomingRepo_Expecter) ReplicateUpdate(ctx interface{}, indexName interface{}, shardName interface{}, requestID interface{}, mergeDoc interface{}) *MockRemoteIncomingRepo_ReplicateUpdate_Call {
	return &MockRemoteIncomingRepo_ReplicateUpdate_Call{Call: _e.mock.On("ReplicateUpdate", ctx, indexName, shardName, requestID, mergeDoc)}
}

func (_c *MockRemoteIncomingRepo_ReplicateUpdate_Call) Run(run func(ctx context.Context, indexName string, shardName string, requestID string, mergeDoc *objects.MergeDocument)) *MockRemoteIncomingRepo_ReplicateUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*objects.MergeDocument))
	})
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateUpdate_Call) Return(_a0 SimpleResponse) *MockRemoteIncomingRepo_ReplicateUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIncomingRepo_ReplicateUpdate_Call) RunAndReturn(run func(context.Context, string, string, string, *objects.MergeDocument) SimpleResponse) *MockRemoteIncomingRepo_ReplicateUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteIncomingRepo creates a new instance of MockRemoteIncomingRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteIncomingRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteIncomingRepo {
	mock := &MockRemoteIncomingRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
