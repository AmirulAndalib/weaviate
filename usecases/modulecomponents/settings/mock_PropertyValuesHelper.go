//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package settings

import (
	mock "github.com/stretchr/testify/mock"
	moduletools "github.com/weaviate/weaviate/entities/moduletools"
)

// MockPropertyValuesHelper is an autogenerated mock type for the PropertyValuesHelper type
type MockPropertyValuesHelper struct {
	mock.Mock
}

type MockPropertyValuesHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPropertyValuesHelper) EXPECT() *MockPropertyValuesHelper_Expecter {
	return &MockPropertyValuesHelper_Expecter{mock: &_m.Mock}
}

// GetNumber provides a mock function with given fields: in
func (_m *MockPropertyValuesHelper) GetNumber(in interface{}) (float32, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for GetNumber")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (float32, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(interface{}) float32); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPropertyValuesHelper_GetNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNumber'
type MockPropertyValuesHelper_GetNumber_Call struct {
	*mock.Call
}

// GetNumber is a helper method to define mock.On call
//   - in interface{}
func (_e *MockPropertyValuesHelper_Expecter) GetNumber(in interface{}) *MockPropertyValuesHelper_GetNumber_Call {
	return &MockPropertyValuesHelper_GetNumber_Call{Call: _e.mock.On("GetNumber", in)}
}

func (_c *MockPropertyValuesHelper_GetNumber_Call) Run(run func(in interface{})) *MockPropertyValuesHelper_GetNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockPropertyValuesHelper_GetNumber_Call) Return(_a0 float32, _a1 error) *MockPropertyValuesHelper_GetNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPropertyValuesHelper_GetNumber_Call) RunAndReturn(run func(interface{}) (float32, error)) *MockPropertyValuesHelper_GetNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertyAsBool provides a mock function with given fields: cfg, name, defaultValue
func (_m *MockPropertyValuesHelper) GetPropertyAsBool(cfg moduletools.ClassConfig, name string, defaultValue bool) bool {
	ret := _m.Called(cfg, name, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyAsBool")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(moduletools.ClassConfig, string, bool) bool); ok {
		r0 = rf(cfg, name, defaultValue)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPropertyValuesHelper_GetPropertyAsBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertyAsBool'
type MockPropertyValuesHelper_GetPropertyAsBool_Call struct {
	*mock.Call
}

// GetPropertyAsBool is a helper method to define mock.On call
//   - cfg moduletools.ClassConfig
//   - name string
//   - defaultValue bool
func (_e *MockPropertyValuesHelper_Expecter) GetPropertyAsBool(cfg interface{}, name interface{}, defaultValue interface{}) *MockPropertyValuesHelper_GetPropertyAsBool_Call {
	return &MockPropertyValuesHelper_GetPropertyAsBool_Call{Call: _e.mock.On("GetPropertyAsBool", cfg, name, defaultValue)}
}

func (_c *MockPropertyValuesHelper_GetPropertyAsBool_Call) Run(run func(cfg moduletools.ClassConfig, name string, defaultValue bool)) *MockPropertyValuesHelper_GetPropertyAsBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(moduletools.ClassConfig), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsBool_Call) Return(_a0 bool) *MockPropertyValuesHelper_GetPropertyAsBool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsBool_Call) RunAndReturn(run func(moduletools.ClassConfig, string, bool) bool) *MockPropertyValuesHelper_GetPropertyAsBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertyAsBoolWithNotExists provides a mock function with given fields: cfg, name, defaultValue, notExistsValue
func (_m *MockPropertyValuesHelper) GetPropertyAsBoolWithNotExists(cfg moduletools.ClassConfig, name string, defaultValue bool, notExistsValue bool) bool {
	ret := _m.Called(cfg, name, defaultValue, notExistsValue)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyAsBoolWithNotExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(moduletools.ClassConfig, string, bool, bool) bool); ok {
		r0 = rf(cfg, name, defaultValue, notExistsValue)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPropertyValuesHelper_GetPropertyAsBoolWithNotExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertyAsBoolWithNotExists'
type MockPropertyValuesHelper_GetPropertyAsBoolWithNotExists_Call struct {
	*mock.Call
}

// GetPropertyAsBoolWithNotExists is a helper method to define mock.On call
//   - cfg moduletools.ClassConfig
//   - name string
//   - defaultValue bool
//   - notExistsValue bool
func (_e *MockPropertyValuesHelper_Expecter) GetPropertyAsBoolWithNotExists(cfg interface{}, name interface{}, defaultValue interface{}, notExistsValue interface{}) *MockPropertyValuesHelper_GetPropertyAsBoolWithNotExists_Call {
	return &MockPropertyValuesHelper_GetPropertyAsBoolWithNotExists_Call{Call: _e.mock.On("GetPropertyAsBoolWithNotExists", cfg, name, defaultValue, notExistsValue)}
}

func (_c *MockPropertyValuesHelper_GetPropertyAsBoolWithNotExists_Call) Run(run func(cfg moduletools.ClassConfig, name string, defaultValue bool, notExistsValue bool)) *MockPropertyValuesHelper_GetPropertyAsBoolWithNotExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(moduletools.ClassConfig), args[1].(string), args[2].(bool), args[3].(bool))
	})
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsBoolWithNotExists_Call) Return(_a0 bool) *MockPropertyValuesHelper_GetPropertyAsBoolWithNotExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsBoolWithNotExists_Call) RunAndReturn(run func(moduletools.ClassConfig, string, bool, bool) bool) *MockPropertyValuesHelper_GetPropertyAsBoolWithNotExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertyAsFloat64 provides a mock function with given fields: cfg, name, defaultValue
func (_m *MockPropertyValuesHelper) GetPropertyAsFloat64(cfg moduletools.ClassConfig, name string, defaultValue *float64) *float64 {
	ret := _m.Called(cfg, name, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyAsFloat64")
	}

	var r0 *float64
	if rf, ok := ret.Get(0).(func(moduletools.ClassConfig, string, *float64) *float64); ok {
		r0 = rf(cfg, name, defaultValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*float64)
		}
	}

	return r0
}

// MockPropertyValuesHelper_GetPropertyAsFloat64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertyAsFloat64'
type MockPropertyValuesHelper_GetPropertyAsFloat64_Call struct {
	*mock.Call
}

// GetPropertyAsFloat64 is a helper method to define mock.On call
//   - cfg moduletools.ClassConfig
//   - name string
//   - defaultValue *float64
func (_e *MockPropertyValuesHelper_Expecter) GetPropertyAsFloat64(cfg interface{}, name interface{}, defaultValue interface{}) *MockPropertyValuesHelper_GetPropertyAsFloat64_Call {
	return &MockPropertyValuesHelper_GetPropertyAsFloat64_Call{Call: _e.mock.On("GetPropertyAsFloat64", cfg, name, defaultValue)}
}

func (_c *MockPropertyValuesHelper_GetPropertyAsFloat64_Call) Run(run func(cfg moduletools.ClassConfig, name string, defaultValue *float64)) *MockPropertyValuesHelper_GetPropertyAsFloat64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(moduletools.ClassConfig), args[1].(string), args[2].(*float64))
	})
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsFloat64_Call) Return(_a0 *float64) *MockPropertyValuesHelper_GetPropertyAsFloat64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsFloat64_Call) RunAndReturn(run func(moduletools.ClassConfig, string, *float64) *float64) *MockPropertyValuesHelper_GetPropertyAsFloat64_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertyAsFloat64WithNotExists provides a mock function with given fields: cfg, name, defaultValue, notExistsValue
func (_m *MockPropertyValuesHelper) GetPropertyAsFloat64WithNotExists(cfg moduletools.ClassConfig, name string, defaultValue *float64, notExistsValue *float64) *float64 {
	ret := _m.Called(cfg, name, defaultValue, notExistsValue)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyAsFloat64WithNotExists")
	}

	var r0 *float64
	if rf, ok := ret.Get(0).(func(moduletools.ClassConfig, string, *float64, *float64) *float64); ok {
		r0 = rf(cfg, name, defaultValue, notExistsValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*float64)
		}
	}

	return r0
}

// MockPropertyValuesHelper_GetPropertyAsFloat64WithNotExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertyAsFloat64WithNotExists'
type MockPropertyValuesHelper_GetPropertyAsFloat64WithNotExists_Call struct {
	*mock.Call
}

// GetPropertyAsFloat64WithNotExists is a helper method to define mock.On call
//   - cfg moduletools.ClassConfig
//   - name string
//   - defaultValue *float64
//   - notExistsValue *float64
func (_e *MockPropertyValuesHelper_Expecter) GetPropertyAsFloat64WithNotExists(cfg interface{}, name interface{}, defaultValue interface{}, notExistsValue interface{}) *MockPropertyValuesHelper_GetPropertyAsFloat64WithNotExists_Call {
	return &MockPropertyValuesHelper_GetPropertyAsFloat64WithNotExists_Call{Call: _e.mock.On("GetPropertyAsFloat64WithNotExists", cfg, name, defaultValue, notExistsValue)}
}

func (_c *MockPropertyValuesHelper_GetPropertyAsFloat64WithNotExists_Call) Run(run func(cfg moduletools.ClassConfig, name string, defaultValue *float64, notExistsValue *float64)) *MockPropertyValuesHelper_GetPropertyAsFloat64WithNotExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(moduletools.ClassConfig), args[1].(string), args[2].(*float64), args[3].(*float64))
	})
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsFloat64WithNotExists_Call) Return(_a0 *float64) *MockPropertyValuesHelper_GetPropertyAsFloat64WithNotExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsFloat64WithNotExists_Call) RunAndReturn(run func(moduletools.ClassConfig, string, *float64, *float64) *float64) *MockPropertyValuesHelper_GetPropertyAsFloat64WithNotExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertyAsInt provides a mock function with given fields: cfg, name, defaultValue
func (_m *MockPropertyValuesHelper) GetPropertyAsInt(cfg moduletools.ClassConfig, name string, defaultValue *int) *int {
	ret := _m.Called(cfg, name, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyAsInt")
	}

	var r0 *int
	if rf, ok := ret.Get(0).(func(moduletools.ClassConfig, string, *int) *int); ok {
		r0 = rf(cfg, name, defaultValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	return r0
}

// MockPropertyValuesHelper_GetPropertyAsInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertyAsInt'
type MockPropertyValuesHelper_GetPropertyAsInt_Call struct {
	*mock.Call
}

// GetPropertyAsInt is a helper method to define mock.On call
//   - cfg moduletools.ClassConfig
//   - name string
//   - defaultValue *int
func (_e *MockPropertyValuesHelper_Expecter) GetPropertyAsInt(cfg interface{}, name interface{}, defaultValue interface{}) *MockPropertyValuesHelper_GetPropertyAsInt_Call {
	return &MockPropertyValuesHelper_GetPropertyAsInt_Call{Call: _e.mock.On("GetPropertyAsInt", cfg, name, defaultValue)}
}

func (_c *MockPropertyValuesHelper_GetPropertyAsInt_Call) Run(run func(cfg moduletools.ClassConfig, name string, defaultValue *int)) *MockPropertyValuesHelper_GetPropertyAsInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(moduletools.ClassConfig), args[1].(string), args[2].(*int))
	})
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsInt_Call) Return(_a0 *int) *MockPropertyValuesHelper_GetPropertyAsInt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsInt_Call) RunAndReturn(run func(moduletools.ClassConfig, string, *int) *int) *MockPropertyValuesHelper_GetPropertyAsInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertyAsInt64 provides a mock function with given fields: cfg, name, defaultValue
func (_m *MockPropertyValuesHelper) GetPropertyAsInt64(cfg moduletools.ClassConfig, name string, defaultValue *int64) *int64 {
	ret := _m.Called(cfg, name, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyAsInt64")
	}

	var r0 *int64
	if rf, ok := ret.Get(0).(func(moduletools.ClassConfig, string, *int64) *int64); ok {
		r0 = rf(cfg, name, defaultValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	return r0
}

// MockPropertyValuesHelper_GetPropertyAsInt64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertyAsInt64'
type MockPropertyValuesHelper_GetPropertyAsInt64_Call struct {
	*mock.Call
}

// GetPropertyAsInt64 is a helper method to define mock.On call
//   - cfg moduletools.ClassConfig
//   - name string
//   - defaultValue *int64
func (_e *MockPropertyValuesHelper_Expecter) GetPropertyAsInt64(cfg interface{}, name interface{}, defaultValue interface{}) *MockPropertyValuesHelper_GetPropertyAsInt64_Call {
	return &MockPropertyValuesHelper_GetPropertyAsInt64_Call{Call: _e.mock.On("GetPropertyAsInt64", cfg, name, defaultValue)}
}

func (_c *MockPropertyValuesHelper_GetPropertyAsInt64_Call) Run(run func(cfg moduletools.ClassConfig, name string, defaultValue *int64)) *MockPropertyValuesHelper_GetPropertyAsInt64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(moduletools.ClassConfig), args[1].(string), args[2].(*int64))
	})
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsInt64_Call) Return(_a0 *int64) *MockPropertyValuesHelper_GetPropertyAsInt64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsInt64_Call) RunAndReturn(run func(moduletools.ClassConfig, string, *int64) *int64) *MockPropertyValuesHelper_GetPropertyAsInt64_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertyAsInt64WithNotExists provides a mock function with given fields: cfg, name, defaultValue, notExistsValue
func (_m *MockPropertyValuesHelper) GetPropertyAsInt64WithNotExists(cfg moduletools.ClassConfig, name string, defaultValue *int64, notExistsValue *int64) *int64 {
	ret := _m.Called(cfg, name, defaultValue, notExistsValue)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyAsInt64WithNotExists")
	}

	var r0 *int64
	if rf, ok := ret.Get(0).(func(moduletools.ClassConfig, string, *int64, *int64) *int64); ok {
		r0 = rf(cfg, name, defaultValue, notExistsValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	return r0
}

// MockPropertyValuesHelper_GetPropertyAsInt64WithNotExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertyAsInt64WithNotExists'
type MockPropertyValuesHelper_GetPropertyAsInt64WithNotExists_Call struct {
	*mock.Call
}

// GetPropertyAsInt64WithNotExists is a helper method to define mock.On call
//   - cfg moduletools.ClassConfig
//   - name string
//   - defaultValue *int64
//   - notExistsValue *int64
func (_e *MockPropertyValuesHelper_Expecter) GetPropertyAsInt64WithNotExists(cfg interface{}, name interface{}, defaultValue interface{}, notExistsValue interface{}) *MockPropertyValuesHelper_GetPropertyAsInt64WithNotExists_Call {
	return &MockPropertyValuesHelper_GetPropertyAsInt64WithNotExists_Call{Call: _e.mock.On("GetPropertyAsInt64WithNotExists", cfg, name, defaultValue, notExistsValue)}
}

func (_c *MockPropertyValuesHelper_GetPropertyAsInt64WithNotExists_Call) Run(run func(cfg moduletools.ClassConfig, name string, defaultValue *int64, notExistsValue *int64)) *MockPropertyValuesHelper_GetPropertyAsInt64WithNotExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(moduletools.ClassConfig), args[1].(string), args[2].(*int64), args[3].(*int64))
	})
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsInt64WithNotExists_Call) Return(_a0 *int64) *MockPropertyValuesHelper_GetPropertyAsInt64WithNotExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsInt64WithNotExists_Call) RunAndReturn(run func(moduletools.ClassConfig, string, *int64, *int64) *int64) *MockPropertyValuesHelper_GetPropertyAsInt64WithNotExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertyAsIntWithNotExists provides a mock function with given fields: cfg, name, defaultValue, notExistsValue
func (_m *MockPropertyValuesHelper) GetPropertyAsIntWithNotExists(cfg moduletools.ClassConfig, name string, defaultValue *int, notExistsValue *int) *int {
	ret := _m.Called(cfg, name, defaultValue, notExistsValue)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyAsIntWithNotExists")
	}

	var r0 *int
	if rf, ok := ret.Get(0).(func(moduletools.ClassConfig, string, *int, *int) *int); ok {
		r0 = rf(cfg, name, defaultValue, notExistsValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	return r0
}

// MockPropertyValuesHelper_GetPropertyAsIntWithNotExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertyAsIntWithNotExists'
type MockPropertyValuesHelper_GetPropertyAsIntWithNotExists_Call struct {
	*mock.Call
}

// GetPropertyAsIntWithNotExists is a helper method to define mock.On call
//   - cfg moduletools.ClassConfig
//   - name string
//   - defaultValue *int
//   - notExistsValue *int
func (_e *MockPropertyValuesHelper_Expecter) GetPropertyAsIntWithNotExists(cfg interface{}, name interface{}, defaultValue interface{}, notExistsValue interface{}) *MockPropertyValuesHelper_GetPropertyAsIntWithNotExists_Call {
	return &MockPropertyValuesHelper_GetPropertyAsIntWithNotExists_Call{Call: _e.mock.On("GetPropertyAsIntWithNotExists", cfg, name, defaultValue, notExistsValue)}
}

func (_c *MockPropertyValuesHelper_GetPropertyAsIntWithNotExists_Call) Run(run func(cfg moduletools.ClassConfig, name string, defaultValue *int, notExistsValue *int)) *MockPropertyValuesHelper_GetPropertyAsIntWithNotExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(moduletools.ClassConfig), args[1].(string), args[2].(*int), args[3].(*int))
	})
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsIntWithNotExists_Call) Return(_a0 *int) *MockPropertyValuesHelper_GetPropertyAsIntWithNotExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsIntWithNotExists_Call) RunAndReturn(run func(moduletools.ClassConfig, string, *int, *int) *int) *MockPropertyValuesHelper_GetPropertyAsIntWithNotExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertyAsString provides a mock function with given fields: cfg, name, defaultValue
func (_m *MockPropertyValuesHelper) GetPropertyAsString(cfg moduletools.ClassConfig, name string, defaultValue string) string {
	ret := _m.Called(cfg, name, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyAsString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(moduletools.ClassConfig, string, string) string); ok {
		r0 = rf(cfg, name, defaultValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPropertyValuesHelper_GetPropertyAsString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertyAsString'
type MockPropertyValuesHelper_GetPropertyAsString_Call struct {
	*mock.Call
}

// GetPropertyAsString is a helper method to define mock.On call
//   - cfg moduletools.ClassConfig
//   - name string
//   - defaultValue string
func (_e *MockPropertyValuesHelper_Expecter) GetPropertyAsString(cfg interface{}, name interface{}, defaultValue interface{}) *MockPropertyValuesHelper_GetPropertyAsString_Call {
	return &MockPropertyValuesHelper_GetPropertyAsString_Call{Call: _e.mock.On("GetPropertyAsString", cfg, name, defaultValue)}
}

func (_c *MockPropertyValuesHelper_GetPropertyAsString_Call) Run(run func(cfg moduletools.ClassConfig, name string, defaultValue string)) *MockPropertyValuesHelper_GetPropertyAsString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(moduletools.ClassConfig), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsString_Call) Return(_a0 string) *MockPropertyValuesHelper_GetPropertyAsString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsString_Call) RunAndReturn(run func(moduletools.ClassConfig, string, string) string) *MockPropertyValuesHelper_GetPropertyAsString_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertyAsStringWithNotExists provides a mock function with given fields: cfg, name, defaultValue, notExistsValue
func (_m *MockPropertyValuesHelper) GetPropertyAsStringWithNotExists(cfg moduletools.ClassConfig, name string, defaultValue string, notExistsValue string) string {
	ret := _m.Called(cfg, name, defaultValue, notExistsValue)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyAsStringWithNotExists")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(moduletools.ClassConfig, string, string, string) string); ok {
		r0 = rf(cfg, name, defaultValue, notExistsValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPropertyValuesHelper_GetPropertyAsStringWithNotExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertyAsStringWithNotExists'
type MockPropertyValuesHelper_GetPropertyAsStringWithNotExists_Call struct {
	*mock.Call
}

// GetPropertyAsStringWithNotExists is a helper method to define mock.On call
//   - cfg moduletools.ClassConfig
//   - name string
//   - defaultValue string
//   - notExistsValue string
func (_e *MockPropertyValuesHelper_Expecter) GetPropertyAsStringWithNotExists(cfg interface{}, name interface{}, defaultValue interface{}, notExistsValue interface{}) *MockPropertyValuesHelper_GetPropertyAsStringWithNotExists_Call {
	return &MockPropertyValuesHelper_GetPropertyAsStringWithNotExists_Call{Call: _e.mock.On("GetPropertyAsStringWithNotExists", cfg, name, defaultValue, notExistsValue)}
}

func (_c *MockPropertyValuesHelper_GetPropertyAsStringWithNotExists_Call) Run(run func(cfg moduletools.ClassConfig, name string, defaultValue string, notExistsValue string)) *MockPropertyValuesHelper_GetPropertyAsStringWithNotExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(moduletools.ClassConfig), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsStringWithNotExists_Call) Return(_a0 string) *MockPropertyValuesHelper_GetPropertyAsStringWithNotExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropertyValuesHelper_GetPropertyAsStringWithNotExists_Call) RunAndReturn(run func(moduletools.ClassConfig, string, string, string) string) *MockPropertyValuesHelper_GetPropertyAsStringWithNotExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPropertyValuesHelper creates a new instance of MockPropertyValuesHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPropertyValuesHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPropertyValuesHelper {
	mock := &MockPropertyValuesHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
