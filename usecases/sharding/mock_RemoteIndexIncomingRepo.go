//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package sharding

import (
	additional "github.com/weaviate/weaviate/entities/additional"
	aggregation "github.com/weaviate/weaviate/entities/aggregation"

	context "context"

	filters "github.com/weaviate/weaviate/entities/filters"

	io "io"

	mock "github.com/stretchr/testify/mock"

	objects "github.com/weaviate/weaviate/usecases/objects"

	replica "github.com/weaviate/weaviate/usecases/replica"

	search "github.com/weaviate/weaviate/entities/search"

	searchparams "github.com/weaviate/weaviate/entities/searchparams"

	storobj "github.com/weaviate/weaviate/entities/storobj"

	strfmt "github.com/go-openapi/strfmt"
)

// MockRemoteIndexIncomingRepo is an autogenerated mock type for the RemoteIndexIncomingRepo type
type MockRemoteIndexIncomingRepo struct {
	mock.Mock
}

type MockRemoteIndexIncomingRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteIndexIncomingRepo) EXPECT() *MockRemoteIndexIncomingRepo_Expecter {
	return &MockRemoteIndexIncomingRepo_Expecter{mock: &_m.Mock}
}

// IncomingAggregate provides a mock function with given fields: ctx, shardName, params
func (_m *MockRemoteIndexIncomingRepo) IncomingAggregate(ctx context.Context, shardName string, params aggregation.Params) (*aggregation.Result, error) {
	ret := _m.Called(ctx, shardName, params)

	if len(ret) == 0 {
		panic("no return value specified for IncomingAggregate")
	}

	var r0 *aggregation.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, aggregation.Params) (*aggregation.Result, error)); ok {
		return rf(ctx, shardName, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, aggregation.Params) *aggregation.Result); ok {
		r0 = rf(ctx, shardName, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregation.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, aggregation.Params) error); ok {
		r1 = rf(ctx, shardName, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexIncomingRepo_IncomingAggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingAggregate'
type MockRemoteIndexIncomingRepo_IncomingAggregate_Call struct {
	*mock.Call
}

// IncomingAggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - params aggregation.Params
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingAggregate(ctx interface{}, shardName interface{}, params interface{}) *MockRemoteIndexIncomingRepo_IncomingAggregate_Call {
	return &MockRemoteIndexIncomingRepo_IncomingAggregate_Call{Call: _e.mock.On("IncomingAggregate", ctx, shardName, params)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingAggregate_Call) Run(run func(ctx context.Context, shardName string, params aggregation.Params)) *MockRemoteIndexIncomingRepo_IncomingAggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(aggregation.Params))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingAggregate_Call) Return(_a0 *aggregation.Result, _a1 error) *MockRemoteIndexIncomingRepo_IncomingAggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingAggregate_Call) RunAndReturn(run func(context.Context, string, aggregation.Params) (*aggregation.Result, error)) *MockRemoteIndexIncomingRepo_IncomingAggregate_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingBatchAddReferences provides a mock function with given fields: ctx, shardName, refs
func (_m *MockRemoteIndexIncomingRepo) IncomingBatchAddReferences(ctx context.Context, shardName string, refs objects.BatchReferences) []error {
	ret := _m.Called(ctx, shardName, refs)

	if len(ret) == 0 {
		panic("no return value specified for IncomingBatchAddReferences")
	}

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, string, objects.BatchReferences) []error); ok {
		r0 = rf(ctx, shardName, refs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// MockRemoteIndexIncomingRepo_IncomingBatchAddReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingBatchAddReferences'
type MockRemoteIndexIncomingRepo_IncomingBatchAddReferences_Call struct {
	*mock.Call
}

// IncomingBatchAddReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - refs objects.BatchReferences
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingBatchAddReferences(ctx interface{}, shardName interface{}, refs interface{}) *MockRemoteIndexIncomingRepo_IncomingBatchAddReferences_Call {
	return &MockRemoteIndexIncomingRepo_IncomingBatchAddReferences_Call{Call: _e.mock.On("IncomingBatchAddReferences", ctx, shardName, refs)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingBatchAddReferences_Call) Run(run func(ctx context.Context, shardName string, refs objects.BatchReferences)) *MockRemoteIndexIncomingRepo_IncomingBatchAddReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(objects.BatchReferences))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingBatchAddReferences_Call) Return(_a0 []error) *MockRemoteIndexIncomingRepo_IncomingBatchAddReferences_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingBatchAddReferences_Call) RunAndReturn(run func(context.Context, string, objects.BatchReferences) []error) *MockRemoteIndexIncomingRepo_IncomingBatchAddReferences_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingBatchPutObjects provides a mock function with given fields: ctx, shardName, objs
func (_m *MockRemoteIndexIncomingRepo) IncomingBatchPutObjects(ctx context.Context, shardName string, objs []*storobj.Object) []error {
	ret := _m.Called(ctx, shardName, objs)

	if len(ret) == 0 {
		panic("no return value specified for IncomingBatchPutObjects")
	}

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*storobj.Object) []error); ok {
		r0 = rf(ctx, shardName, objs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// MockRemoteIndexIncomingRepo_IncomingBatchPutObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingBatchPutObjects'
type MockRemoteIndexIncomingRepo_IncomingBatchPutObjects_Call struct {
	*mock.Call
}

// IncomingBatchPutObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - objs []*storobj.Object
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingBatchPutObjects(ctx interface{}, shardName interface{}, objs interface{}) *MockRemoteIndexIncomingRepo_IncomingBatchPutObjects_Call {
	return &MockRemoteIndexIncomingRepo_IncomingBatchPutObjects_Call{Call: _e.mock.On("IncomingBatchPutObjects", ctx, shardName, objs)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingBatchPutObjects_Call) Run(run func(ctx context.Context, shardName string, objs []*storobj.Object)) *MockRemoteIndexIncomingRepo_IncomingBatchPutObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]*storobj.Object))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingBatchPutObjects_Call) Return(_a0 []error) *MockRemoteIndexIncomingRepo_IncomingBatchPutObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingBatchPutObjects_Call) RunAndReturn(run func(context.Context, string, []*storobj.Object) []error) *MockRemoteIndexIncomingRepo_IncomingBatchPutObjects_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingCreateShard provides a mock function with given fields: ctx, className, shardName
func (_m *MockRemoteIndexIncomingRepo) IncomingCreateShard(ctx context.Context, className string, shardName string) error {
	ret := _m.Called(ctx, className, shardName)

	if len(ret) == 0 {
		panic("no return value specified for IncomingCreateShard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, className, shardName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndexIncomingRepo_IncomingCreateShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingCreateShard'
type MockRemoteIndexIncomingRepo_IncomingCreateShard_Call struct {
	*mock.Call
}

// IncomingCreateShard is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - shardName string
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingCreateShard(ctx interface{}, className interface{}, shardName interface{}) *MockRemoteIndexIncomingRepo_IncomingCreateShard_Call {
	return &MockRemoteIndexIncomingRepo_IncomingCreateShard_Call{Call: _e.mock.On("IncomingCreateShard", ctx, className, shardName)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingCreateShard_Call) Run(run func(ctx context.Context, className string, shardName string)) *MockRemoteIndexIncomingRepo_IncomingCreateShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingCreateShard_Call) Return(_a0 error) *MockRemoteIndexIncomingRepo_IncomingCreateShard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingCreateShard_Call) RunAndReturn(run func(context.Context, string, string) error) *MockRemoteIndexIncomingRepo_IncomingCreateShard_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingDeleteObject provides a mock function with given fields: ctx, shardName, id
func (_m *MockRemoteIndexIncomingRepo) IncomingDeleteObject(ctx context.Context, shardName string, id strfmt.UUID) error {
	ret := _m.Called(ctx, shardName, id)

	if len(ret) == 0 {
		panic("no return value specified for IncomingDeleteObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID) error); ok {
		r0 = rf(ctx, shardName, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndexIncomingRepo_IncomingDeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingDeleteObject'
type MockRemoteIndexIncomingRepo_IncomingDeleteObject_Call struct {
	*mock.Call
}

// IncomingDeleteObject is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - id strfmt.UUID
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingDeleteObject(ctx interface{}, shardName interface{}, id interface{}) *MockRemoteIndexIncomingRepo_IncomingDeleteObject_Call {
	return &MockRemoteIndexIncomingRepo_IncomingDeleteObject_Call{Call: _e.mock.On("IncomingDeleteObject", ctx, shardName, id)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingDeleteObject_Call) Run(run func(ctx context.Context, shardName string, id strfmt.UUID)) *MockRemoteIndexIncomingRepo_IncomingDeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingDeleteObject_Call) Return(_a0 error) *MockRemoteIndexIncomingRepo_IncomingDeleteObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingDeleteObject_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID) error) *MockRemoteIndexIncomingRepo_IncomingDeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingDeleteObjectBatch provides a mock function with given fields: ctx, shardName, uuids, dryRun
func (_m *MockRemoteIndexIncomingRepo) IncomingDeleteObjectBatch(ctx context.Context, shardName string, uuids []strfmt.UUID, dryRun bool) objects.BatchSimpleObjects {
	ret := _m.Called(ctx, shardName, uuids, dryRun)

	if len(ret) == 0 {
		panic("no return value specified for IncomingDeleteObjectBatch")
	}

	var r0 objects.BatchSimpleObjects
	if rf, ok := ret.Get(0).(func(context.Context, string, []strfmt.UUID, bool) objects.BatchSimpleObjects); ok {
		r0 = rf(ctx, shardName, uuids, dryRun)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(objects.BatchSimpleObjects)
		}
	}

	return r0
}

// MockRemoteIndexIncomingRepo_IncomingDeleteObjectBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingDeleteObjectBatch'
type MockRemoteIndexIncomingRepo_IncomingDeleteObjectBatch_Call struct {
	*mock.Call
}

// IncomingDeleteObjectBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - uuids []strfmt.UUID
//   - dryRun bool
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingDeleteObjectBatch(ctx interface{}, shardName interface{}, uuids interface{}, dryRun interface{}) *MockRemoteIndexIncomingRepo_IncomingDeleteObjectBatch_Call {
	return &MockRemoteIndexIncomingRepo_IncomingDeleteObjectBatch_Call{Call: _e.mock.On("IncomingDeleteObjectBatch", ctx, shardName, uuids, dryRun)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingDeleteObjectBatch_Call) Run(run func(ctx context.Context, shardName string, uuids []strfmt.UUID, dryRun bool)) *MockRemoteIndexIncomingRepo_IncomingDeleteObjectBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]strfmt.UUID), args[3].(bool))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingDeleteObjectBatch_Call) Return(_a0 objects.BatchSimpleObjects) *MockRemoteIndexIncomingRepo_IncomingDeleteObjectBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingDeleteObjectBatch_Call) RunAndReturn(run func(context.Context, string, []strfmt.UUID, bool) objects.BatchSimpleObjects) *MockRemoteIndexIncomingRepo_IncomingDeleteObjectBatch_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingDigestObjects provides a mock function with given fields: ctx, shardName, ids
func (_m *MockRemoteIndexIncomingRepo) IncomingDigestObjects(ctx context.Context, shardName string, ids []strfmt.UUID) ([]replica.RepairResponse, error) {
	ret := _m.Called(ctx, shardName, ids)

	if len(ret) == 0 {
		panic("no return value specified for IncomingDigestObjects")
	}

	var r0 []replica.RepairResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []strfmt.UUID) ([]replica.RepairResponse, error)); ok {
		return rf(ctx, shardName, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []strfmt.UUID) []replica.RepairResponse); ok {
		r0 = rf(ctx, shardName, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]replica.RepairResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []strfmt.UUID) error); ok {
		r1 = rf(ctx, shardName, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexIncomingRepo_IncomingDigestObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingDigestObjects'
type MockRemoteIndexIncomingRepo_IncomingDigestObjects_Call struct {
	*mock.Call
}

// IncomingDigestObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - ids []strfmt.UUID
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingDigestObjects(ctx interface{}, shardName interface{}, ids interface{}) *MockRemoteIndexIncomingRepo_IncomingDigestObjects_Call {
	return &MockRemoteIndexIncomingRepo_IncomingDigestObjects_Call{Call: _e.mock.On("IncomingDigestObjects", ctx, shardName, ids)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingDigestObjects_Call) Run(run func(ctx context.Context, shardName string, ids []strfmt.UUID)) *MockRemoteIndexIncomingRepo_IncomingDigestObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]strfmt.UUID))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingDigestObjects_Call) Return(result []replica.RepairResponse, err error) *MockRemoteIndexIncomingRepo_IncomingDigestObjects_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingDigestObjects_Call) RunAndReturn(run func(context.Context, string, []strfmt.UUID) ([]replica.RepairResponse, error)) *MockRemoteIndexIncomingRepo_IncomingDigestObjects_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingExists provides a mock function with given fields: ctx, shardName, id
func (_m *MockRemoteIndexIncomingRepo) IncomingExists(ctx context.Context, shardName string, id strfmt.UUID) (bool, error) {
	ret := _m.Called(ctx, shardName, id)

	if len(ret) == 0 {
		panic("no return value specified for IncomingExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID) (bool, error)); ok {
		return rf(ctx, shardName, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID) bool); ok {
		r0 = rf(ctx, shardName, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, strfmt.UUID) error); ok {
		r1 = rf(ctx, shardName, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexIncomingRepo_IncomingExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingExists'
type MockRemoteIndexIncomingRepo_IncomingExists_Call struct {
	*mock.Call
}

// IncomingExists is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - id strfmt.UUID
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingExists(ctx interface{}, shardName interface{}, id interface{}) *MockRemoteIndexIncomingRepo_IncomingExists_Call {
	return &MockRemoteIndexIncomingRepo_IncomingExists_Call{Call: _e.mock.On("IncomingExists", ctx, shardName, id)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingExists_Call) Run(run func(ctx context.Context, shardName string, id strfmt.UUID)) *MockRemoteIndexIncomingRepo_IncomingExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingExists_Call) Return(_a0 bool, _a1 error) *MockRemoteIndexIncomingRepo_IncomingExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingExists_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID) (bool, error)) *MockRemoteIndexIncomingRepo_IncomingExists_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingFilePutter provides a mock function with given fields: ctx, shardName, filePath
func (_m *MockRemoteIndexIncomingRepo) IncomingFilePutter(ctx context.Context, shardName string, filePath string) (io.WriteCloser, error) {
	ret := _m.Called(ctx, shardName, filePath)

	if len(ret) == 0 {
		panic("no return value specified for IncomingFilePutter")
	}

	var r0 io.WriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (io.WriteCloser, error)); ok {
		return rf(ctx, shardName, filePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.WriteCloser); ok {
		r0 = rf(ctx, shardName, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, shardName, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexIncomingRepo_IncomingFilePutter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingFilePutter'
type MockRemoteIndexIncomingRepo_IncomingFilePutter_Call struct {
	*mock.Call
}

// IncomingFilePutter is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - filePath string
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingFilePutter(ctx interface{}, shardName interface{}, filePath interface{}) *MockRemoteIndexIncomingRepo_IncomingFilePutter_Call {
	return &MockRemoteIndexIncomingRepo_IncomingFilePutter_Call{Call: _e.mock.On("IncomingFilePutter", ctx, shardName, filePath)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingFilePutter_Call) Run(run func(ctx context.Context, shardName string, filePath string)) *MockRemoteIndexIncomingRepo_IncomingFilePutter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingFilePutter_Call) Return(_a0 io.WriteCloser, _a1 error) *MockRemoteIndexIncomingRepo_IncomingFilePutter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingFilePutter_Call) RunAndReturn(run func(context.Context, string, string) (io.WriteCloser, error)) *MockRemoteIndexIncomingRepo_IncomingFilePutter_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingFindUUIDs provides a mock function with given fields: ctx, shardName, _a2
func (_m *MockRemoteIndexIncomingRepo) IncomingFindUUIDs(ctx context.Context, shardName string, _a2 *filters.LocalFilter) ([]strfmt.UUID, error) {
	ret := _m.Called(ctx, shardName, _a2)

	if len(ret) == 0 {
		panic("no return value specified for IncomingFindUUIDs")
	}

	var r0 []strfmt.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *filters.LocalFilter) ([]strfmt.UUID, error)); ok {
		return rf(ctx, shardName, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *filters.LocalFilter) []strfmt.UUID); ok {
		r0 = rf(ctx, shardName, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]strfmt.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, shardName, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexIncomingRepo_IncomingFindUUIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingFindUUIDs'
type MockRemoteIndexIncomingRepo_IncomingFindUUIDs_Call struct {
	*mock.Call
}

// IncomingFindUUIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - _a2 *filters.LocalFilter
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingFindUUIDs(ctx interface{}, shardName interface{}, _a2 interface{}) *MockRemoteIndexIncomingRepo_IncomingFindUUIDs_Call {
	return &MockRemoteIndexIncomingRepo_IncomingFindUUIDs_Call{Call: _e.mock.On("IncomingFindUUIDs", ctx, shardName, _a2)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingFindUUIDs_Call) Run(run func(ctx context.Context, shardName string, _a2 *filters.LocalFilter)) *MockRemoteIndexIncomingRepo_IncomingFindUUIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*filters.LocalFilter))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingFindUUIDs_Call) Return(_a0 []strfmt.UUID, _a1 error) *MockRemoteIndexIncomingRepo_IncomingFindUUIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingFindUUIDs_Call) RunAndReturn(run func(context.Context, string, *filters.LocalFilter) ([]strfmt.UUID, error)) *MockRemoteIndexIncomingRepo_IncomingFindUUIDs_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingGetObject provides a mock function with given fields: ctx, shardName, id, selectProperties, _a4
func (_m *MockRemoteIndexIncomingRepo) IncomingGetObject(ctx context.Context, shardName string, id strfmt.UUID, selectProperties search.SelectProperties, _a4 additional.Properties) (*storobj.Object, error) {
	ret := _m.Called(ctx, shardName, id, selectProperties, _a4)

	if len(ret) == 0 {
		panic("no return value specified for IncomingGetObject")
	}

	var r0 *storobj.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties) (*storobj.Object, error)); ok {
		return rf(ctx, shardName, id, selectProperties, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties) *storobj.Object); ok {
		r0 = rf(ctx, shardName, id, selectProperties, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties) error); ok {
		r1 = rf(ctx, shardName, id, selectProperties, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexIncomingRepo_IncomingGetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingGetObject'
type MockRemoteIndexIncomingRepo_IncomingGetObject_Call struct {
	*mock.Call
}

// IncomingGetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - id strfmt.UUID
//   - selectProperties search.SelectProperties
//   - _a4 additional.Properties
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingGetObject(ctx interface{}, shardName interface{}, id interface{}, selectProperties interface{}, _a4 interface{}) *MockRemoteIndexIncomingRepo_IncomingGetObject_Call {
	return &MockRemoteIndexIncomingRepo_IncomingGetObject_Call{Call: _e.mock.On("IncomingGetObject", ctx, shardName, id, selectProperties, _a4)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingGetObject_Call) Run(run func(ctx context.Context, shardName string, id strfmt.UUID, selectProperties search.SelectProperties, _a4 additional.Properties)) *MockRemoteIndexIncomingRepo_IncomingGetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID), args[3].(search.SelectProperties), args[4].(additional.Properties))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingGetObject_Call) Return(_a0 *storobj.Object, _a1 error) *MockRemoteIndexIncomingRepo_IncomingGetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingGetObject_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties) (*storobj.Object, error)) *MockRemoteIndexIncomingRepo_IncomingGetObject_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingGetShardQueueSize provides a mock function with given fields: ctx, shardName
func (_m *MockRemoteIndexIncomingRepo) IncomingGetShardQueueSize(ctx context.Context, shardName string) (int64, error) {
	ret := _m.Called(ctx, shardName)

	if len(ret) == 0 {
		panic("no return value specified for IncomingGetShardQueueSize")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, shardName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, shardName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shardName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexIncomingRepo_IncomingGetShardQueueSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingGetShardQueueSize'
type MockRemoteIndexIncomingRepo_IncomingGetShardQueueSize_Call struct {
	*mock.Call
}

// IncomingGetShardQueueSize is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingGetShardQueueSize(ctx interface{}, shardName interface{}) *MockRemoteIndexIncomingRepo_IncomingGetShardQueueSize_Call {
	return &MockRemoteIndexIncomingRepo_IncomingGetShardQueueSize_Call{Call: _e.mock.On("IncomingGetShardQueueSize", ctx, shardName)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingGetShardQueueSize_Call) Run(run func(ctx context.Context, shardName string)) *MockRemoteIndexIncomingRepo_IncomingGetShardQueueSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingGetShardQueueSize_Call) Return(_a0 int64, _a1 error) *MockRemoteIndexIncomingRepo_IncomingGetShardQueueSize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingGetShardQueueSize_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockRemoteIndexIncomingRepo_IncomingGetShardQueueSize_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingGetShardStatus provides a mock function with given fields: ctx, shardName
func (_m *MockRemoteIndexIncomingRepo) IncomingGetShardStatus(ctx context.Context, shardName string) (string, error) {
	ret := _m.Called(ctx, shardName)

	if len(ret) == 0 {
		panic("no return value specified for IncomingGetShardStatus")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, shardName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shardName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shardName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexIncomingRepo_IncomingGetShardStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingGetShardStatus'
type MockRemoteIndexIncomingRepo_IncomingGetShardStatus_Call struct {
	*mock.Call
}

// IncomingGetShardStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingGetShardStatus(ctx interface{}, shardName interface{}) *MockRemoteIndexIncomingRepo_IncomingGetShardStatus_Call {
	return &MockRemoteIndexIncomingRepo_IncomingGetShardStatus_Call{Call: _e.mock.On("IncomingGetShardStatus", ctx, shardName)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingGetShardStatus_Call) Run(run func(ctx context.Context, shardName string)) *MockRemoteIndexIncomingRepo_IncomingGetShardStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingGetShardStatus_Call) Return(_a0 string, _a1 error) *MockRemoteIndexIncomingRepo_IncomingGetShardStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingGetShardStatus_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockRemoteIndexIncomingRepo_IncomingGetShardStatus_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingMergeObject provides a mock function with given fields: ctx, shardName, mergeDoc
func (_m *MockRemoteIndexIncomingRepo) IncomingMergeObject(ctx context.Context, shardName string, mergeDoc objects.MergeDocument) error {
	ret := _m.Called(ctx, shardName, mergeDoc)

	if len(ret) == 0 {
		panic("no return value specified for IncomingMergeObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, objects.MergeDocument) error); ok {
		r0 = rf(ctx, shardName, mergeDoc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndexIncomingRepo_IncomingMergeObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingMergeObject'
type MockRemoteIndexIncomingRepo_IncomingMergeObject_Call struct {
	*mock.Call
}

// IncomingMergeObject is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - mergeDoc objects.MergeDocument
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingMergeObject(ctx interface{}, shardName interface{}, mergeDoc interface{}) *MockRemoteIndexIncomingRepo_IncomingMergeObject_Call {
	return &MockRemoteIndexIncomingRepo_IncomingMergeObject_Call{Call: _e.mock.On("IncomingMergeObject", ctx, shardName, mergeDoc)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingMergeObject_Call) Run(run func(ctx context.Context, shardName string, mergeDoc objects.MergeDocument)) *MockRemoteIndexIncomingRepo_IncomingMergeObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(objects.MergeDocument))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingMergeObject_Call) Return(_a0 error) *MockRemoteIndexIncomingRepo_IncomingMergeObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingMergeObject_Call) RunAndReturn(run func(context.Context, string, objects.MergeDocument) error) *MockRemoteIndexIncomingRepo_IncomingMergeObject_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingMultiGetObjects provides a mock function with given fields: ctx, shardName, ids
func (_m *MockRemoteIndexIncomingRepo) IncomingMultiGetObjects(ctx context.Context, shardName string, ids []strfmt.UUID) ([]*storobj.Object, error) {
	ret := _m.Called(ctx, shardName, ids)

	if len(ret) == 0 {
		panic("no return value specified for IncomingMultiGetObjects")
	}

	var r0 []*storobj.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []strfmt.UUID) ([]*storobj.Object, error)); ok {
		return rf(ctx, shardName, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []strfmt.UUID) []*storobj.Object); ok {
		r0 = rf(ctx, shardName, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []strfmt.UUID) error); ok {
		r1 = rf(ctx, shardName, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexIncomingRepo_IncomingMultiGetObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingMultiGetObjects'
type MockRemoteIndexIncomingRepo_IncomingMultiGetObjects_Call struct {
	*mock.Call
}

// IncomingMultiGetObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - ids []strfmt.UUID
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingMultiGetObjects(ctx interface{}, shardName interface{}, ids interface{}) *MockRemoteIndexIncomingRepo_IncomingMultiGetObjects_Call {
	return &MockRemoteIndexIncomingRepo_IncomingMultiGetObjects_Call{Call: _e.mock.On("IncomingMultiGetObjects", ctx, shardName, ids)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingMultiGetObjects_Call) Run(run func(ctx context.Context, shardName string, ids []strfmt.UUID)) *MockRemoteIndexIncomingRepo_IncomingMultiGetObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]strfmt.UUID))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingMultiGetObjects_Call) Return(_a0 []*storobj.Object, _a1 error) *MockRemoteIndexIncomingRepo_IncomingMultiGetObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingMultiGetObjects_Call) RunAndReturn(run func(context.Context, string, []strfmt.UUID) ([]*storobj.Object, error)) *MockRemoteIndexIncomingRepo_IncomingMultiGetObjects_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingOverwriteObjects provides a mock function with given fields: ctx, shard, vobjects
func (_m *MockRemoteIndexIncomingRepo) IncomingOverwriteObjects(ctx context.Context, shard string, vobjects []*objects.VObject) ([]replica.RepairResponse, error) {
	ret := _m.Called(ctx, shard, vobjects)

	if len(ret) == 0 {
		panic("no return value specified for IncomingOverwriteObjects")
	}

	var r0 []replica.RepairResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*objects.VObject) ([]replica.RepairResponse, error)); ok {
		return rf(ctx, shard, vobjects)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []*objects.VObject) []replica.RepairResponse); ok {
		r0 = rf(ctx, shard, vobjects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]replica.RepairResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []*objects.VObject) error); ok {
		r1 = rf(ctx, shard, vobjects)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexIncomingRepo_IncomingOverwriteObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingOverwriteObjects'
type MockRemoteIndexIncomingRepo_IncomingOverwriteObjects_Call struct {
	*mock.Call
}

// IncomingOverwriteObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - shard string
//   - vobjects []*objects.VObject
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingOverwriteObjects(ctx interface{}, shard interface{}, vobjects interface{}) *MockRemoteIndexIncomingRepo_IncomingOverwriteObjects_Call {
	return &MockRemoteIndexIncomingRepo_IncomingOverwriteObjects_Call{Call: _e.mock.On("IncomingOverwriteObjects", ctx, shard, vobjects)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingOverwriteObjects_Call) Run(run func(ctx context.Context, shard string, vobjects []*objects.VObject)) *MockRemoteIndexIncomingRepo_IncomingOverwriteObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]*objects.VObject))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingOverwriteObjects_Call) Return(_a0 []replica.RepairResponse, _a1 error) *MockRemoteIndexIncomingRepo_IncomingOverwriteObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingOverwriteObjects_Call) RunAndReturn(run func(context.Context, string, []*objects.VObject) ([]replica.RepairResponse, error)) *MockRemoteIndexIncomingRepo_IncomingOverwriteObjects_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingPutObject provides a mock function with given fields: ctx, shardName, obj
func (_m *MockRemoteIndexIncomingRepo) IncomingPutObject(ctx context.Context, shardName string, obj *storobj.Object) error {
	ret := _m.Called(ctx, shardName, obj)

	if len(ret) == 0 {
		panic("no return value specified for IncomingPutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *storobj.Object) error); ok {
		r0 = rf(ctx, shardName, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndexIncomingRepo_IncomingPutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingPutObject'
type MockRemoteIndexIncomingRepo_IncomingPutObject_Call struct {
	*mock.Call
}

// IncomingPutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - obj *storobj.Object
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingPutObject(ctx interface{}, shardName interface{}, obj interface{}) *MockRemoteIndexIncomingRepo_IncomingPutObject_Call {
	return &MockRemoteIndexIncomingRepo_IncomingPutObject_Call{Call: _e.mock.On("IncomingPutObject", ctx, shardName, obj)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingPutObject_Call) Run(run func(ctx context.Context, shardName string, obj *storobj.Object)) *MockRemoteIndexIncomingRepo_IncomingPutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*storobj.Object))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingPutObject_Call) Return(_a0 error) *MockRemoteIndexIncomingRepo_IncomingPutObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingPutObject_Call) RunAndReturn(run func(context.Context, string, *storobj.Object) error) *MockRemoteIndexIncomingRepo_IncomingPutObject_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingReinitShard provides a mock function with given fields: ctx, shardName
func (_m *MockRemoteIndexIncomingRepo) IncomingReinitShard(ctx context.Context, shardName string) error {
	ret := _m.Called(ctx, shardName)

	if len(ret) == 0 {
		panic("no return value specified for IncomingReinitShard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shardName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndexIncomingRepo_IncomingReinitShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingReinitShard'
type MockRemoteIndexIncomingRepo_IncomingReinitShard_Call struct {
	*mock.Call
}

// IncomingReinitShard is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingReinitShard(ctx interface{}, shardName interface{}) *MockRemoteIndexIncomingRepo_IncomingReinitShard_Call {
	return &MockRemoteIndexIncomingRepo_IncomingReinitShard_Call{Call: _e.mock.On("IncomingReinitShard", ctx, shardName)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingReinitShard_Call) Run(run func(ctx context.Context, shardName string)) *MockRemoteIndexIncomingRepo_IncomingReinitShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingReinitShard_Call) Return(_a0 error) *MockRemoteIndexIncomingRepo_IncomingReinitShard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingReinitShard_Call) RunAndReturn(run func(context.Context, string) error) *MockRemoteIndexIncomingRepo_IncomingReinitShard_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingSearch provides a mock function with given fields: ctx, shardName, vector, targetVector, distance, limit, _a6, keywordRanking, sort, cursor, groupBy, _a11
func (_m *MockRemoteIndexIncomingRepo) IncomingSearch(ctx context.Context, shardName string, vector []float32, targetVector string, distance float32, limit int, _a6 *filters.LocalFilter, keywordRanking *searchparams.KeywordRanking, sort []filters.Sort, cursor *filters.Cursor, groupBy *searchparams.GroupBy, _a11 additional.Properties) ([]*storobj.Object, []float32, error) {
	ret := _m.Called(ctx, shardName, vector, targetVector, distance, limit, _a6, keywordRanking, sort, cursor, groupBy, _a11)

	if len(ret) == 0 {
		panic("no return value specified for IncomingSearch")
	}

	var r0 []*storobj.Object
	var r1 []float32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []float32, string, float32, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) ([]*storobj.Object, []float32, error)); ok {
		return rf(ctx, shardName, vector, targetVector, distance, limit, _a6, keywordRanking, sort, cursor, groupBy, _a11)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []float32, string, float32, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) []*storobj.Object); ok {
		r0 = rf(ctx, shardName, vector, targetVector, distance, limit, _a6, keywordRanking, sort, cursor, groupBy, _a11)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []float32, string, float32, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) []float32); ok {
		r1 = rf(ctx, shardName, vector, targetVector, distance, limit, _a6, keywordRanking, sort, cursor, groupBy, _a11)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float32)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, []float32, string, float32, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) error); ok {
		r2 = rf(ctx, shardName, vector, targetVector, distance, limit, _a6, keywordRanking, sort, cursor, groupBy, _a11)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRemoteIndexIncomingRepo_IncomingSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingSearch'
type MockRemoteIndexIncomingRepo_IncomingSearch_Call struct {
	*mock.Call
}

// IncomingSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - vector []float32
//   - targetVector string
//   - distance float32
//   - limit int
//   - _a6 *filters.LocalFilter
//   - keywordRanking *searchparams.KeywordRanking
//   - sort []filters.Sort
//   - cursor *filters.Cursor
//   - groupBy *searchparams.GroupBy
//   - _a11 additional.Properties
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingSearch(ctx interface{}, shardName interface{}, vector interface{}, targetVector interface{}, distance interface{}, limit interface{}, _a6 interface{}, keywordRanking interface{}, sort interface{}, cursor interface{}, groupBy interface{}, _a11 interface{}) *MockRemoteIndexIncomingRepo_IncomingSearch_Call {
	return &MockRemoteIndexIncomingRepo_IncomingSearch_Call{Call: _e.mock.On("IncomingSearch", ctx, shardName, vector, targetVector, distance, limit, _a6, keywordRanking, sort, cursor, groupBy, _a11)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingSearch_Call) Run(run func(ctx context.Context, shardName string, vector []float32, targetVector string, distance float32, limit int, _a6 *filters.LocalFilter, keywordRanking *searchparams.KeywordRanking, sort []filters.Sort, cursor *filters.Cursor, groupBy *searchparams.GroupBy, _a11 additional.Properties)) *MockRemoteIndexIncomingRepo_IncomingSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]float32), args[3].(string), args[4].(float32), args[5].(int), args[6].(*filters.LocalFilter), args[7].(*searchparams.KeywordRanking), args[8].([]filters.Sort), args[9].(*filters.Cursor), args[10].(*searchparams.GroupBy), args[11].(additional.Properties))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingSearch_Call) Return(_a0 []*storobj.Object, _a1 []float32, _a2 error) *MockRemoteIndexIncomingRepo_IncomingSearch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingSearch_Call) RunAndReturn(run func(context.Context, string, []float32, string, float32, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) ([]*storobj.Object, []float32, error)) *MockRemoteIndexIncomingRepo_IncomingSearch_Call {
	_c.Call.Return(run)
	return _c
}

// IncomingUpdateShardStatus provides a mock function with given fields: ctx, shardName, targetStatus
func (_m *MockRemoteIndexIncomingRepo) IncomingUpdateShardStatus(ctx context.Context, shardName string, targetStatus string) error {
	ret := _m.Called(ctx, shardName, targetStatus)

	if len(ret) == 0 {
		panic("no return value specified for IncomingUpdateShardStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, shardName, targetStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndexIncomingRepo_IncomingUpdateShardStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncomingUpdateShardStatus'
type MockRemoteIndexIncomingRepo_IncomingUpdateShardStatus_Call struct {
	*mock.Call
}

// IncomingUpdateShardStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - shardName string
//   - targetStatus string
func (_e *MockRemoteIndexIncomingRepo_Expecter) IncomingUpdateShardStatus(ctx interface{}, shardName interface{}, targetStatus interface{}) *MockRemoteIndexIncomingRepo_IncomingUpdateShardStatus_Call {
	return &MockRemoteIndexIncomingRepo_IncomingUpdateShardStatus_Call{Call: _e.mock.On("IncomingUpdateShardStatus", ctx, shardName, targetStatus)}
}

func (_c *MockRemoteIndexIncomingRepo_IncomingUpdateShardStatus_Call) Run(run func(ctx context.Context, shardName string, targetStatus string)) *MockRemoteIndexIncomingRepo_IncomingUpdateShardStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingUpdateShardStatus_Call) Return(_a0 error) *MockRemoteIndexIncomingRepo_IncomingUpdateShardStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexIncomingRepo_IncomingUpdateShardStatus_Call) RunAndReturn(run func(context.Context, string, string) error) *MockRemoteIndexIncomingRepo_IncomingUpdateShardStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteIndexIncomingRepo creates a new instance of MockRemoteIndexIncomingRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteIndexIncomingRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteIndexIncomingRepo {
	mock := &MockRemoteIndexIncomingRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
