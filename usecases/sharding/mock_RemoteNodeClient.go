//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package sharding

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"
)

// MockRemoteNodeClient is an autogenerated mock type for the RemoteNodeClient type
type MockRemoteNodeClient struct {
	mock.Mock
}

type MockRemoteNodeClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteNodeClient) EXPECT() *MockRemoteNodeClient_Expecter {
	return &MockRemoteNodeClient_Expecter{mock: &_m.Mock}
}

// GetNodeStatus provides a mock function with given fields: ctx, hostName, className, output
func (_m *MockRemoteNodeClient) GetNodeStatus(ctx context.Context, hostName string, className string, output string) (*models.NodeStatus, error) {
	ret := _m.Called(ctx, hostName, className, output)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeStatus")
	}

	var r0 *models.NodeStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*models.NodeStatus, error)); ok {
		return rf(ctx, hostName, className, output)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *models.NodeStatus); ok {
		r0 = rf(ctx, hostName, className, output)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NodeStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, hostName, className, output)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteNodeClient_GetNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeStatus'
type MockRemoteNodeClient_GetNodeStatus_Call struct {
	*mock.Call
}

// GetNodeStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - className string
//   - output string
func (_e *MockRemoteNodeClient_Expecter) GetNodeStatus(ctx interface{}, hostName interface{}, className interface{}, output interface{}) *MockRemoteNodeClient_GetNodeStatus_Call {
	return &MockRemoteNodeClient_GetNodeStatus_Call{Call: _e.mock.On("GetNodeStatus", ctx, hostName, className, output)}
}

func (_c *MockRemoteNodeClient_GetNodeStatus_Call) Run(run func(ctx context.Context, hostName string, className string, output string)) *MockRemoteNodeClient_GetNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRemoteNodeClient_GetNodeStatus_Call) Return(_a0 *models.NodeStatus, _a1 error) *MockRemoteNodeClient_GetNodeStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteNodeClient_GetNodeStatus_Call) RunAndReturn(run func(context.Context, string, string, string) (*models.NodeStatus, error)) *MockRemoteNodeClient_GetNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteNodeClient creates a new instance of MockRemoteNodeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteNodeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteNodeClient {
	mock := &MockRemoteNodeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
