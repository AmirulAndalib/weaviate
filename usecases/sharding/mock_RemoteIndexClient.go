//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package sharding

import (
	additional "github.com/weaviate/weaviate/entities/additional"
	aggregation "github.com/weaviate/weaviate/entities/aggregation"

	context "context"

	filters "github.com/weaviate/weaviate/entities/filters"

	io "io"

	mock "github.com/stretchr/testify/mock"

	objects "github.com/weaviate/weaviate/usecases/objects"

	search "github.com/weaviate/weaviate/entities/search"

	searchparams "github.com/weaviate/weaviate/entities/searchparams"

	storobj "github.com/weaviate/weaviate/entities/storobj"

	strfmt "github.com/go-openapi/strfmt"
)

// MockRemoteIndexClient is an autogenerated mock type for the RemoteIndexClient type
type MockRemoteIndexClient struct {
	mock.Mock
}

type MockRemoteIndexClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteIndexClient) EXPECT() *MockRemoteIndexClient_Expecter {
	return &MockRemoteIndexClient_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with given fields: ctx, hostname, indexName, shardName, params
func (_m *MockRemoteIndexClient) Aggregate(ctx context.Context, hostname string, indexName string, shardName string, params aggregation.Params) (*aggregation.Result, error) {
	ret := _m.Called(ctx, hostname, indexName, shardName, params)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 *aggregation.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, aggregation.Params) (*aggregation.Result, error)); ok {
		return rf(ctx, hostname, indexName, shardName, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, aggregation.Params) *aggregation.Result); ok {
		r0 = rf(ctx, hostname, indexName, shardName, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregation.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, aggregation.Params) error); ok {
		r1 = rf(ctx, hostname, indexName, shardName, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexClient_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockRemoteIndexClient_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - hostname string
//   - indexName string
//   - shardName string
//   - params aggregation.Params
func (_e *MockRemoteIndexClient_Expecter) Aggregate(ctx interface{}, hostname interface{}, indexName interface{}, shardName interface{}, params interface{}) *MockRemoteIndexClient_Aggregate_Call {
	return &MockRemoteIndexClient_Aggregate_Call{Call: _e.mock.On("Aggregate", ctx, hostname, indexName, shardName, params)}
}

func (_c *MockRemoteIndexClient_Aggregate_Call) Run(run func(ctx context.Context, hostname string, indexName string, shardName string, params aggregation.Params)) *MockRemoteIndexClient_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(aggregation.Params))
	})
	return _c
}

func (_c *MockRemoteIndexClient_Aggregate_Call) Return(_a0 *aggregation.Result, _a1 error) *MockRemoteIndexClient_Aggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexClient_Aggregate_Call) RunAndReturn(run func(context.Context, string, string, string, aggregation.Params) (*aggregation.Result, error)) *MockRemoteIndexClient_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// BatchAddReferences provides a mock function with given fields: ctx, hostName, indexName, shardName, refs
func (_m *MockRemoteIndexClient) BatchAddReferences(ctx context.Context, hostName string, indexName string, shardName string, refs objects.BatchReferences) []error {
	ret := _m.Called(ctx, hostName, indexName, shardName, refs)

	if len(ret) == 0 {
		panic("no return value specified for BatchAddReferences")
	}

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, objects.BatchReferences) []error); ok {
		r0 = rf(ctx, hostName, indexName, shardName, refs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// MockRemoteIndexClient_BatchAddReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchAddReferences'
type MockRemoteIndexClient_BatchAddReferences_Call struct {
	*mock.Call
}

// BatchAddReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - indexName string
//   - shardName string
//   - refs objects.BatchReferences
func (_e *MockRemoteIndexClient_Expecter) BatchAddReferences(ctx interface{}, hostName interface{}, indexName interface{}, shardName interface{}, refs interface{}) *MockRemoteIndexClient_BatchAddReferences_Call {
	return &MockRemoteIndexClient_BatchAddReferences_Call{Call: _e.mock.On("BatchAddReferences", ctx, hostName, indexName, shardName, refs)}
}

func (_c *MockRemoteIndexClient_BatchAddReferences_Call) Run(run func(ctx context.Context, hostName string, indexName string, shardName string, refs objects.BatchReferences)) *MockRemoteIndexClient_BatchAddReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(objects.BatchReferences))
	})
	return _c
}

func (_c *MockRemoteIndexClient_BatchAddReferences_Call) Return(_a0 []error) *MockRemoteIndexClient_BatchAddReferences_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexClient_BatchAddReferences_Call) RunAndReturn(run func(context.Context, string, string, string, objects.BatchReferences) []error) *MockRemoteIndexClient_BatchAddReferences_Call {
	_c.Call.Return(run)
	return _c
}

// BatchPutObjects provides a mock function with given fields: ctx, hostName, indexName, shardName, objs, repl
func (_m *MockRemoteIndexClient) BatchPutObjects(ctx context.Context, hostName string, indexName string, shardName string, objs []*storobj.Object, repl *additional.ReplicationProperties) []error {
	ret := _m.Called(ctx, hostName, indexName, shardName, objs, repl)

	if len(ret) == 0 {
		panic("no return value specified for BatchPutObjects")
	}

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []*storobj.Object, *additional.ReplicationProperties) []error); ok {
		r0 = rf(ctx, hostName, indexName, shardName, objs, repl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// MockRemoteIndexClient_BatchPutObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchPutObjects'
type MockRemoteIndexClient_BatchPutObjects_Call struct {
	*mock.Call
}

// BatchPutObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - indexName string
//   - shardName string
//   - objs []*storobj.Object
//   - repl *additional.ReplicationProperties
func (_e *MockRemoteIndexClient_Expecter) BatchPutObjects(ctx interface{}, hostName interface{}, indexName interface{}, shardName interface{}, objs interface{}, repl interface{}) *MockRemoteIndexClient_BatchPutObjects_Call {
	return &MockRemoteIndexClient_BatchPutObjects_Call{Call: _e.mock.On("BatchPutObjects", ctx, hostName, indexName, shardName, objs, repl)}
}

func (_c *MockRemoteIndexClient_BatchPutObjects_Call) Run(run func(ctx context.Context, hostName string, indexName string, shardName string, objs []*storobj.Object, repl *additional.ReplicationProperties)) *MockRemoteIndexClient_BatchPutObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]*storobj.Object), args[5].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockRemoteIndexClient_BatchPutObjects_Call) Return(_a0 []error) *MockRemoteIndexClient_BatchPutObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexClient_BatchPutObjects_Call) RunAndReturn(run func(context.Context, string, string, string, []*storobj.Object, *additional.ReplicationProperties) []error) *MockRemoteIndexClient_BatchPutObjects_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function with given fields: ctx, hostname, indexName, shardName, id
func (_m *MockRemoteIndexClient) DeleteObject(ctx context.Context, hostname string, indexName string, shardName string, id strfmt.UUID) error {
	ret := _m.Called(ctx, hostname, indexName, shardName, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, strfmt.UUID) error); ok {
		r0 = rf(ctx, hostname, indexName, shardName, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndexClient_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type MockRemoteIndexClient_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - ctx context.Context
//   - hostname string
//   - indexName string
//   - shardName string
//   - id strfmt.UUID
func (_e *MockRemoteIndexClient_Expecter) DeleteObject(ctx interface{}, hostname interface{}, indexName interface{}, shardName interface{}, id interface{}) *MockRemoteIndexClient_DeleteObject_Call {
	return &MockRemoteIndexClient_DeleteObject_Call{Call: _e.mock.On("DeleteObject", ctx, hostname, indexName, shardName, id)}
}

func (_c *MockRemoteIndexClient_DeleteObject_Call) Run(run func(ctx context.Context, hostname string, indexName string, shardName string, id strfmt.UUID)) *MockRemoteIndexClient_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(strfmt.UUID))
	})
	return _c
}

func (_c *MockRemoteIndexClient_DeleteObject_Call) Return(_a0 error) *MockRemoteIndexClient_DeleteObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexClient_DeleteObject_Call) RunAndReturn(run func(context.Context, string, string, string, strfmt.UUID) error) *MockRemoteIndexClient_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObjectBatch provides a mock function with given fields: ctx, hostName, indexName, shardName, uuids, dryRun
func (_m *MockRemoteIndexClient) DeleteObjectBatch(ctx context.Context, hostName string, indexName string, shardName string, uuids []strfmt.UUID, dryRun bool) objects.BatchSimpleObjects {
	ret := _m.Called(ctx, hostName, indexName, shardName, uuids, dryRun)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObjectBatch")
	}

	var r0 objects.BatchSimpleObjects
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID, bool) objects.BatchSimpleObjects); ok {
		r0 = rf(ctx, hostName, indexName, shardName, uuids, dryRun)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(objects.BatchSimpleObjects)
		}
	}

	return r0
}

// MockRemoteIndexClient_DeleteObjectBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObjectBatch'
type MockRemoteIndexClient_DeleteObjectBatch_Call struct {
	*mock.Call
}

// DeleteObjectBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - indexName string
//   - shardName string
//   - uuids []strfmt.UUID
//   - dryRun bool
func (_e *MockRemoteIndexClient_Expecter) DeleteObjectBatch(ctx interface{}, hostName interface{}, indexName interface{}, shardName interface{}, uuids interface{}, dryRun interface{}) *MockRemoteIndexClient_DeleteObjectBatch_Call {
	return &MockRemoteIndexClient_DeleteObjectBatch_Call{Call: _e.mock.On("DeleteObjectBatch", ctx, hostName, indexName, shardName, uuids, dryRun)}
}

func (_c *MockRemoteIndexClient_DeleteObjectBatch_Call) Run(run func(ctx context.Context, hostName string, indexName string, shardName string, uuids []strfmt.UUID, dryRun bool)) *MockRemoteIndexClient_DeleteObjectBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]strfmt.UUID), args[5].(bool))
	})
	return _c
}

func (_c *MockRemoteIndexClient_DeleteObjectBatch_Call) Return(_a0 objects.BatchSimpleObjects) *MockRemoteIndexClient_DeleteObjectBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexClient_DeleteObjectBatch_Call) RunAndReturn(run func(context.Context, string, string, string, []strfmt.UUID, bool) objects.BatchSimpleObjects) *MockRemoteIndexClient_DeleteObjectBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, hostname, indexName, shardName, id
func (_m *MockRemoteIndexClient) Exists(ctx context.Context, hostname string, indexName string, shardName string, id strfmt.UUID) (bool, error) {
	ret := _m.Called(ctx, hostname, indexName, shardName, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, strfmt.UUID) (bool, error)); ok {
		return rf(ctx, hostname, indexName, shardName, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, strfmt.UUID) bool); ok {
		r0 = rf(ctx, hostname, indexName, shardName, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, strfmt.UUID) error); ok {
		r1 = rf(ctx, hostname, indexName, shardName, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexClient_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockRemoteIndexClient_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - hostname string
//   - indexName string
//   - shardName string
//   - id strfmt.UUID
func (_e *MockRemoteIndexClient_Expecter) Exists(ctx interface{}, hostname interface{}, indexName interface{}, shardName interface{}, id interface{}) *MockRemoteIndexClient_Exists_Call {
	return &MockRemoteIndexClient_Exists_Call{Call: _e.mock.On("Exists", ctx, hostname, indexName, shardName, id)}
}

func (_c *MockRemoteIndexClient_Exists_Call) Run(run func(ctx context.Context, hostname string, indexName string, shardName string, id strfmt.UUID)) *MockRemoteIndexClient_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(strfmt.UUID))
	})
	return _c
}

func (_c *MockRemoteIndexClient_Exists_Call) Return(_a0 bool, _a1 error) *MockRemoteIndexClient_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexClient_Exists_Call) RunAndReturn(run func(context.Context, string, string, string, strfmt.UUID) (bool, error)) *MockRemoteIndexClient_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindUUIDs provides a mock function with given fields: ctx, hostName, indexName, shardName, _a4
func (_m *MockRemoteIndexClient) FindUUIDs(ctx context.Context, hostName string, indexName string, shardName string, _a4 *filters.LocalFilter) ([]strfmt.UUID, error) {
	ret := _m.Called(ctx, hostName, indexName, shardName, _a4)

	if len(ret) == 0 {
		panic("no return value specified for FindUUIDs")
	}

	var r0 []strfmt.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *filters.LocalFilter) ([]strfmt.UUID, error)); ok {
		return rf(ctx, hostName, indexName, shardName, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *filters.LocalFilter) []strfmt.UUID); ok {
		r0 = rf(ctx, hostName, indexName, shardName, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]strfmt.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *filters.LocalFilter) error); ok {
		r1 = rf(ctx, hostName, indexName, shardName, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexClient_FindUUIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUUIDs'
type MockRemoteIndexClient_FindUUIDs_Call struct {
	*mock.Call
}

// FindUUIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - indexName string
//   - shardName string
//   - _a4 *filters.LocalFilter
func (_e *MockRemoteIndexClient_Expecter) FindUUIDs(ctx interface{}, hostName interface{}, indexName interface{}, shardName interface{}, _a4 interface{}) *MockRemoteIndexClient_FindUUIDs_Call {
	return &MockRemoteIndexClient_FindUUIDs_Call{Call: _e.mock.On("FindUUIDs", ctx, hostName, indexName, shardName, _a4)}
}

func (_c *MockRemoteIndexClient_FindUUIDs_Call) Run(run func(ctx context.Context, hostName string, indexName string, shardName string, _a4 *filters.LocalFilter)) *MockRemoteIndexClient_FindUUIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*filters.LocalFilter))
	})
	return _c
}

func (_c *MockRemoteIndexClient_FindUUIDs_Call) Return(_a0 []strfmt.UUID, _a1 error) *MockRemoteIndexClient_FindUUIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexClient_FindUUIDs_Call) RunAndReturn(run func(context.Context, string, string, string, *filters.LocalFilter) ([]strfmt.UUID, error)) *MockRemoteIndexClient_FindUUIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetObject provides a mock function with given fields: ctx, hostname, indexName, shardName, id, props, _a6
func (_m *MockRemoteIndexClient) GetObject(ctx context.Context, hostname string, indexName string, shardName string, id strfmt.UUID, props search.SelectProperties, _a6 additional.Properties) (*storobj.Object, error) {
	ret := _m.Called(ctx, hostname, indexName, shardName, id, props, _a6)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 *storobj.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) (*storobj.Object, error)); ok {
		return rf(ctx, hostname, indexName, shardName, id, props, _a6)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) *storobj.Object); ok {
		r0 = rf(ctx, hostname, indexName, shardName, id, props, _a6)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) error); ok {
		r1 = rf(ctx, hostname, indexName, shardName, id, props, _a6)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexClient_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MockRemoteIndexClient_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - hostname string
//   - indexName string
//   - shardName string
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a6 additional.Properties
func (_e *MockRemoteIndexClient_Expecter) GetObject(ctx interface{}, hostname interface{}, indexName interface{}, shardName interface{}, id interface{}, props interface{}, _a6 interface{}) *MockRemoteIndexClient_GetObject_Call {
	return &MockRemoteIndexClient_GetObject_Call{Call: _e.mock.On("GetObject", ctx, hostname, indexName, shardName, id, props, _a6)}
}

func (_c *MockRemoteIndexClient_GetObject_Call) Run(run func(ctx context.Context, hostname string, indexName string, shardName string, id strfmt.UUID, props search.SelectProperties, _a6 additional.Properties)) *MockRemoteIndexClient_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(strfmt.UUID), args[5].(search.SelectProperties), args[6].(additional.Properties))
	})
	return _c
}

func (_c *MockRemoteIndexClient_GetObject_Call) Return(_a0 *storobj.Object, _a1 error) *MockRemoteIndexClient_GetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexClient_GetObject_Call) RunAndReturn(run func(context.Context, string, string, string, strfmt.UUID, search.SelectProperties, additional.Properties) (*storobj.Object, error)) *MockRemoteIndexClient_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetShardQueueSize provides a mock function with given fields: ctx, hostName, indexName, shardName
func (_m *MockRemoteIndexClient) GetShardQueueSize(ctx context.Context, hostName string, indexName string, shardName string) (int64, error) {
	ret := _m.Called(ctx, hostName, indexName, shardName)

	if len(ret) == 0 {
		panic("no return value specified for GetShardQueueSize")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int64, error)); ok {
		return rf(ctx, hostName, indexName, shardName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, hostName, indexName, shardName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, hostName, indexName, shardName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexClient_GetShardQueueSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShardQueueSize'
type MockRemoteIndexClient_GetShardQueueSize_Call struct {
	*mock.Call
}

// GetShardQueueSize is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - indexName string
//   - shardName string
func (_e *MockRemoteIndexClient_Expecter) GetShardQueueSize(ctx interface{}, hostName interface{}, indexName interface{}, shardName interface{}) *MockRemoteIndexClient_GetShardQueueSize_Call {
	return &MockRemoteIndexClient_GetShardQueueSize_Call{Call: _e.mock.On("GetShardQueueSize", ctx, hostName, indexName, shardName)}
}

func (_c *MockRemoteIndexClient_GetShardQueueSize_Call) Run(run func(ctx context.Context, hostName string, indexName string, shardName string)) *MockRemoteIndexClient_GetShardQueueSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRemoteIndexClient_GetShardQueueSize_Call) Return(_a0 int64, _a1 error) *MockRemoteIndexClient_GetShardQueueSize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexClient_GetShardQueueSize_Call) RunAndReturn(run func(context.Context, string, string, string) (int64, error)) *MockRemoteIndexClient_GetShardQueueSize_Call {
	_c.Call.Return(run)
	return _c
}

// GetShardStatus provides a mock function with given fields: ctx, hostName, indexName, shardName
func (_m *MockRemoteIndexClient) GetShardStatus(ctx context.Context, hostName string, indexName string, shardName string) (string, error) {
	ret := _m.Called(ctx, hostName, indexName, shardName)

	if len(ret) == 0 {
		panic("no return value specified for GetShardStatus")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, hostName, indexName, shardName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, hostName, indexName, shardName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, hostName, indexName, shardName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexClient_GetShardStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShardStatus'
type MockRemoteIndexClient_GetShardStatus_Call struct {
	*mock.Call
}

// GetShardStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - indexName string
//   - shardName string
func (_e *MockRemoteIndexClient_Expecter) GetShardStatus(ctx interface{}, hostName interface{}, indexName interface{}, shardName interface{}) *MockRemoteIndexClient_GetShardStatus_Call {
	return &MockRemoteIndexClient_GetShardStatus_Call{Call: _e.mock.On("GetShardStatus", ctx, hostName, indexName, shardName)}
}

func (_c *MockRemoteIndexClient_GetShardStatus_Call) Run(run func(ctx context.Context, hostName string, indexName string, shardName string)) *MockRemoteIndexClient_GetShardStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRemoteIndexClient_GetShardStatus_Call) Return(_a0 string, _a1 error) *MockRemoteIndexClient_GetShardStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexClient_GetShardStatus_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *MockRemoteIndexClient_GetShardStatus_Call {
	_c.Call.Return(run)
	return _c
}

// MergeObject provides a mock function with given fields: ctx, hostname, indexName, shardName, mergeDoc
func (_m *MockRemoteIndexClient) MergeObject(ctx context.Context, hostname string, indexName string, shardName string, mergeDoc objects.MergeDocument) error {
	ret := _m.Called(ctx, hostname, indexName, shardName, mergeDoc)

	if len(ret) == 0 {
		panic("no return value specified for MergeObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, objects.MergeDocument) error); ok {
		r0 = rf(ctx, hostname, indexName, shardName, mergeDoc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndexClient_MergeObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeObject'
type MockRemoteIndexClient_MergeObject_Call struct {
	*mock.Call
}

// MergeObject is a helper method to define mock.On call
//   - ctx context.Context
//   - hostname string
//   - indexName string
//   - shardName string
//   - mergeDoc objects.MergeDocument
func (_e *MockRemoteIndexClient_Expecter) MergeObject(ctx interface{}, hostname interface{}, indexName interface{}, shardName interface{}, mergeDoc interface{}) *MockRemoteIndexClient_MergeObject_Call {
	return &MockRemoteIndexClient_MergeObject_Call{Call: _e.mock.On("MergeObject", ctx, hostname, indexName, shardName, mergeDoc)}
}

func (_c *MockRemoteIndexClient_MergeObject_Call) Run(run func(ctx context.Context, hostname string, indexName string, shardName string, mergeDoc objects.MergeDocument)) *MockRemoteIndexClient_MergeObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(objects.MergeDocument))
	})
	return _c
}

func (_c *MockRemoteIndexClient_MergeObject_Call) Return(_a0 error) *MockRemoteIndexClient_MergeObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexClient_MergeObject_Call) RunAndReturn(run func(context.Context, string, string, string, objects.MergeDocument) error) *MockRemoteIndexClient_MergeObject_Call {
	_c.Call.Return(run)
	return _c
}

// MultiGetObjects provides a mock function with given fields: ctx, hostname, indexName, shardName, ids
func (_m *MockRemoteIndexClient) MultiGetObjects(ctx context.Context, hostname string, indexName string, shardName string, ids []strfmt.UUID) ([]*storobj.Object, error) {
	ret := _m.Called(ctx, hostname, indexName, shardName, ids)

	if len(ret) == 0 {
		panic("no return value specified for MultiGetObjects")
	}

	var r0 []*storobj.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID) ([]*storobj.Object, error)); ok {
		return rf(ctx, hostname, indexName, shardName, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []strfmt.UUID) []*storobj.Object); ok {
		r0 = rf(ctx, hostname, indexName, shardName, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []strfmt.UUID) error); ok {
		r1 = rf(ctx, hostname, indexName, shardName, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteIndexClient_MultiGetObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiGetObjects'
type MockRemoteIndexClient_MultiGetObjects_Call struct {
	*mock.Call
}

// MultiGetObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - hostname string
//   - indexName string
//   - shardName string
//   - ids []strfmt.UUID
func (_e *MockRemoteIndexClient_Expecter) MultiGetObjects(ctx interface{}, hostname interface{}, indexName interface{}, shardName interface{}, ids interface{}) *MockRemoteIndexClient_MultiGetObjects_Call {
	return &MockRemoteIndexClient_MultiGetObjects_Call{Call: _e.mock.On("MultiGetObjects", ctx, hostname, indexName, shardName, ids)}
}

func (_c *MockRemoteIndexClient_MultiGetObjects_Call) Run(run func(ctx context.Context, hostname string, indexName string, shardName string, ids []strfmt.UUID)) *MockRemoteIndexClient_MultiGetObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]strfmt.UUID))
	})
	return _c
}

func (_c *MockRemoteIndexClient_MultiGetObjects_Call) Return(_a0 []*storobj.Object, _a1 error) *MockRemoteIndexClient_MultiGetObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteIndexClient_MultiGetObjects_Call) RunAndReturn(run func(context.Context, string, string, string, []strfmt.UUID) ([]*storobj.Object, error)) *MockRemoteIndexClient_MultiGetObjects_Call {
	_c.Call.Return(run)
	return _c
}

// PutFile provides a mock function with given fields: ctx, hostName, indexName, shardName, fileName, payload
func (_m *MockRemoteIndexClient) PutFile(ctx context.Context, hostName string, indexName string, shardName string, fileName string, payload io.ReadSeekCloser) error {
	ret := _m.Called(ctx, hostName, indexName, shardName, fileName, payload)

	if len(ret) == 0 {
		panic("no return value specified for PutFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.ReadSeekCloser) error); ok {
		r0 = rf(ctx, hostName, indexName, shardName, fileName, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndexClient_PutFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFile'
type MockRemoteIndexClient_PutFile_Call struct {
	*mock.Call
}

// PutFile is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - indexName string
//   - shardName string
//   - fileName string
//   - payload io.ReadSeekCloser
func (_e *MockRemoteIndexClient_Expecter) PutFile(ctx interface{}, hostName interface{}, indexName interface{}, shardName interface{}, fileName interface{}, payload interface{}) *MockRemoteIndexClient_PutFile_Call {
	return &MockRemoteIndexClient_PutFile_Call{Call: _e.mock.On("PutFile", ctx, hostName, indexName, shardName, fileName, payload)}
}

func (_c *MockRemoteIndexClient_PutFile_Call) Run(run func(ctx context.Context, hostName string, indexName string, shardName string, fileName string, payload io.ReadSeekCloser)) *MockRemoteIndexClient_PutFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(io.ReadSeekCloser))
	})
	return _c
}

func (_c *MockRemoteIndexClient_PutFile_Call) Return(_a0 error) *MockRemoteIndexClient_PutFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexClient_PutFile_Call) RunAndReturn(run func(context.Context, string, string, string, string, io.ReadSeekCloser) error) *MockRemoteIndexClient_PutFile_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, hostName, indexName, shardName, obj
func (_m *MockRemoteIndexClient) PutObject(ctx context.Context, hostName string, indexName string, shardName string, obj *storobj.Object) error {
	ret := _m.Called(ctx, hostName, indexName, shardName, obj)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *storobj.Object) error); ok {
		r0 = rf(ctx, hostName, indexName, shardName, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndexClient_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type MockRemoteIndexClient_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - indexName string
//   - shardName string
//   - obj *storobj.Object
func (_e *MockRemoteIndexClient_Expecter) PutObject(ctx interface{}, hostName interface{}, indexName interface{}, shardName interface{}, obj interface{}) *MockRemoteIndexClient_PutObject_Call {
	return &MockRemoteIndexClient_PutObject_Call{Call: _e.mock.On("PutObject", ctx, hostName, indexName, shardName, obj)}
}

func (_c *MockRemoteIndexClient_PutObject_Call) Run(run func(ctx context.Context, hostName string, indexName string, shardName string, obj *storobj.Object)) *MockRemoteIndexClient_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*storobj.Object))
	})
	return _c
}

func (_c *MockRemoteIndexClient_PutObject_Call) Return(_a0 error) *MockRemoteIndexClient_PutObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexClient_PutObject_Call) RunAndReturn(run func(context.Context, string, string, string, *storobj.Object) error) *MockRemoteIndexClient_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// SearchShard provides a mock function with given fields: ctx, hostname, indexName, shardName, searchVector, targetVector, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12
func (_m *MockRemoteIndexClient) SearchShard(ctx context.Context, hostname string, indexName string, shardName string, searchVector []float32, targetVector string, limit int, _a7 *filters.LocalFilter, keywordRanking *searchparams.KeywordRanking, sort []filters.Sort, cursor *filters.Cursor, groupBy *searchparams.GroupBy, _a12 additional.Properties) ([]*storobj.Object, []float32, error) {
	ret := _m.Called(ctx, hostname, indexName, shardName, searchVector, targetVector, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)

	if len(ret) == 0 {
		panic("no return value specified for SearchShard")
	}

	var r0 []*storobj.Object
	var r1 []float32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []float32, string, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) ([]*storobj.Object, []float32, error)); ok {
		return rf(ctx, hostname, indexName, shardName, searchVector, targetVector, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []float32, string, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) []*storobj.Object); ok {
		r0 = rf(ctx, hostname, indexName, shardName, searchVector, targetVector, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storobj.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []float32, string, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) []float32); ok {
		r1 = rf(ctx, hostname, indexName, shardName, searchVector, targetVector, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float32)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, []float32, string, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) error); ok {
		r2 = rf(ctx, hostname, indexName, shardName, searchVector, targetVector, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRemoteIndexClient_SearchShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchShard'
type MockRemoteIndexClient_SearchShard_Call struct {
	*mock.Call
}

// SearchShard is a helper method to define mock.On call
//   - ctx context.Context
//   - hostname string
//   - indexName string
//   - shardName string
//   - searchVector []float32
//   - targetVector string
//   - limit int
//   - _a7 *filters.LocalFilter
//   - keywordRanking *searchparams.KeywordRanking
//   - sort []filters.Sort
//   - cursor *filters.Cursor
//   - groupBy *searchparams.GroupBy
//   - _a12 additional.Properties
func (_e *MockRemoteIndexClient_Expecter) SearchShard(ctx interface{}, hostname interface{}, indexName interface{}, shardName interface{}, searchVector interface{}, targetVector interface{}, limit interface{}, _a7 interface{}, keywordRanking interface{}, sort interface{}, cursor interface{}, groupBy interface{}, _a12 interface{}) *MockRemoteIndexClient_SearchShard_Call {
	return &MockRemoteIndexClient_SearchShard_Call{Call: _e.mock.On("SearchShard", ctx, hostname, indexName, shardName, searchVector, targetVector, limit, _a7, keywordRanking, sort, cursor, groupBy, _a12)}
}

func (_c *MockRemoteIndexClient_SearchShard_Call) Run(run func(ctx context.Context, hostname string, indexName string, shardName string, searchVector []float32, targetVector string, limit int, _a7 *filters.LocalFilter, keywordRanking *searchparams.KeywordRanking, sort []filters.Sort, cursor *filters.Cursor, groupBy *searchparams.GroupBy, _a12 additional.Properties)) *MockRemoteIndexClient_SearchShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]float32), args[5].(string), args[6].(int), args[7].(*filters.LocalFilter), args[8].(*searchparams.KeywordRanking), args[9].([]filters.Sort), args[10].(*filters.Cursor), args[11].(*searchparams.GroupBy), args[12].(additional.Properties))
	})
	return _c
}

func (_c *MockRemoteIndexClient_SearchShard_Call) Return(_a0 []*storobj.Object, _a1 []float32, _a2 error) *MockRemoteIndexClient_SearchShard_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRemoteIndexClient_SearchShard_Call) RunAndReturn(run func(context.Context, string, string, string, []float32, string, int, *filters.LocalFilter, *searchparams.KeywordRanking, []filters.Sort, *filters.Cursor, *searchparams.GroupBy, additional.Properties) ([]*storobj.Object, []float32, error)) *MockRemoteIndexClient_SearchShard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShardStatus provides a mock function with given fields: ctx, hostName, indexName, shardName, targetStatus
func (_m *MockRemoteIndexClient) UpdateShardStatus(ctx context.Context, hostName string, indexName string, shardName string, targetStatus string) error {
	ret := _m.Called(ctx, hostName, indexName, shardName, targetStatus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShardStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, hostName, indexName, shardName, targetStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndexClient_UpdateShardStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShardStatus'
type MockRemoteIndexClient_UpdateShardStatus_Call struct {
	*mock.Call
}

// UpdateShardStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - indexName string
//   - shardName string
//   - targetStatus string
func (_e *MockRemoteIndexClient_Expecter) UpdateShardStatus(ctx interface{}, hostName interface{}, indexName interface{}, shardName interface{}, targetStatus interface{}) *MockRemoteIndexClient_UpdateShardStatus_Call {
	return &MockRemoteIndexClient_UpdateShardStatus_Call{Call: _e.mock.On("UpdateShardStatus", ctx, hostName, indexName, shardName, targetStatus)}
}

func (_c *MockRemoteIndexClient_UpdateShardStatus_Call) Run(run func(ctx context.Context, hostName string, indexName string, shardName string, targetStatus string)) *MockRemoteIndexClient_UpdateShardStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockRemoteIndexClient_UpdateShardStatus_Call) Return(_a0 error) *MockRemoteIndexClient_UpdateShardStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndexClient_UpdateShardStatus_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockRemoteIndexClient_UpdateShardStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteIndexClient creates a new instance of MockRemoteIndexClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteIndexClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteIndexClient {
	mock := &MockRemoteIndexClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
