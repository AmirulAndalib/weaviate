//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package composer

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"
)

// MockTokenFunc is an autogenerated mock type for the TokenFunc type
type MockTokenFunc struct {
	mock.Mock
}

type MockTokenFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenFunc) EXPECT() *MockTokenFunc_Expecter {
	return &MockTokenFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: token, scopes
func (_m *MockTokenFunc) Execute(token string, scopes []string) (*models.Principal, error) {
	ret := _m.Called(token, scopes)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *models.Principal
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (*models.Principal, error)); ok {
		return rf(token, scopes)
	}
	if rf, ok := ret.Get(0).(func(string, []string) *models.Principal); ok {
		r0 = rf(token, scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Principal)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(token, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockTokenFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - token string
//   - scopes []string
func (_e *MockTokenFunc_Expecter) Execute(token interface{}, scopes interface{}) *MockTokenFunc_Execute_Call {
	return &MockTokenFunc_Execute_Call{Call: _e.mock.On("Execute", token, scopes)}
}

func (_c *MockTokenFunc_Execute_Call) Run(run func(token string, scopes []string)) *MockTokenFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockTokenFunc_Execute_Call) Return(_a0 *models.Principal, _a1 error) *MockTokenFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenFunc_Execute_Call) RunAndReturn(run func(string, []string) (*models.Principal, error)) *MockTokenFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenFunc creates a new instance of MockTokenFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenFunc {
	mock := &MockTokenFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
