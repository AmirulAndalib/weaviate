//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package authorization

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"
)

// MockAuthorizer is an autogenerated mock type for the Authorizer type
type MockAuthorizer struct {
	mock.Mock
}

type MockAuthorizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorizer) EXPECT() *MockAuthorizer_Expecter {
	return &MockAuthorizer_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields: principal, verb, resource
func (_m *MockAuthorizer) Authorize(principal *models.Principal, verb string, resource string) error {
	ret := _m.Called(principal, verb, resource)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Principal, string, string) error); ok {
		r0 = rf(principal, verb, resource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthorizer_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockAuthorizer_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - principal *models.Principal
//   - verb string
//   - resource string
func (_e *MockAuthorizer_Expecter) Authorize(principal interface{}, verb interface{}, resource interface{}) *MockAuthorizer_Authorize_Call {
	return &MockAuthorizer_Authorize_Call{Call: _e.mock.On("Authorize", principal, verb, resource)}
}

func (_c *MockAuthorizer_Authorize_Call) Run(run func(principal *models.Principal, verb string, resource string)) *MockAuthorizer_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Principal), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAuthorizer_Authorize_Call) Return(_a0 error) *MockAuthorizer_Authorize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorizer_Authorize_Call) RunAndReturn(run func(*models.Principal, string, string) error) *MockAuthorizer_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthorizer creates a new instance of MockAuthorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorizer {
	mock := &MockAuthorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
