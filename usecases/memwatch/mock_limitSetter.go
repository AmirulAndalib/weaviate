//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package memwatch

import mock "github.com/stretchr/testify/mock"

// MocklimitSetter is an autogenerated mock type for the limitSetter type
type MocklimitSetter struct {
	mock.Mock
}

type MocklimitSetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MocklimitSetter) EXPECT() *MocklimitSetter_Expecter {
	return &MocklimitSetter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: size
func (_m *MocklimitSetter) Execute(size int64) int64 {
	ret := _m.Called(size)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(size)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MocklimitSetter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MocklimitSetter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - size int64
func (_e *MocklimitSetter_Expecter) Execute(size interface{}) *MocklimitSetter_Execute_Call {
	return &MocklimitSetter_Execute_Call{Call: _e.mock.On("Execute", size)}
}

func (_c *MocklimitSetter_Execute_Call) Run(run func(size int64)) *MocklimitSetter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MocklimitSetter_Execute_Call) Return(_a0 int64) *MocklimitSetter_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocklimitSetter_Execute_Call) RunAndReturn(run func(int64) int64) *MocklimitSetter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocklimitSetter creates a new instance of MocklimitSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocklimitSetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocklimitSetter {
	mock := &MocklimitSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
