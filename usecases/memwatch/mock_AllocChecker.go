//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package memwatch

import mock "github.com/stretchr/testify/mock"

// MockAllocChecker is an autogenerated mock type for the AllocChecker type
type MockAllocChecker struct {
	mock.Mock
}

type MockAllocChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAllocChecker) EXPECT() *MockAllocChecker_Expecter {
	return &MockAllocChecker_Expecter{mock: &_m.Mock}
}

// CheckAlloc provides a mock function with given fields: sizeInBytes
func (_m *MockAllocChecker) CheckAlloc(sizeInBytes int64) error {
	ret := _m.Called(sizeInBytes)

	if len(ret) == 0 {
		panic("no return value specified for CheckAlloc")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(sizeInBytes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAllocChecker_CheckAlloc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAlloc'
type MockAllocChecker_CheckAlloc_Call struct {
	*mock.Call
}

// CheckAlloc is a helper method to define mock.On call
//   - sizeInBytes int64
func (_e *MockAllocChecker_Expecter) CheckAlloc(sizeInBytes interface{}) *MockAllocChecker_CheckAlloc_Call {
	return &MockAllocChecker_CheckAlloc_Call{Call: _e.mock.On("CheckAlloc", sizeInBytes)}
}

func (_c *MockAllocChecker_CheckAlloc_Call) Run(run func(sizeInBytes int64)) *MockAllocChecker_CheckAlloc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockAllocChecker_CheckAlloc_Call) Return(_a0 error) *MockAllocChecker_CheckAlloc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAllocChecker_CheckAlloc_Call) RunAndReturn(run func(int64) error) *MockAllocChecker_CheckAlloc_Call {
	_c.Call.Return(run)
	return _c
}

// CheckMappingAndReserve provides a mock function with given fields: numberMappings, reservationTimeInS
func (_m *MockAllocChecker) CheckMappingAndReserve(numberMappings int64, reservationTimeInS int) error {
	ret := _m.Called(numberMappings, reservationTimeInS)

	if len(ret) == 0 {
		panic("no return value specified for CheckMappingAndReserve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int) error); ok {
		r0 = rf(numberMappings, reservationTimeInS)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAllocChecker_CheckMappingAndReserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckMappingAndReserve'
type MockAllocChecker_CheckMappingAndReserve_Call struct {
	*mock.Call
}

// CheckMappingAndReserve is a helper method to define mock.On call
//   - numberMappings int64
//   - reservationTimeInS int
func (_e *MockAllocChecker_Expecter) CheckMappingAndReserve(numberMappings interface{}, reservationTimeInS interface{}) *MockAllocChecker_CheckMappingAndReserve_Call {
	return &MockAllocChecker_CheckMappingAndReserve_Call{Call: _e.mock.On("CheckMappingAndReserve", numberMappings, reservationTimeInS)}
}

func (_c *MockAllocChecker_CheckMappingAndReserve_Call) Run(run func(numberMappings int64, reservationTimeInS int)) *MockAllocChecker_CheckMappingAndReserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int))
	})
	return _c
}

func (_c *MockAllocChecker_CheckMappingAndReserve_Call) Return(_a0 error) *MockAllocChecker_CheckMappingAndReserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAllocChecker_CheckMappingAndReserve_Call) RunAndReturn(run func(int64, int) error) *MockAllocChecker_CheckMappingAndReserve_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: updateMappings
func (_m *MockAllocChecker) Refresh(updateMappings bool) {
	_m.Called(updateMappings)
}

// MockAllocChecker_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockAllocChecker_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - updateMappings bool
func (_e *MockAllocChecker_Expecter) Refresh(updateMappings interface{}) *MockAllocChecker_Refresh_Call {
	return &MockAllocChecker_Refresh_Call{Call: _e.mock.On("Refresh", updateMappings)}
}

func (_c *MockAllocChecker_Refresh_Call) Run(run func(updateMappings bool)) *MockAllocChecker_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockAllocChecker_Refresh_Call) Return() *MockAllocChecker_Refresh_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAllocChecker_Refresh_Call) RunAndReturn(run func(bool)) *MockAllocChecker_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAllocChecker creates a new instance of MockAllocChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAllocChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAllocChecker {
	mock := &MockAllocChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
