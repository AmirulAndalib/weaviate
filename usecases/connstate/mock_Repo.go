//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package connstate

import (
	context "context"
	json "encoding/json"

	mock "github.com/stretchr/testify/mock"
)

// MockRepo is an autogenerated mock type for the Repo type
type MockRepo struct {
	mock.Mock
}

type MockRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepo) EXPECT() *MockRepo_Expecter {
	return &MockRepo_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields: ctx
func (_m *MockRepo) Load(ctx context.Context) (json.RawMessage, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (json.RawMessage, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) json.RawMessage); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockRepo_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepo_Expecter) Load(ctx interface{}) *MockRepo_Load_Call {
	return &MockRepo_Load_Call{Call: _e.mock.On("Load", ctx)}
}

func (_c *MockRepo_Load_Call) Run(run func(ctx context.Context)) *MockRepo_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepo_Load_Call) Return(_a0 json.RawMessage, _a1 error) *MockRepo_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_Load_Call) RunAndReturn(run func(context.Context) (json.RawMessage, error)) *MockRepo_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, state
func (_m *MockRepo) Save(ctx context.Context, state json.RawMessage) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, json.RawMessage) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepo_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRepo_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - state json.RawMessage
func (_e *MockRepo_Expecter) Save(ctx interface{}, state interface{}) *MockRepo_Save_Call {
	return &MockRepo_Save_Call{Call: _e.mock.On("Save", ctx, state)}
}

func (_c *MockRepo_Save_Call) Run(run func(ctx context.Context, state json.RawMessage)) *MockRepo_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(json.RawMessage))
	})
	return _c
}

func (_c *MockRepo_Save_Call) Return(_a0 error) *MockRepo_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepo_Save_Call) RunAndReturn(run func(context.Context, json.RawMessage) error) *MockRepo_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepo creates a new instance of MockRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepo {
	mock := &MockRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
