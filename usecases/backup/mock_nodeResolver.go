//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package backup

import mock "github.com/stretchr/testify/mock"

// MocknodeResolver is an autogenerated mock type for the nodeResolver type
type MocknodeResolver struct {
	mock.Mock
}

type MocknodeResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MocknodeResolver) EXPECT() *MocknodeResolver_Expecter {
	return &MocknodeResolver_Expecter{mock: &_m.Mock}
}

// AllNames provides a mock function with given fields:
func (_m *MocknodeResolver) AllNames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllNames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MocknodeResolver_AllNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllNames'
type MocknodeResolver_AllNames_Call struct {
	*mock.Call
}

// AllNames is a helper method to define mock.On call
func (_e *MocknodeResolver_Expecter) AllNames() *MocknodeResolver_AllNames_Call {
	return &MocknodeResolver_AllNames_Call{Call: _e.mock.On("AllNames")}
}

func (_c *MocknodeResolver_AllNames_Call) Run(run func()) *MocknodeResolver_AllNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MocknodeResolver_AllNames_Call) Return(_a0 []string) *MocknodeResolver_AllNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocknodeResolver_AllNames_Call) RunAndReturn(run func() []string) *MocknodeResolver_AllNames_Call {
	_c.Call.Return(run)
	return _c
}

// NodeCount provides a mock function with given fields:
func (_m *MocknodeResolver) NodeCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MocknodeResolver_NodeCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeCount'
type MocknodeResolver_NodeCount_Call struct {
	*mock.Call
}

// NodeCount is a helper method to define mock.On call
func (_e *MocknodeResolver_Expecter) NodeCount() *MocknodeResolver_NodeCount_Call {
	return &MocknodeResolver_NodeCount_Call{Call: _e.mock.On("NodeCount")}
}

func (_c *MocknodeResolver_NodeCount_Call) Run(run func()) *MocknodeResolver_NodeCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MocknodeResolver_NodeCount_Call) Return(_a0 int) *MocknodeResolver_NodeCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocknodeResolver_NodeCount_Call) RunAndReturn(run func() int) *MocknodeResolver_NodeCount_Call {
	_c.Call.Return(run)
	return _c
}

// NodeHostname provides a mock function with given fields: nodeName
func (_m *MocknodeResolver) NodeHostname(nodeName string) (string, bool) {
	ret := _m.Called(nodeName)

	if len(ret) == 0 {
		panic("no return value specified for NodeHostname")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(nodeName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(nodeName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(nodeName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MocknodeResolver_NodeHostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeHostname'
type MocknodeResolver_NodeHostname_Call struct {
	*mock.Call
}

// NodeHostname is a helper method to define mock.On call
//   - nodeName string
func (_e *MocknodeResolver_Expecter) NodeHostname(nodeName interface{}) *MocknodeResolver_NodeHostname_Call {
	return &MocknodeResolver_NodeHostname_Call{Call: _e.mock.On("NodeHostname", nodeName)}
}

func (_c *MocknodeResolver_NodeHostname_Call) Run(run func(nodeName string)) *MocknodeResolver_NodeHostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MocknodeResolver_NodeHostname_Call) Return(_a0 string, _a1 bool) *MocknodeResolver_NodeHostname_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocknodeResolver_NodeHostname_Call) RunAndReturn(run func(string) (string, bool)) *MocknodeResolver_NodeHostname_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocknodeResolver creates a new instance of MocknodeResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocknodeResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocknodeResolver {
	mock := &MocknodeResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
