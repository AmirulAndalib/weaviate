//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package backup

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Mockclient is an autogenerated mock type for the client type
type Mockclient struct {
	mock.Mock
}

type Mockclient_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockclient) EXPECT() *Mockclient_Expecter {
	return &Mockclient_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with given fields: _a0, node, _a2
func (_m *Mockclient) Abort(_a0 context.Context, node string, _a2 *AbortRequest) error {
	ret := _m.Called(_a0, node, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Abort")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *AbortRequest) error); ok {
		r0 = rf(_a0, node, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockclient_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type Mockclient_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
//   - _a0 context.Context
//   - node string
//   - _a2 *AbortRequest
func (_e *Mockclient_Expecter) Abort(_a0 interface{}, node interface{}, _a2 interface{}) *Mockclient_Abort_Call {
	return &Mockclient_Abort_Call{Call: _e.mock.On("Abort", _a0, node, _a2)}
}

func (_c *Mockclient_Abort_Call) Run(run func(_a0 context.Context, node string, _a2 *AbortRequest)) *Mockclient_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*AbortRequest))
	})
	return _c
}

func (_c *Mockclient_Abort_Call) Return(_a0 error) *Mockclient_Abort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockclient_Abort_Call) RunAndReturn(run func(context.Context, string, *AbortRequest) error) *Mockclient_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// CanCommit provides a mock function with given fields: ctx, node, req
func (_m *Mockclient) CanCommit(ctx context.Context, node string, req *Request) (*CanCommitResponse, error) {
	ret := _m.Called(ctx, node, req)

	if len(ret) == 0 {
		panic("no return value specified for CanCommit")
	}

	var r0 *CanCommitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *Request) (*CanCommitResponse, error)); ok {
		return rf(ctx, node, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *Request) *CanCommitResponse); ok {
		r0 = rf(ctx, node, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CanCommitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *Request) error); ok {
		r1 = rf(ctx, node, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockclient_CanCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanCommit'
type Mockclient_CanCommit_Call struct {
	*mock.Call
}

// CanCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - node string
//   - req *Request
func (_e *Mockclient_Expecter) CanCommit(ctx interface{}, node interface{}, req interface{}) *Mockclient_CanCommit_Call {
	return &Mockclient_CanCommit_Call{Call: _e.mock.On("CanCommit", ctx, node, req)}
}

func (_c *Mockclient_CanCommit_Call) Run(run func(ctx context.Context, node string, req *Request)) *Mockclient_CanCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*Request))
	})
	return _c
}

func (_c *Mockclient_CanCommit_Call) Return(_a0 *CanCommitResponse, _a1 error) *Mockclient_CanCommit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockclient_CanCommit_Call) RunAndReturn(run func(context.Context, string, *Request) (*CanCommitResponse, error)) *Mockclient_CanCommit_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx, node, _a2
func (_m *Mockclient) Commit(ctx context.Context, node string, _a2 *StatusRequest) error {
	ret := _m.Called(ctx, node, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *StatusRequest) error); ok {
		r0 = rf(ctx, node, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockclient_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Mockclient_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
//   - node string
//   - _a2 *StatusRequest
func (_e *Mockclient_Expecter) Commit(ctx interface{}, node interface{}, _a2 interface{}) *Mockclient_Commit_Call {
	return &Mockclient_Commit_Call{Call: _e.mock.On("Commit", ctx, node, _a2)}
}

func (_c *Mockclient_Commit_Call) Run(run func(ctx context.Context, node string, _a2 *StatusRequest)) *Mockclient_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*StatusRequest))
	})
	return _c
}

func (_c *Mockclient_Commit_Call) Return(_a0 error) *Mockclient_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockclient_Commit_Call) RunAndReturn(run func(context.Context, string, *StatusRequest) error) *Mockclient_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: _a0, node, _a2
func (_m *Mockclient) Status(_a0 context.Context, node string, _a2 *StatusRequest) (*StatusResponse, error) {
	ret := _m.Called(_a0, node, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *StatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *StatusRequest) (*StatusResponse, error)); ok {
		return rf(_a0, node, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *StatusRequest) *StatusResponse); ok {
		r0 = rf(_a0, node, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *StatusRequest) error); ok {
		r1 = rf(_a0, node, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockclient_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type Mockclient_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - _a0 context.Context
//   - node string
//   - _a2 *StatusRequest
func (_e *Mockclient_Expecter) Status(_a0 interface{}, node interface{}, _a2 interface{}) *Mockclient_Status_Call {
	return &Mockclient_Status_Call{Call: _e.mock.On("Status", _a0, node, _a2)}
}

func (_c *Mockclient_Status_Call) Run(run func(_a0 context.Context, node string, _a2 *StatusRequest)) *Mockclient_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*StatusRequest))
	})
	return _c
}

func (_c *Mockclient_Status_Call) Return(_a0 *StatusResponse, _a1 error) *Mockclient_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockclient_Status_Call) RunAndReturn(run func(context.Context, string, *StatusRequest) (*StatusResponse, error)) *Mockclient_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockclient creates a new instance of Mockclient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockclient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockclient {
	mock := &Mockclient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
