//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package backup

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entitiesbackup "github.com/weaviate/weaviate/entities/backup"
)

// MockschemaManger is an autogenerated mock type for the schemaManger type
type MockschemaManger struct {
	mock.Mock
}

type MockschemaManger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockschemaManger) EXPECT() *MockschemaManger_Expecter {
	return &MockschemaManger_Expecter{mock: &_m.Mock}
}

// NodeName provides a mock function with given fields:
func (_m *MockschemaManger) NodeName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockschemaManger_NodeName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeName'
type MockschemaManger_NodeName_Call struct {
	*mock.Call
}

// NodeName is a helper method to define mock.On call
func (_e *MockschemaManger_Expecter) NodeName() *MockschemaManger_NodeName_Call {
	return &MockschemaManger_NodeName_Call{Call: _e.mock.On("NodeName")}
}

func (_c *MockschemaManger_NodeName_Call) Run(run func()) *MockschemaManger_NodeName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockschemaManger_NodeName_Call) Return(_a0 string) *MockschemaManger_NodeName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockschemaManger_NodeName_Call) RunAndReturn(run func() string) *MockschemaManger_NodeName_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreClass provides a mock function with given fields: ctx, d, nodeMapping
func (_m *MockschemaManger) RestoreClass(ctx context.Context, d *entitiesbackup.ClassDescriptor, nodeMapping map[string]string) error {
	ret := _m.Called(ctx, d, nodeMapping)

	if len(ret) == 0 {
		panic("no return value specified for RestoreClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entitiesbackup.ClassDescriptor, map[string]string) error); ok {
		r0 = rf(ctx, d, nodeMapping)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockschemaManger_RestoreClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreClass'
type MockschemaManger_RestoreClass_Call struct {
	*mock.Call
}

// RestoreClass is a helper method to define mock.On call
//   - ctx context.Context
//   - d *entitiesbackup.ClassDescriptor
//   - nodeMapping map[string]string
func (_e *MockschemaManger_Expecter) RestoreClass(ctx interface{}, d interface{}, nodeMapping interface{}) *MockschemaManger_RestoreClass_Call {
	return &MockschemaManger_RestoreClass_Call{Call: _e.mock.On("RestoreClass", ctx, d, nodeMapping)}
}

func (_c *MockschemaManger_RestoreClass_Call) Run(run func(ctx context.Context, d *entitiesbackup.ClassDescriptor, nodeMapping map[string]string)) *MockschemaManger_RestoreClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entitiesbackup.ClassDescriptor), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockschemaManger_RestoreClass_Call) Return(_a0 error) *MockschemaManger_RestoreClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockschemaManger_RestoreClass_Call) RunAndReturn(run func(context.Context, *entitiesbackup.ClassDescriptor, map[string]string) error) *MockschemaManger_RestoreClass_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockschemaManger creates a new instance of MockschemaManger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockschemaManger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockschemaManger {
	mock := &MockschemaManger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
