//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package backup

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entitiesbackup "github.com/weaviate/weaviate/entities/backup"
)

// MockSourcer is an autogenerated mock type for the Sourcer type
type MockSourcer struct {
	mock.Mock
}

type MockSourcer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSourcer) EXPECT() *MockSourcer_Expecter {
	return &MockSourcer_Expecter{mock: &_m.Mock}
}

// BackupDescriptors provides a mock function with given fields: _a0, bakid, classes
func (_m *MockSourcer) BackupDescriptors(_a0 context.Context, bakid string, classes []string) <-chan entitiesbackup.ClassDescriptor {
	ret := _m.Called(_a0, bakid, classes)

	if len(ret) == 0 {
		panic("no return value specified for BackupDescriptors")
	}

	var r0 <-chan entitiesbackup.ClassDescriptor
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) <-chan entitiesbackup.ClassDescriptor); ok {
		r0 = rf(_a0, bakid, classes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan entitiesbackup.ClassDescriptor)
		}
	}

	return r0
}

// MockSourcer_BackupDescriptors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupDescriptors'
type MockSourcer_BackupDescriptors_Call struct {
	*mock.Call
}

// BackupDescriptors is a helper method to define mock.On call
//   - _a0 context.Context
//   - bakid string
//   - classes []string
func (_e *MockSourcer_Expecter) BackupDescriptors(_a0 interface{}, bakid interface{}, classes interface{}) *MockSourcer_BackupDescriptors_Call {
	return &MockSourcer_BackupDescriptors_Call{Call: _e.mock.On("BackupDescriptors", _a0, bakid, classes)}
}

func (_c *MockSourcer_BackupDescriptors_Call) Run(run func(_a0 context.Context, bakid string, classes []string)) *MockSourcer_BackupDescriptors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockSourcer_BackupDescriptors_Call) Return(_a0 <-chan entitiesbackup.ClassDescriptor) *MockSourcer_BackupDescriptors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSourcer_BackupDescriptors_Call) RunAndReturn(run func(context.Context, string, []string) <-chan entitiesbackup.ClassDescriptor) *MockSourcer_BackupDescriptors_Call {
	_c.Call.Return(run)
	return _c
}

// Backupable provides a mock function with given fields: _a0, classes
func (_m *MockSourcer) Backupable(_a0 context.Context, classes []string) error {
	ret := _m.Called(_a0, classes)

	if len(ret) == 0 {
		panic("no return value specified for Backupable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(_a0, classes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSourcer_Backupable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Backupable'
type MockSourcer_Backupable_Call struct {
	*mock.Call
}

// Backupable is a helper method to define mock.On call
//   - _a0 context.Context
//   - classes []string
func (_e *MockSourcer_Expecter) Backupable(_a0 interface{}, classes interface{}) *MockSourcer_Backupable_Call {
	return &MockSourcer_Backupable_Call{Call: _e.mock.On("Backupable", _a0, classes)}
}

func (_c *MockSourcer_Backupable_Call) Run(run func(_a0 context.Context, classes []string)) *MockSourcer_Backupable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockSourcer_Backupable_Call) Return(_a0 error) *MockSourcer_Backupable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSourcer_Backupable_Call) RunAndReturn(run func(context.Context, []string) error) *MockSourcer_Backupable_Call {
	_c.Call.Return(run)
	return _c
}

// ClassExists provides a mock function with given fields: name
func (_m *MockSourcer) ClassExists(name string) bool {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ClassExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSourcer_ClassExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClassExists'
type MockSourcer_ClassExists_Call struct {
	*mock.Call
}

// ClassExists is a helper method to define mock.On call
//   - name string
func (_e *MockSourcer_Expecter) ClassExists(name interface{}) *MockSourcer_ClassExists_Call {
	return &MockSourcer_ClassExists_Call{Call: _e.mock.On("ClassExists", name)}
}

func (_c *MockSourcer_ClassExists_Call) Run(run func(name string)) *MockSourcer_ClassExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSourcer_ClassExists_Call) Return(_a0 bool) *MockSourcer_ClassExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSourcer_ClassExists_Call) RunAndReturn(run func(string) bool) *MockSourcer_ClassExists_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupable provides a mock function with given fields:
func (_m *MockSourcer) ListBackupable() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListBackupable")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockSourcer_ListBackupable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupable'
type MockSourcer_ListBackupable_Call struct {
	*mock.Call
}

// ListBackupable is a helper method to define mock.On call
func (_e *MockSourcer_Expecter) ListBackupable() *MockSourcer_ListBackupable_Call {
	return &MockSourcer_ListBackupable_Call{Call: _e.mock.On("ListBackupable")}
}

func (_c *MockSourcer_ListBackupable_Call) Run(run func()) *MockSourcer_ListBackupable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSourcer_ListBackupable_Call) Return(_a0 []string) *MockSourcer_ListBackupable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSourcer_ListBackupable_Call) RunAndReturn(run func() []string) *MockSourcer_ListBackupable_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseBackup provides a mock function with given fields: _a0, id, class
func (_m *MockSourcer) ReleaseBackup(_a0 context.Context, id string, class string) error {
	ret := _m.Called(_a0, id, class)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseBackup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(_a0, id, class)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSourcer_ReleaseBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseBackup'
type MockSourcer_ReleaseBackup_Call struct {
	*mock.Call
}

// ReleaseBackup is a helper method to define mock.On call
//   - _a0 context.Context
//   - id string
//   - class string
func (_e *MockSourcer_Expecter) ReleaseBackup(_a0 interface{}, id interface{}, class interface{}) *MockSourcer_ReleaseBackup_Call {
	return &MockSourcer_ReleaseBackup_Call{Call: _e.mock.On("ReleaseBackup", _a0, id, class)}
}

func (_c *MockSourcer_ReleaseBackup_Call) Run(run func(_a0 context.Context, id string, class string)) *MockSourcer_ReleaseBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSourcer_ReleaseBackup_Call) Return(_a0 error) *MockSourcer_ReleaseBackup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSourcer_ReleaseBackup_Call) RunAndReturn(run func(context.Context, string, string) error) *MockSourcer_ReleaseBackup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSourcer creates a new instance of MockSourcer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSourcer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSourcer {
	mock := &MockSourcer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
