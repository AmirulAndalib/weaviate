//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package schema

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	scaler "github.com/weaviate/weaviate/usecases/scaler"

	sharding "github.com/weaviate/weaviate/usecases/sharding"
)

// MockscaleOut is an autogenerated mock type for the scaleOut type
type MockscaleOut struct {
	mock.Mock
}

type MockscaleOut_Expecter struct {
	mock *mock.Mock
}

func (_m *MockscaleOut) EXPECT() *MockscaleOut_Expecter {
	return &MockscaleOut_Expecter{mock: &_m.Mock}
}

// Scale provides a mock function with given fields: ctx, className, updated, prevReplFactor, newReplFactor
func (_m *MockscaleOut) Scale(ctx context.Context, className string, updated sharding.Config, prevReplFactor int64, newReplFactor int64) (*sharding.State, error) {
	ret := _m.Called(ctx, className, updated, prevReplFactor, newReplFactor)

	if len(ret) == 0 {
		panic("no return value specified for Scale")
	}

	var r0 *sharding.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, sharding.Config, int64, int64) (*sharding.State, error)); ok {
		return rf(ctx, className, updated, prevReplFactor, newReplFactor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, sharding.Config, int64, int64) *sharding.State); ok {
		r0 = rf(ctx, className, updated, prevReplFactor, newReplFactor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharding.State)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, sharding.Config, int64, int64) error); ok {
		r1 = rf(ctx, className, updated, prevReplFactor, newReplFactor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockscaleOut_Scale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scale'
type MockscaleOut_Scale_Call struct {
	*mock.Call
}

// Scale is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - updated sharding.Config
//   - prevReplFactor int64
//   - newReplFactor int64
func (_e *MockscaleOut_Expecter) Scale(ctx interface{}, className interface{}, updated interface{}, prevReplFactor interface{}, newReplFactor interface{}) *MockscaleOut_Scale_Call {
	return &MockscaleOut_Scale_Call{Call: _e.mock.On("Scale", ctx, className, updated, prevReplFactor, newReplFactor)}
}

func (_c *MockscaleOut_Scale_Call) Run(run func(ctx context.Context, className string, updated sharding.Config, prevReplFactor int64, newReplFactor int64)) *MockscaleOut_Scale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(sharding.Config), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *MockscaleOut_Scale_Call) Return(_a0 *sharding.State, _a1 error) *MockscaleOut_Scale_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockscaleOut_Scale_Call) RunAndReturn(run func(context.Context, string, sharding.Config, int64, int64) (*sharding.State, error)) *MockscaleOut_Scale_Call {
	_c.Call.Return(run)
	return _c
}

// SetSchemaManager provides a mock function with given fields: sm
func (_m *MockscaleOut) SetSchemaManager(sm scaler.SchemaManager) {
	_m.Called(sm)
}

// MockscaleOut_SetSchemaManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSchemaManager'
type MockscaleOut_SetSchemaManager_Call struct {
	*mock.Call
}

// SetSchemaManager is a helper method to define mock.On call
//   - sm scaler.SchemaManager
func (_e *MockscaleOut_Expecter) SetSchemaManager(sm interface{}) *MockscaleOut_SetSchemaManager_Call {
	return &MockscaleOut_SetSchemaManager_Call{Call: _e.mock.On("SetSchemaManager", sm)}
}

func (_c *MockscaleOut_SetSchemaManager_Call) Run(run func(sm scaler.SchemaManager)) *MockscaleOut_SetSchemaManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(scaler.SchemaManager))
	})
	return _c
}

func (_c *MockscaleOut_SetSchemaManager_Call) Return() *MockscaleOut_SetSchemaManager_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockscaleOut_SetSchemaManager_Call) RunAndReturn(run func(scaler.SchemaManager)) *MockscaleOut_SetSchemaManager_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockscaleOut creates a new instance of MockscaleOut. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockscaleOut(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockscaleOut {
	mock := &MockscaleOut{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
