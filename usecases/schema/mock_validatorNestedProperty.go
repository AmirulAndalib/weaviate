//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package schema

import (
	mock "github.com/stretchr/testify/mock"
	entitiesschema "github.com/weaviate/weaviate/entities/schema"

	models "github.com/weaviate/weaviate/entities/models"
)

// MockvalidatorNestedProperty is an autogenerated mock type for the validatorNestedProperty type
type MockvalidatorNestedProperty struct {
	mock.Mock
}

type MockvalidatorNestedProperty_Expecter struct {
	mock *mock.Mock
}

func (_m *MockvalidatorNestedProperty) EXPECT() *MockvalidatorNestedProperty_Expecter {
	return &MockvalidatorNestedProperty_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: property, primitiveDataType, nestedDataType, isPrimitive, isNested, propNamePrefix
func (_m *MockvalidatorNestedProperty) Execute(property *models.NestedProperty, primitiveDataType entitiesschema.DataType, nestedDataType entitiesschema.DataType, isPrimitive bool, isNested bool, propNamePrefix string) error {
	ret := _m.Called(property, primitiveDataType, nestedDataType, isPrimitive, isNested, propNamePrefix)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.NestedProperty, entitiesschema.DataType, entitiesschema.DataType, bool, bool, string) error); ok {
		r0 = rf(property, primitiveDataType, nestedDataType, isPrimitive, isNested, propNamePrefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockvalidatorNestedProperty_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockvalidatorNestedProperty_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - property *models.NestedProperty
//   - primitiveDataType entitiesschema.DataType
//   - nestedDataType entitiesschema.DataType
//   - isPrimitive bool
//   - isNested bool
//   - propNamePrefix string
func (_e *MockvalidatorNestedProperty_Expecter) Execute(property interface{}, primitiveDataType interface{}, nestedDataType interface{}, isPrimitive interface{}, isNested interface{}, propNamePrefix interface{}) *MockvalidatorNestedProperty_Execute_Call {
	return &MockvalidatorNestedProperty_Execute_Call{Call: _e.mock.On("Execute", property, primitiveDataType, nestedDataType, isPrimitive, isNested, propNamePrefix)}
}

func (_c *MockvalidatorNestedProperty_Execute_Call) Run(run func(property *models.NestedProperty, primitiveDataType entitiesschema.DataType, nestedDataType entitiesschema.DataType, isPrimitive bool, isNested bool, propNamePrefix string)) *MockvalidatorNestedProperty_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.NestedProperty), args[1].(entitiesschema.DataType), args[2].(entitiesschema.DataType), args[3].(bool), args[4].(bool), args[5].(string))
	})
	return _c
}

func (_c *MockvalidatorNestedProperty_Execute_Call) Return(_a0 error) *MockvalidatorNestedProperty_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockvalidatorNestedProperty_Execute_Call) RunAndReturn(run func(*models.NestedProperty, entitiesschema.DataType, entitiesschema.DataType, bool, bool, string) error) *MockvalidatorNestedProperty_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockvalidatorNestedProperty creates a new instance of MockvalidatorNestedProperty. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockvalidatorNestedProperty(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockvalidatorNestedProperty {
	mock := &MockvalidatorNestedProperty{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
