//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package schema

import mock "github.com/stretchr/testify/mock"

// MockclusterState is an autogenerated mock type for the clusterState type
type MockclusterState struct {
	mock.Mock
}

type MockclusterState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockclusterState) EXPECT() *MockclusterState_Expecter {
	return &MockclusterState_Expecter{mock: &_m.Mock}
}

// AllNames provides a mock function with given fields:
func (_m *MockclusterState) AllNames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllNames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockclusterState_AllNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllNames'
type MockclusterState_AllNames_Call struct {
	*mock.Call
}

// AllNames is a helper method to define mock.On call
func (_e *MockclusterState_Expecter) AllNames() *MockclusterState_AllNames_Call {
	return &MockclusterState_AllNames_Call{Call: _e.mock.On("AllNames")}
}

func (_c *MockclusterState_AllNames_Call) Run(run func()) *MockclusterState_AllNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockclusterState_AllNames_Call) Return(_a0 []string) *MockclusterState_AllNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockclusterState_AllNames_Call) RunAndReturn(run func() []string) *MockclusterState_AllNames_Call {
	_c.Call.Return(run)
	return _c
}

// Candidates provides a mock function with given fields:
func (_m *MockclusterState) Candidates() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Candidates")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockclusterState_Candidates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Candidates'
type MockclusterState_Candidates_Call struct {
	*mock.Call
}

// Candidates is a helper method to define mock.On call
func (_e *MockclusterState_Expecter) Candidates() *MockclusterState_Candidates_Call {
	return &MockclusterState_Candidates_Call{Call: _e.mock.On("Candidates")}
}

func (_c *MockclusterState_Candidates_Call) Run(run func()) *MockclusterState_Candidates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockclusterState_Candidates_Call) Return(_a0 []string) *MockclusterState_Candidates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockclusterState_Candidates_Call) RunAndReturn(run func() []string) *MockclusterState_Candidates_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterHealthScore provides a mock function with given fields:
func (_m *MockclusterState) ClusterHealthScore() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClusterHealthScore")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockclusterState_ClusterHealthScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterHealthScore'
type MockclusterState_ClusterHealthScore_Call struct {
	*mock.Call
}

// ClusterHealthScore is a helper method to define mock.On call
func (_e *MockclusterState_Expecter) ClusterHealthScore() *MockclusterState_ClusterHealthScore_Call {
	return &MockclusterState_ClusterHealthScore_Call{Call: _e.mock.On("ClusterHealthScore")}
}

func (_c *MockclusterState_ClusterHealthScore_Call) Run(run func()) *MockclusterState_ClusterHealthScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockclusterState_ClusterHealthScore_Call) Return(_a0 int) *MockclusterState_ClusterHealthScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockclusterState_ClusterHealthScore_Call) RunAndReturn(run func() int) *MockclusterState_ClusterHealthScore_Call {
	_c.Call.Return(run)
	return _c
}

// Hostnames provides a mock function with given fields:
func (_m *MockclusterState) Hostnames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hostnames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockclusterState_Hostnames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hostnames'
type MockclusterState_Hostnames_Call struct {
	*mock.Call
}

// Hostnames is a helper method to define mock.On call
func (_e *MockclusterState_Expecter) Hostnames() *MockclusterState_Hostnames_Call {
	return &MockclusterState_Hostnames_Call{Call: _e.mock.On("Hostnames")}
}

func (_c *MockclusterState_Hostnames_Call) Run(run func()) *MockclusterState_Hostnames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockclusterState_Hostnames_Call) Return(_a0 []string) *MockclusterState_Hostnames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockclusterState_Hostnames_Call) RunAndReturn(run func() []string) *MockclusterState_Hostnames_Call {
	_c.Call.Return(run)
	return _c
}

// LocalName provides a mock function with given fields:
func (_m *MockclusterState) LocalName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockclusterState_LocalName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalName'
type MockclusterState_LocalName_Call struct {
	*mock.Call
}

// LocalName is a helper method to define mock.On call
func (_e *MockclusterState_Expecter) LocalName() *MockclusterState_LocalName_Call {
	return &MockclusterState_LocalName_Call{Call: _e.mock.On("LocalName")}
}

func (_c *MockclusterState_LocalName_Call) Run(run func()) *MockclusterState_LocalName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockclusterState_LocalName_Call) Return(_a0 string) *MockclusterState_LocalName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockclusterState_LocalName_Call) RunAndReturn(run func() string) *MockclusterState_LocalName_Call {
	_c.Call.Return(run)
	return _c
}

// NodeCount provides a mock function with given fields:
func (_m *MockclusterState) NodeCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockclusterState_NodeCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeCount'
type MockclusterState_NodeCount_Call struct {
	*mock.Call
}

// NodeCount is a helper method to define mock.On call
func (_e *MockclusterState_Expecter) NodeCount() *MockclusterState_NodeCount_Call {
	return &MockclusterState_NodeCount_Call{Call: _e.mock.On("NodeCount")}
}

func (_c *MockclusterState_NodeCount_Call) Run(run func()) *MockclusterState_NodeCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockclusterState_NodeCount_Call) Return(_a0 int) *MockclusterState_NodeCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockclusterState_NodeCount_Call) RunAndReturn(run func() int) *MockclusterState_NodeCount_Call {
	_c.Call.Return(run)
	return _c
}

// NodeHostname provides a mock function with given fields: nodeName
func (_m *MockclusterState) NodeHostname(nodeName string) (string, bool) {
	ret := _m.Called(nodeName)

	if len(ret) == 0 {
		panic("no return value specified for NodeHostname")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(nodeName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(nodeName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(nodeName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockclusterState_NodeHostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeHostname'
type MockclusterState_NodeHostname_Call struct {
	*mock.Call
}

// NodeHostname is a helper method to define mock.On call
//   - nodeName string
func (_e *MockclusterState_Expecter) NodeHostname(nodeName interface{}) *MockclusterState_NodeHostname_Call {
	return &MockclusterState_NodeHostname_Call{Call: _e.mock.On("NodeHostname", nodeName)}
}

func (_c *MockclusterState_NodeHostname_Call) Run(run func(nodeName string)) *MockclusterState_NodeHostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockclusterState_NodeHostname_Call) Return(_a0 string, _a1 bool) *MockclusterState_NodeHostname_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockclusterState_NodeHostname_Call) RunAndReturn(run func(string) (string, bool)) *MockclusterState_NodeHostname_Call {
	_c.Call.Return(run)
	return _c
}

// SchemaSyncIgnored provides a mock function with given fields:
func (_m *MockclusterState) SchemaSyncIgnored() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SchemaSyncIgnored")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockclusterState_SchemaSyncIgnored_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchemaSyncIgnored'
type MockclusterState_SchemaSyncIgnored_Call struct {
	*mock.Call
}

// SchemaSyncIgnored is a helper method to define mock.On call
func (_e *MockclusterState_Expecter) SchemaSyncIgnored() *MockclusterState_SchemaSyncIgnored_Call {
	return &MockclusterState_SchemaSyncIgnored_Call{Call: _e.mock.On("SchemaSyncIgnored")}
}

func (_c *MockclusterState_SchemaSyncIgnored_Call) Run(run func()) *MockclusterState_SchemaSyncIgnored_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockclusterState_SchemaSyncIgnored_Call) Return(_a0 bool) *MockclusterState_SchemaSyncIgnored_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockclusterState_SchemaSyncIgnored_Call) RunAndReturn(run func() bool) *MockclusterState_SchemaSyncIgnored_Call {
	_c.Call.Return(run)
	return _c
}

// SkipSchemaRepair provides a mock function with given fields:
func (_m *MockclusterState) SkipSchemaRepair() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SkipSchemaRepair")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockclusterState_SkipSchemaRepair_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SkipSchemaRepair'
type MockclusterState_SkipSchemaRepair_Call struct {
	*mock.Call
}

// SkipSchemaRepair is a helper method to define mock.On call
func (_e *MockclusterState_Expecter) SkipSchemaRepair() *MockclusterState_SkipSchemaRepair_Call {
	return &MockclusterState_SkipSchemaRepair_Call{Call: _e.mock.On("SkipSchemaRepair")}
}

func (_c *MockclusterState_SkipSchemaRepair_Call) Run(run func()) *MockclusterState_SkipSchemaRepair_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockclusterState_SkipSchemaRepair_Call) Return(_a0 bool) *MockclusterState_SkipSchemaRepair_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockclusterState_SkipSchemaRepair_Call) RunAndReturn(run func() bool) *MockclusterState_SkipSchemaRepair_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockclusterState creates a new instance of MockclusterState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockclusterState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockclusterState {
	mock := &MockclusterState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
