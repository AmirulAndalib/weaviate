//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package schema

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSchemaStore is an autogenerated mock type for the SchemaStore type
type MockSchemaStore struct {
	mock.Mock
}

type MockSchemaStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSchemaStore) EXPECT() *MockSchemaStore_Expecter {
	return &MockSchemaStore_Expecter{mock: &_m.Mock}
}

// DeleteClass provides a mock function with given fields: ctx, class
func (_m *MockSchemaStore) DeleteClass(ctx context.Context, class string) error {
	ret := _m.Called(ctx, class)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, class)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSchemaStore_DeleteClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClass'
type MockSchemaStore_DeleteClass_Call struct {
	*mock.Call
}

// DeleteClass is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
func (_e *MockSchemaStore_Expecter) DeleteClass(ctx interface{}, class interface{}) *MockSchemaStore_DeleteClass_Call {
	return &MockSchemaStore_DeleteClass_Call{Call: _e.mock.On("DeleteClass", ctx, class)}
}

func (_c *MockSchemaStore_DeleteClass_Call) Run(run func(ctx context.Context, class string)) *MockSchemaStore_DeleteClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSchemaStore_DeleteClass_Call) Return(_a0 error) *MockSchemaStore_DeleteClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaStore_DeleteClass_Call) RunAndReturn(run func(context.Context, string) error) *MockSchemaStore_DeleteClass_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteShards provides a mock function with given fields: ctx, class, shards
func (_m *MockSchemaStore) DeleteShards(ctx context.Context, class string, shards []string) error {
	ret := _m.Called(ctx, class, shards)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShards")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, class, shards)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSchemaStore_DeleteShards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteShards'
type MockSchemaStore_DeleteShards_Call struct {
	*mock.Call
}

// DeleteShards is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
//   - shards []string
func (_e *MockSchemaStore_Expecter) DeleteShards(ctx interface{}, class interface{}, shards interface{}) *MockSchemaStore_DeleteShards_Call {
	return &MockSchemaStore_DeleteShards_Call{Call: _e.mock.On("DeleteShards", ctx, class, shards)}
}

func (_c *MockSchemaStore_DeleteShards_Call) Run(run func(ctx context.Context, class string, shards []string)) *MockSchemaStore_DeleteShards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockSchemaStore_DeleteShards_Call) Return(_a0 error) *MockSchemaStore_DeleteShards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaStore_DeleteShards_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockSchemaStore_DeleteShards_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: _a0
func (_m *MockSchemaStore) Load(_a0 context.Context) (State, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (State, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) State); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(State)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchemaStore_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockSchemaStore_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockSchemaStore_Expecter) Load(_a0 interface{}) *MockSchemaStore_Load_Call {
	return &MockSchemaStore_Load_Call{Call: _e.mock.On("Load", _a0)}
}

func (_c *MockSchemaStore_Load_Call) Run(run func(_a0 context.Context)) *MockSchemaStore_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSchemaStore_Load_Call) Return(_a0 State, _a1 error) *MockSchemaStore_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemaStore_Load_Call) RunAndReturn(run func(context.Context) (State, error)) *MockSchemaStore_Load_Call {
	_c.Call.Return(run)
	return _c
}

// NewClass provides a mock function with given fields: _a0, _a1
func (_m *MockSchemaStore) NewClass(_a0 context.Context, _a1 ClassPayload) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NewClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ClassPayload) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSchemaStore_NewClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewClass'
type MockSchemaStore_NewClass_Call struct {
	*mock.Call
}

// NewClass is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ClassPayload
func (_e *MockSchemaStore_Expecter) NewClass(_a0 interface{}, _a1 interface{}) *MockSchemaStore_NewClass_Call {
	return &MockSchemaStore_NewClass_Call{Call: _e.mock.On("NewClass", _a0, _a1)}
}

func (_c *MockSchemaStore_NewClass_Call) Run(run func(_a0 context.Context, _a1 ClassPayload)) *MockSchemaStore_NewClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ClassPayload))
	})
	return _c
}

func (_c *MockSchemaStore_NewClass_Call) Return(_a0 error) *MockSchemaStore_NewClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaStore_NewClass_Call) RunAndReturn(run func(context.Context, ClassPayload) error) *MockSchemaStore_NewClass_Call {
	_c.Call.Return(run)
	return _c
}

// NewShards provides a mock function with given fields: ctx, class, shards
func (_m *MockSchemaStore) NewShards(ctx context.Context, class string, shards []KeyValuePair) error {
	ret := _m.Called(ctx, class, shards)

	if len(ret) == 0 {
		panic("no return value specified for NewShards")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []KeyValuePair) error); ok {
		r0 = rf(ctx, class, shards)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSchemaStore_NewShards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewShards'
type MockSchemaStore_NewShards_Call struct {
	*mock.Call
}

// NewShards is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
//   - shards []KeyValuePair
func (_e *MockSchemaStore_Expecter) NewShards(ctx interface{}, class interface{}, shards interface{}) *MockSchemaStore_NewShards_Call {
	return &MockSchemaStore_NewShards_Call{Call: _e.mock.On("NewShards", ctx, class, shards)}
}

func (_c *MockSchemaStore_NewShards_Call) Run(run func(ctx context.Context, class string, shards []KeyValuePair)) *MockSchemaStore_NewShards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]KeyValuePair))
	})
	return _c
}

func (_c *MockSchemaStore_NewShards_Call) Return(_a0 error) *MockSchemaStore_NewShards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaStore_NewShards_Call) RunAndReturn(run func(context.Context, string, []KeyValuePair) error) *MockSchemaStore_NewShards_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, schema
func (_m *MockSchemaStore) Save(ctx context.Context, schema State) error {
	ret := _m.Called(ctx, schema)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, State) error); ok {
		r0 = rf(ctx, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSchemaStore_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockSchemaStore_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - schema State
func (_e *MockSchemaStore_Expecter) Save(ctx interface{}, schema interface{}) *MockSchemaStore_Save_Call {
	return &MockSchemaStore_Save_Call{Call: _e.mock.On("Save", ctx, schema)}
}

func (_c *MockSchemaStore_Save_Call) Run(run func(ctx context.Context, schema State)) *MockSchemaStore_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(State))
	})
	return _c
}

func (_c *MockSchemaStore_Save_Call) Return(_a0 error) *MockSchemaStore_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaStore_Save_Call) RunAndReturn(run func(context.Context, State) error) *MockSchemaStore_Save_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClass provides a mock function with given fields: _a0, _a1
func (_m *MockSchemaStore) UpdateClass(_a0 context.Context, _a1 ClassPayload) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ClassPayload) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSchemaStore_UpdateClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClass'
type MockSchemaStore_UpdateClass_Call struct {
	*mock.Call
}

// UpdateClass is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ClassPayload
func (_e *MockSchemaStore_Expecter) UpdateClass(_a0 interface{}, _a1 interface{}) *MockSchemaStore_UpdateClass_Call {
	return &MockSchemaStore_UpdateClass_Call{Call: _e.mock.On("UpdateClass", _a0, _a1)}
}

func (_c *MockSchemaStore_UpdateClass_Call) Run(run func(_a0 context.Context, _a1 ClassPayload)) *MockSchemaStore_UpdateClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ClassPayload))
	})
	return _c
}

func (_c *MockSchemaStore_UpdateClass_Call) Return(_a0 error) *MockSchemaStore_UpdateClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaStore_UpdateClass_Call) RunAndReturn(run func(context.Context, ClassPayload) error) *MockSchemaStore_UpdateClass_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShards provides a mock function with given fields: ctx, class, shards
func (_m *MockSchemaStore) UpdateShards(ctx context.Context, class string, shards []KeyValuePair) error {
	ret := _m.Called(ctx, class, shards)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShards")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []KeyValuePair) error); ok {
		r0 = rf(ctx, class, shards)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSchemaStore_UpdateShards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShards'
type MockSchemaStore_UpdateShards_Call struct {
	*mock.Call
}

// UpdateShards is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
//   - shards []KeyValuePair
func (_e *MockSchemaStore_Expecter) UpdateShards(ctx interface{}, class interface{}, shards interface{}) *MockSchemaStore_UpdateShards_Call {
	return &MockSchemaStore_UpdateShards_Call{Call: _e.mock.On("UpdateShards", ctx, class, shards)}
}

func (_c *MockSchemaStore_UpdateShards_Call) Run(run func(ctx context.Context, class string, shards []KeyValuePair)) *MockSchemaStore_UpdateShards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]KeyValuePair))
	})
	return _c
}

func (_c *MockSchemaStore_UpdateShards_Call) Return(_a0 error) *MockSchemaStore_UpdateShards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaStore_UpdateShards_Call) RunAndReturn(run func(context.Context, string, []KeyValuePair) error) *MockSchemaStore_UpdateShards_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSchemaStore creates a new instance of MockSchemaStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSchemaStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSchemaStore {
	mock := &MockSchemaStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
