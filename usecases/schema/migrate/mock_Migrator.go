//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package migrate

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"

	schema "github.com/weaviate/weaviate/entities/schema"

	sharding "github.com/weaviate/weaviate/usecases/sharding"
)

// MockMigrator is an autogenerated mock type for the Migrator type
type MockMigrator struct {
	mock.Mock
}

type MockMigrator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMigrator) EXPECT() *MockMigrator_Expecter {
	return &MockMigrator_Expecter{mock: &_m.Mock}
}

// AddClass provides a mock function with given fields: ctx, class, shardingState
func (_m *MockMigrator) AddClass(ctx context.Context, class *models.Class, shardingState *sharding.State) error {
	ret := _m.Called(ctx, class, shardingState)

	if len(ret) == 0 {
		panic("no return value specified for AddClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Class, *sharding.State) error); ok {
		r0 = rf(ctx, class, shardingState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_AddClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClass'
type MockMigrator_AddClass_Call struct {
	*mock.Call
}

// AddClass is a helper method to define mock.On call
//   - ctx context.Context
//   - class *models.Class
//   - shardingState *sharding.State
func (_e *MockMigrator_Expecter) AddClass(ctx interface{}, class interface{}, shardingState interface{}) *MockMigrator_AddClass_Call {
	return &MockMigrator_AddClass_Call{Call: _e.mock.On("AddClass", ctx, class, shardingState)}
}

func (_c *MockMigrator_AddClass_Call) Run(run func(ctx context.Context, class *models.Class, shardingState *sharding.State)) *MockMigrator_AddClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Class), args[2].(*sharding.State))
	})
	return _c
}

func (_c *MockMigrator_AddClass_Call) Return(_a0 error) *MockMigrator_AddClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_AddClass_Call) RunAndReturn(run func(context.Context, *models.Class, *sharding.State) error) *MockMigrator_AddClass_Call {
	_c.Call.Return(run)
	return _c
}

// AddProperty provides a mock function with given fields: ctx, className, prop
func (_m *MockMigrator) AddProperty(ctx context.Context, className string, prop *models.Property) error {
	ret := _m.Called(ctx, className, prop)

	if len(ret) == 0 {
		panic("no return value specified for AddProperty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Property) error); ok {
		r0 = rf(ctx, className, prop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_AddProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProperty'
type MockMigrator_AddProperty_Call struct {
	*mock.Call
}

// AddProperty is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - prop *models.Property
func (_e *MockMigrator_Expecter) AddProperty(ctx interface{}, className interface{}, prop interface{}) *MockMigrator_AddProperty_Call {
	return &MockMigrator_AddProperty_Call{Call: _e.mock.On("AddProperty", ctx, className, prop)}
}

func (_c *MockMigrator_AddProperty_Call) Run(run func(ctx context.Context, className string, prop *models.Property)) *MockMigrator_AddProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.Property))
	})
	return _c
}

func (_c *MockMigrator_AddProperty_Call) Return(_a0 error) *MockMigrator_AddProperty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_AddProperty_Call) RunAndReturn(run func(context.Context, string, *models.Property) error) *MockMigrator_AddProperty_Call {
	_c.Call.Return(run)
	return _c
}

// AdjustFilterablePropSettings provides a mock function with given fields: ctx
func (_m *MockMigrator) AdjustFilterablePropSettings(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AdjustFilterablePropSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_AdjustFilterablePropSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdjustFilterablePropSettings'
type MockMigrator_AdjustFilterablePropSettings_Call struct {
	*mock.Call
}

// AdjustFilterablePropSettings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMigrator_Expecter) AdjustFilterablePropSettings(ctx interface{}) *MockMigrator_AdjustFilterablePropSettings_Call {
	return &MockMigrator_AdjustFilterablePropSettings_Call{Call: _e.mock.On("AdjustFilterablePropSettings", ctx)}
}

func (_c *MockMigrator_AdjustFilterablePropSettings_Call) Run(run func(ctx context.Context)) *MockMigrator_AdjustFilterablePropSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMigrator_AdjustFilterablePropSettings_Call) Return(_a0 error) *MockMigrator_AdjustFilterablePropSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_AdjustFilterablePropSettings_Call) RunAndReturn(run func(context.Context) error) *MockMigrator_AdjustFilterablePropSettings_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTenants provides a mock function with given fields: ctx, class, tenants
func (_m *MockMigrator) DeleteTenants(ctx context.Context, class *models.Class, tenants []string) (func(bool), error) {
	ret := _m.Called(ctx, class, tenants)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTenants")
	}

	var r0 func(bool)
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Class, []string) (func(bool), error)); ok {
		return rf(ctx, class, tenants)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Class, []string) func(bool)); ok {
		r0 = rf(ctx, class, tenants)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(bool))
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Class, []string) error); ok {
		r1 = rf(ctx, class, tenants)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMigrator_DeleteTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenants'
type MockMigrator_DeleteTenants_Call struct {
	*mock.Call
}

// DeleteTenants is a helper method to define mock.On call
//   - ctx context.Context
//   - class *models.Class
//   - tenants []string
func (_e *MockMigrator_Expecter) DeleteTenants(ctx interface{}, class interface{}, tenants interface{}) *MockMigrator_DeleteTenants_Call {
	return &MockMigrator_DeleteTenants_Call{Call: _e.mock.On("DeleteTenants", ctx, class, tenants)}
}

func (_c *MockMigrator_DeleteTenants_Call) Run(run func(ctx context.Context, class *models.Class, tenants []string)) *MockMigrator_DeleteTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Class), args[2].([]string))
	})
	return _c
}

func (_c *MockMigrator_DeleteTenants_Call) Return(commit func(bool), err error) *MockMigrator_DeleteTenants_Call {
	_c.Call.Return(commit, err)
	return _c
}

func (_c *MockMigrator_DeleteTenants_Call) RunAndReturn(run func(context.Context, *models.Class, []string) (func(bool), error)) *MockMigrator_DeleteTenants_Call {
	_c.Call.Return(run)
	return _c
}

// DropClass provides a mock function with given fields: ctx, className
func (_m *MockMigrator) DropClass(ctx context.Context, className string) error {
	ret := _m.Called(ctx, className)

	if len(ret) == 0 {
		panic("no return value specified for DropClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, className)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_DropClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropClass'
type MockMigrator_DropClass_Call struct {
	*mock.Call
}

// DropClass is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
func (_e *MockMigrator_Expecter) DropClass(ctx interface{}, className interface{}) *MockMigrator_DropClass_Call {
	return &MockMigrator_DropClass_Call{Call: _e.mock.On("DropClass", ctx, className)}
}

func (_c *MockMigrator_DropClass_Call) Run(run func(ctx context.Context, className string)) *MockMigrator_DropClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMigrator_DropClass_Call) Return(_a0 error) *MockMigrator_DropClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_DropClass_Call) RunAndReturn(run func(context.Context, string) error) *MockMigrator_DropClass_Call {
	_c.Call.Return(run)
	return _c
}

// GetShardsQueueSize provides a mock function with given fields: ctx, className, tenant
func (_m *MockMigrator) GetShardsQueueSize(ctx context.Context, className string, tenant string) (map[string]int64, error) {
	ret := _m.Called(ctx, className, tenant)

	if len(ret) == 0 {
		panic("no return value specified for GetShardsQueueSize")
	}

	var r0 map[string]int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (map[string]int64, error)); ok {
		return rf(ctx, className, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]int64); ok {
		r0 = rf(ctx, className, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, className, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMigrator_GetShardsQueueSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShardsQueueSize'
type MockMigrator_GetShardsQueueSize_Call struct {
	*mock.Call
}

// GetShardsQueueSize is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - tenant string
func (_e *MockMigrator_Expecter) GetShardsQueueSize(ctx interface{}, className interface{}, tenant interface{}) *MockMigrator_GetShardsQueueSize_Call {
	return &MockMigrator_GetShardsQueueSize_Call{Call: _e.mock.On("GetShardsQueueSize", ctx, className, tenant)}
}

func (_c *MockMigrator_GetShardsQueueSize_Call) Run(run func(ctx context.Context, className string, tenant string)) *MockMigrator_GetShardsQueueSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMigrator_GetShardsQueueSize_Call) Return(_a0 map[string]int64, _a1 error) *MockMigrator_GetShardsQueueSize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMigrator_GetShardsQueueSize_Call) RunAndReturn(run func(context.Context, string, string) (map[string]int64, error)) *MockMigrator_GetShardsQueueSize_Call {
	_c.Call.Return(run)
	return _c
}

// GetShardsStatus provides a mock function with given fields: ctx, className, tenant
func (_m *MockMigrator) GetShardsStatus(ctx context.Context, className string, tenant string) (map[string]string, error) {
	ret := _m.Called(ctx, className, tenant)

	if len(ret) == 0 {
		panic("no return value specified for GetShardsStatus")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (map[string]string, error)); ok {
		return rf(ctx, className, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]string); ok {
		r0 = rf(ctx, className, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, className, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMigrator_GetShardsStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShardsStatus'
type MockMigrator_GetShardsStatus_Call struct {
	*mock.Call
}

// GetShardsStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - tenant string
func (_e *MockMigrator_Expecter) GetShardsStatus(ctx interface{}, className interface{}, tenant interface{}) *MockMigrator_GetShardsStatus_Call {
	return &MockMigrator_GetShardsStatus_Call{Call: _e.mock.On("GetShardsStatus", ctx, className, tenant)}
}

func (_c *MockMigrator_GetShardsStatus_Call) Run(run func(ctx context.Context, className string, tenant string)) *MockMigrator_GetShardsStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMigrator_GetShardsStatus_Call) Return(_a0 map[string]string, _a1 error) *MockMigrator_GetShardsStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMigrator_GetShardsStatus_Call) RunAndReturn(run func(context.Context, string, string) (map[string]string, error)) *MockMigrator_GetShardsStatus_Call {
	_c.Call.Return(run)
	return _c
}

// InvertedReindex provides a mock function with given fields: ctx, taskNames
func (_m *MockMigrator) InvertedReindex(ctx context.Context, taskNames ...string) error {
	_va := make([]interface{}, len(taskNames))
	for _i := range taskNames {
		_va[_i] = taskNames[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvertedReindex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(ctx, taskNames...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_InvertedReindex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvertedReindex'
type MockMigrator_InvertedReindex_Call struct {
	*mock.Call
}

// InvertedReindex is a helper method to define mock.On call
//   - ctx context.Context
//   - taskNames ...string
func (_e *MockMigrator_Expecter) InvertedReindex(ctx interface{}, taskNames ...interface{}) *MockMigrator_InvertedReindex_Call {
	return &MockMigrator_InvertedReindex_Call{Call: _e.mock.On("InvertedReindex",
		append([]interface{}{ctx}, taskNames...)...)}
}

func (_c *MockMigrator_InvertedReindex_Call) Run(run func(ctx context.Context, taskNames ...string)) *MockMigrator_InvertedReindex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockMigrator_InvertedReindex_Call) Return(_a0 error) *MockMigrator_InvertedReindex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_InvertedReindex_Call) RunAndReturn(run func(context.Context, ...string) error) *MockMigrator_InvertedReindex_Call {
	_c.Call.Return(run)
	return _c
}

// NewTenants provides a mock function with given fields: ctx, class, creates
func (_m *MockMigrator) NewTenants(ctx context.Context, class *models.Class, creates []*CreateTenantPayload) (func(bool), error) {
	ret := _m.Called(ctx, class, creates)

	if len(ret) == 0 {
		panic("no return value specified for NewTenants")
	}

	var r0 func(bool)
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Class, []*CreateTenantPayload) (func(bool), error)); ok {
		return rf(ctx, class, creates)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Class, []*CreateTenantPayload) func(bool)); ok {
		r0 = rf(ctx, class, creates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(bool))
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Class, []*CreateTenantPayload) error); ok {
		r1 = rf(ctx, class, creates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMigrator_NewTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTenants'
type MockMigrator_NewTenants_Call struct {
	*mock.Call
}

// NewTenants is a helper method to define mock.On call
//   - ctx context.Context
//   - class *models.Class
//   - creates []*CreateTenantPayload
func (_e *MockMigrator_Expecter) NewTenants(ctx interface{}, class interface{}, creates interface{}) *MockMigrator_NewTenants_Call {
	return &MockMigrator_NewTenants_Call{Call: _e.mock.On("NewTenants", ctx, class, creates)}
}

func (_c *MockMigrator_NewTenants_Call) Run(run func(ctx context.Context, class *models.Class, creates []*CreateTenantPayload)) *MockMigrator_NewTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Class), args[2].([]*CreateTenantPayload))
	})
	return _c
}

func (_c *MockMigrator_NewTenants_Call) Return(commit func(bool), err error) *MockMigrator_NewTenants_Call {
	_c.Call.Return(commit, err)
	return _c
}

func (_c *MockMigrator_NewTenants_Call) RunAndReturn(run func(context.Context, *models.Class, []*CreateTenantPayload) (func(bool), error)) *MockMigrator_NewTenants_Call {
	_c.Call.Return(run)
	return _c
}

// RecalculateVectorDimensions provides a mock function with given fields: ctx
func (_m *MockMigrator) RecalculateVectorDimensions(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RecalculateVectorDimensions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_RecalculateVectorDimensions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecalculateVectorDimensions'
type MockMigrator_RecalculateVectorDimensions_Call struct {
	*mock.Call
}

// RecalculateVectorDimensions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMigrator_Expecter) RecalculateVectorDimensions(ctx interface{}) *MockMigrator_RecalculateVectorDimensions_Call {
	return &MockMigrator_RecalculateVectorDimensions_Call{Call: _e.mock.On("RecalculateVectorDimensions", ctx)}
}

func (_c *MockMigrator_RecalculateVectorDimensions_Call) Run(run func(ctx context.Context)) *MockMigrator_RecalculateVectorDimensions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMigrator_RecalculateVectorDimensions_Call) Return(_a0 error) *MockMigrator_RecalculateVectorDimensions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_RecalculateVectorDimensions_Call) RunAndReturn(run func(context.Context) error) *MockMigrator_RecalculateVectorDimensions_Call {
	_c.Call.Return(run)
	return _c
}

// RecountProperties provides a mock function with given fields: ctx
func (_m *MockMigrator) RecountProperties(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RecountProperties")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_RecountProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecountProperties'
type MockMigrator_RecountProperties_Call struct {
	*mock.Call
}

// RecountProperties is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMigrator_Expecter) RecountProperties(ctx interface{}) *MockMigrator_RecountProperties_Call {
	return &MockMigrator_RecountProperties_Call{Call: _e.mock.On("RecountProperties", ctx)}
}

func (_c *MockMigrator_RecountProperties_Call) Run(run func(ctx context.Context)) *MockMigrator_RecountProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMigrator_RecountProperties_Call) Return(_a0 error) *MockMigrator_RecountProperties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_RecountProperties_Call) RunAndReturn(run func(context.Context) error) *MockMigrator_RecountProperties_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClass provides a mock function with given fields: ctx, className, newClassName
func (_m *MockMigrator) UpdateClass(ctx context.Context, className string, newClassName *string) error {
	ret := _m.Called(ctx, className, newClassName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *string) error); ok {
		r0 = rf(ctx, className, newClassName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_UpdateClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClass'
type MockMigrator_UpdateClass_Call struct {
	*mock.Call
}

// UpdateClass is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - newClassName *string
func (_e *MockMigrator_Expecter) UpdateClass(ctx interface{}, className interface{}, newClassName interface{}) *MockMigrator_UpdateClass_Call {
	return &MockMigrator_UpdateClass_Call{Call: _e.mock.On("UpdateClass", ctx, className, newClassName)}
}

func (_c *MockMigrator_UpdateClass_Call) Run(run func(ctx context.Context, className string, newClassName *string)) *MockMigrator_UpdateClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*string))
	})
	return _c
}

func (_c *MockMigrator_UpdateClass_Call) Return(_a0 error) *MockMigrator_UpdateClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_UpdateClass_Call) RunAndReturn(run func(context.Context, string, *string) error) *MockMigrator_UpdateClass_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInvertedIndexConfig provides a mock function with given fields: ctx, className, updated
func (_m *MockMigrator) UpdateInvertedIndexConfig(ctx context.Context, className string, updated *models.InvertedIndexConfig) error {
	ret := _m.Called(ctx, className, updated)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvertedIndexConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.InvertedIndexConfig) error); ok {
		r0 = rf(ctx, className, updated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_UpdateInvertedIndexConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInvertedIndexConfig'
type MockMigrator_UpdateInvertedIndexConfig_Call struct {
	*mock.Call
}

// UpdateInvertedIndexConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - updated *models.InvertedIndexConfig
func (_e *MockMigrator_Expecter) UpdateInvertedIndexConfig(ctx interface{}, className interface{}, updated interface{}) *MockMigrator_UpdateInvertedIndexConfig_Call {
	return &MockMigrator_UpdateInvertedIndexConfig_Call{Call: _e.mock.On("UpdateInvertedIndexConfig", ctx, className, updated)}
}

func (_c *MockMigrator_UpdateInvertedIndexConfig_Call) Run(run func(ctx context.Context, className string, updated *models.InvertedIndexConfig)) *MockMigrator_UpdateInvertedIndexConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.InvertedIndexConfig))
	})
	return _c
}

func (_c *MockMigrator_UpdateInvertedIndexConfig_Call) Return(_a0 error) *MockMigrator_UpdateInvertedIndexConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_UpdateInvertedIndexConfig_Call) RunAndReturn(run func(context.Context, string, *models.InvertedIndexConfig) error) *MockMigrator_UpdateInvertedIndexConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProperty provides a mock function with given fields: ctx, className, propName, newName
func (_m *MockMigrator) UpdateProperty(ctx context.Context, className string, propName string, newName *string) error {
	ret := _m.Called(ctx, className, propName, newName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProperty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string) error); ok {
		r0 = rf(ctx, className, propName, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_UpdateProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProperty'
type MockMigrator_UpdateProperty_Call struct {
	*mock.Call
}

// UpdateProperty is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - propName string
//   - newName *string
func (_e *MockMigrator_Expecter) UpdateProperty(ctx interface{}, className interface{}, propName interface{}, newName interface{}) *MockMigrator_UpdateProperty_Call {
	return &MockMigrator_UpdateProperty_Call{Call: _e.mock.On("UpdateProperty", ctx, className, propName, newName)}
}

func (_c *MockMigrator_UpdateProperty_Call) Run(run func(ctx context.Context, className string, propName string, newName *string)) *MockMigrator_UpdateProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*string))
	})
	return _c
}

func (_c *MockMigrator_UpdateProperty_Call) Return(_a0 error) *MockMigrator_UpdateProperty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_UpdateProperty_Call) RunAndReturn(run func(context.Context, string, string, *string) error) *MockMigrator_UpdateProperty_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShardStatus provides a mock function with given fields: ctx, className, shardName, targetStatus
func (_m *MockMigrator) UpdateShardStatus(ctx context.Context, className string, shardName string, targetStatus string) error {
	ret := _m.Called(ctx, className, shardName, targetStatus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShardStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, className, shardName, targetStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_UpdateShardStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShardStatus'
type MockMigrator_UpdateShardStatus_Call struct {
	*mock.Call
}

// UpdateShardStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - shardName string
//   - targetStatus string
func (_e *MockMigrator_Expecter) UpdateShardStatus(ctx interface{}, className interface{}, shardName interface{}, targetStatus interface{}) *MockMigrator_UpdateShardStatus_Call {
	return &MockMigrator_UpdateShardStatus_Call{Call: _e.mock.On("UpdateShardStatus", ctx, className, shardName, targetStatus)}
}

func (_c *MockMigrator_UpdateShardStatus_Call) Run(run func(ctx context.Context, className string, shardName string, targetStatus string)) *MockMigrator_UpdateShardStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockMigrator_UpdateShardStatus_Call) Return(_a0 error) *MockMigrator_UpdateShardStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_UpdateShardStatus_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockMigrator_UpdateShardStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTenants provides a mock function with given fields: ctx, class, updates
func (_m *MockMigrator) UpdateTenants(ctx context.Context, class *models.Class, updates []*UpdateTenantPayload) (func(bool), error) {
	ret := _m.Called(ctx, class, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTenants")
	}

	var r0 func(bool)
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Class, []*UpdateTenantPayload) (func(bool), error)); ok {
		return rf(ctx, class, updates)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Class, []*UpdateTenantPayload) func(bool)); ok {
		r0 = rf(ctx, class, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(bool))
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Class, []*UpdateTenantPayload) error); ok {
		r1 = rf(ctx, class, updates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMigrator_UpdateTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTenants'
type MockMigrator_UpdateTenants_Call struct {
	*mock.Call
}

// UpdateTenants is a helper method to define mock.On call
//   - ctx context.Context
//   - class *models.Class
//   - updates []*UpdateTenantPayload
func (_e *MockMigrator_Expecter) UpdateTenants(ctx interface{}, class interface{}, updates interface{}) *MockMigrator_UpdateTenants_Call {
	return &MockMigrator_UpdateTenants_Call{Call: _e.mock.On("UpdateTenants", ctx, class, updates)}
}

func (_c *MockMigrator_UpdateTenants_Call) Run(run func(ctx context.Context, class *models.Class, updates []*UpdateTenantPayload)) *MockMigrator_UpdateTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Class), args[2].([]*UpdateTenantPayload))
	})
	return _c
}

func (_c *MockMigrator_UpdateTenants_Call) Return(commit func(bool), err error) *MockMigrator_UpdateTenants_Call {
	_c.Call.Return(commit, err)
	return _c
}

func (_c *MockMigrator_UpdateTenants_Call) RunAndReturn(run func(context.Context, *models.Class, []*UpdateTenantPayload) (func(bool), error)) *MockMigrator_UpdateTenants_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVectorIndexConfig provides a mock function with given fields: ctx, className, updated
func (_m *MockMigrator) UpdateVectorIndexConfig(ctx context.Context, className string, updated schema.VectorIndexConfig) error {
	ret := _m.Called(ctx, className, updated)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVectorIndexConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, schema.VectorIndexConfig) error); ok {
		r0 = rf(ctx, className, updated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_UpdateVectorIndexConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVectorIndexConfig'
type MockMigrator_UpdateVectorIndexConfig_Call struct {
	*mock.Call
}

// UpdateVectorIndexConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - updated schema.VectorIndexConfig
func (_e *MockMigrator_Expecter) UpdateVectorIndexConfig(ctx interface{}, className interface{}, updated interface{}) *MockMigrator_UpdateVectorIndexConfig_Call {
	return &MockMigrator_UpdateVectorIndexConfig_Call{Call: _e.mock.On("UpdateVectorIndexConfig", ctx, className, updated)}
}

func (_c *MockMigrator_UpdateVectorIndexConfig_Call) Run(run func(ctx context.Context, className string, updated schema.VectorIndexConfig)) *MockMigrator_UpdateVectorIndexConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(schema.VectorIndexConfig))
	})
	return _c
}

func (_c *MockMigrator_UpdateVectorIndexConfig_Call) Return(_a0 error) *MockMigrator_UpdateVectorIndexConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_UpdateVectorIndexConfig_Call) RunAndReturn(run func(context.Context, string, schema.VectorIndexConfig) error) *MockMigrator_UpdateVectorIndexConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVectorIndexConfigs provides a mock function with given fields: ctx, className, updated
func (_m *MockMigrator) UpdateVectorIndexConfigs(ctx context.Context, className string, updated map[string]schema.VectorIndexConfig) error {
	ret := _m.Called(ctx, className, updated)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVectorIndexConfigs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]schema.VectorIndexConfig) error); ok {
		r0 = rf(ctx, className, updated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_UpdateVectorIndexConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVectorIndexConfigs'
type MockMigrator_UpdateVectorIndexConfigs_Call struct {
	*mock.Call
}

// UpdateVectorIndexConfigs is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - updated map[string]schema.VectorIndexConfig
func (_e *MockMigrator_Expecter) UpdateVectorIndexConfigs(ctx interface{}, className interface{}, updated interface{}) *MockMigrator_UpdateVectorIndexConfigs_Call {
	return &MockMigrator_UpdateVectorIndexConfigs_Call{Call: _e.mock.On("UpdateVectorIndexConfigs", ctx, className, updated)}
}

func (_c *MockMigrator_UpdateVectorIndexConfigs_Call) Run(run func(ctx context.Context, className string, updated map[string]schema.VectorIndexConfig)) *MockMigrator_UpdateVectorIndexConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]schema.VectorIndexConfig))
	})
	return _c
}

func (_c *MockMigrator_UpdateVectorIndexConfigs_Call) Return(_a0 error) *MockMigrator_UpdateVectorIndexConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_UpdateVectorIndexConfigs_Call) RunAndReturn(run func(context.Context, string, map[string]schema.VectorIndexConfig) error) *MockMigrator_UpdateVectorIndexConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateInvertedIndexConfigUpdate provides a mock function with given fields: ctx, old, updated
func (_m *MockMigrator) ValidateInvertedIndexConfigUpdate(ctx context.Context, old *models.InvertedIndexConfig, updated *models.InvertedIndexConfig) error {
	ret := _m.Called(ctx, old, updated)

	if len(ret) == 0 {
		panic("no return value specified for ValidateInvertedIndexConfigUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.InvertedIndexConfig, *models.InvertedIndexConfig) error); ok {
		r0 = rf(ctx, old, updated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_ValidateInvertedIndexConfigUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateInvertedIndexConfigUpdate'
type MockMigrator_ValidateInvertedIndexConfigUpdate_Call struct {
	*mock.Call
}

// ValidateInvertedIndexConfigUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - old *models.InvertedIndexConfig
//   - updated *models.InvertedIndexConfig
func (_e *MockMigrator_Expecter) ValidateInvertedIndexConfigUpdate(ctx interface{}, old interface{}, updated interface{}) *MockMigrator_ValidateInvertedIndexConfigUpdate_Call {
	return &MockMigrator_ValidateInvertedIndexConfigUpdate_Call{Call: _e.mock.On("ValidateInvertedIndexConfigUpdate", ctx, old, updated)}
}

func (_c *MockMigrator_ValidateInvertedIndexConfigUpdate_Call) Run(run func(ctx context.Context, old *models.InvertedIndexConfig, updated *models.InvertedIndexConfig)) *MockMigrator_ValidateInvertedIndexConfigUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.InvertedIndexConfig), args[2].(*models.InvertedIndexConfig))
	})
	return _c
}

func (_c *MockMigrator_ValidateInvertedIndexConfigUpdate_Call) Return(_a0 error) *MockMigrator_ValidateInvertedIndexConfigUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_ValidateInvertedIndexConfigUpdate_Call) RunAndReturn(run func(context.Context, *models.InvertedIndexConfig, *models.InvertedIndexConfig) error) *MockMigrator_ValidateInvertedIndexConfigUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateVectorIndexConfigUpdate provides a mock function with given fields: ctx, old, updated
func (_m *MockMigrator) ValidateVectorIndexConfigUpdate(ctx context.Context, old schema.VectorIndexConfig, updated schema.VectorIndexConfig) error {
	ret := _m.Called(ctx, old, updated)

	if len(ret) == 0 {
		panic("no return value specified for ValidateVectorIndexConfigUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.VectorIndexConfig, schema.VectorIndexConfig) error); ok {
		r0 = rf(ctx, old, updated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_ValidateVectorIndexConfigUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateVectorIndexConfigUpdate'
type MockMigrator_ValidateVectorIndexConfigUpdate_Call struct {
	*mock.Call
}

// ValidateVectorIndexConfigUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - old schema.VectorIndexConfig
//   - updated schema.VectorIndexConfig
func (_e *MockMigrator_Expecter) ValidateVectorIndexConfigUpdate(ctx interface{}, old interface{}, updated interface{}) *MockMigrator_ValidateVectorIndexConfigUpdate_Call {
	return &MockMigrator_ValidateVectorIndexConfigUpdate_Call{Call: _e.mock.On("ValidateVectorIndexConfigUpdate", ctx, old, updated)}
}

func (_c *MockMigrator_ValidateVectorIndexConfigUpdate_Call) Run(run func(ctx context.Context, old schema.VectorIndexConfig, updated schema.VectorIndexConfig)) *MockMigrator_ValidateVectorIndexConfigUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(schema.VectorIndexConfig), args[2].(schema.VectorIndexConfig))
	})
	return _c
}

func (_c *MockMigrator_ValidateVectorIndexConfigUpdate_Call) Return(_a0 error) *MockMigrator_ValidateVectorIndexConfigUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_ValidateVectorIndexConfigUpdate_Call) RunAndReturn(run func(context.Context, schema.VectorIndexConfig, schema.VectorIndexConfig) error) *MockMigrator_ValidateVectorIndexConfigUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateVectorIndexConfigsUpdate provides a mock function with given fields: ctx, old, updated
func (_m *MockMigrator) ValidateVectorIndexConfigsUpdate(ctx context.Context, old map[string]schema.VectorIndexConfig, updated map[string]schema.VectorIndexConfig) error {
	ret := _m.Called(ctx, old, updated)

	if len(ret) == 0 {
		panic("no return value specified for ValidateVectorIndexConfigsUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]schema.VectorIndexConfig, map[string]schema.VectorIndexConfig) error); ok {
		r0 = rf(ctx, old, updated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_ValidateVectorIndexConfigsUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateVectorIndexConfigsUpdate'
type MockMigrator_ValidateVectorIndexConfigsUpdate_Call struct {
	*mock.Call
}

// ValidateVectorIndexConfigsUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - old map[string]schema.VectorIndexConfig
//   - updated map[string]schema.VectorIndexConfig
func (_e *MockMigrator_Expecter) ValidateVectorIndexConfigsUpdate(ctx interface{}, old interface{}, updated interface{}) *MockMigrator_ValidateVectorIndexConfigsUpdate_Call {
	return &MockMigrator_ValidateVectorIndexConfigsUpdate_Call{Call: _e.mock.On("ValidateVectorIndexConfigsUpdate", ctx, old, updated)}
}

func (_c *MockMigrator_ValidateVectorIndexConfigsUpdate_Call) Run(run func(ctx context.Context, old map[string]schema.VectorIndexConfig, updated map[string]schema.VectorIndexConfig)) *MockMigrator_ValidateVectorIndexConfigsUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]schema.VectorIndexConfig), args[2].(map[string]schema.VectorIndexConfig))
	})
	return _c
}

func (_c *MockMigrator_ValidateVectorIndexConfigsUpdate_Call) Return(_a0 error) *MockMigrator_ValidateVectorIndexConfigsUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_ValidateVectorIndexConfigsUpdate_Call) RunAndReturn(run func(context.Context, map[string]schema.VectorIndexConfig, map[string]schema.VectorIndexConfig) error) *MockMigrator_ValidateVectorIndexConfigsUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMigrator creates a new instance of MockMigrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMigrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMigrator {
	mock := &MockMigrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
