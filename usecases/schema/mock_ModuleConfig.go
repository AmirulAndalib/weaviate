//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package schema

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"
)

// MockModuleConfig is an autogenerated mock type for the ModuleConfig type
type MockModuleConfig struct {
	mock.Mock
}

type MockModuleConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModuleConfig) EXPECT() *MockModuleConfig_Expecter {
	return &MockModuleConfig_Expecter{mock: &_m.Mock}
}

// SetClassDefaults provides a mock function with given fields: class
func (_m *MockModuleConfig) SetClassDefaults(class *models.Class) {
	_m.Called(class)
}

// MockModuleConfig_SetClassDefaults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetClassDefaults'
type MockModuleConfig_SetClassDefaults_Call struct {
	*mock.Call
}

// SetClassDefaults is a helper method to define mock.On call
//   - class *models.Class
func (_e *MockModuleConfig_Expecter) SetClassDefaults(class interface{}) *MockModuleConfig_SetClassDefaults_Call {
	return &MockModuleConfig_SetClassDefaults_Call{Call: _e.mock.On("SetClassDefaults", class)}
}

func (_c *MockModuleConfig_SetClassDefaults_Call) Run(run func(class *models.Class)) *MockModuleConfig_SetClassDefaults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Class))
	})
	return _c
}

func (_c *MockModuleConfig_SetClassDefaults_Call) Return() *MockModuleConfig_SetClassDefaults_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockModuleConfig_SetClassDefaults_Call) RunAndReturn(run func(*models.Class)) *MockModuleConfig_SetClassDefaults_Call {
	_c.Call.Return(run)
	return _c
}

// SetSinglePropertyDefaults provides a mock function with given fields: class, prop
func (_m *MockModuleConfig) SetSinglePropertyDefaults(class *models.Class, prop *models.Property) {
	_m.Called(class, prop)
}

// MockModuleConfig_SetSinglePropertyDefaults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSinglePropertyDefaults'
type MockModuleConfig_SetSinglePropertyDefaults_Call struct {
	*mock.Call
}

// SetSinglePropertyDefaults is a helper method to define mock.On call
//   - class *models.Class
//   - prop *models.Property
func (_e *MockModuleConfig_Expecter) SetSinglePropertyDefaults(class interface{}, prop interface{}) *MockModuleConfig_SetSinglePropertyDefaults_Call {
	return &MockModuleConfig_SetSinglePropertyDefaults_Call{Call: _e.mock.On("SetSinglePropertyDefaults", class, prop)}
}

func (_c *MockModuleConfig_SetSinglePropertyDefaults_Call) Run(run func(class *models.Class, prop *models.Property)) *MockModuleConfig_SetSinglePropertyDefaults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Class), args[1].(*models.Property))
	})
	return _c
}

func (_c *MockModuleConfig_SetSinglePropertyDefaults_Call) Return() *MockModuleConfig_SetSinglePropertyDefaults_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockModuleConfig_SetSinglePropertyDefaults_Call) RunAndReturn(run func(*models.Class, *models.Property)) *MockModuleConfig_SetSinglePropertyDefaults_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateClass provides a mock function with given fields: ctx, class
func (_m *MockModuleConfig) ValidateClass(ctx context.Context, class *models.Class) error {
	ret := _m.Called(ctx, class)

	if len(ret) == 0 {
		panic("no return value specified for ValidateClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Class) error); ok {
		r0 = rf(ctx, class)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModuleConfig_ValidateClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateClass'
type MockModuleConfig_ValidateClass_Call struct {
	*mock.Call
}

// ValidateClass is a helper method to define mock.On call
//   - ctx context.Context
//   - class *models.Class
func (_e *MockModuleConfig_Expecter) ValidateClass(ctx interface{}, class interface{}) *MockModuleConfig_ValidateClass_Call {
	return &MockModuleConfig_ValidateClass_Call{Call: _e.mock.On("ValidateClass", ctx, class)}
}

func (_c *MockModuleConfig_ValidateClass_Call) Run(run func(ctx context.Context, class *models.Class)) *MockModuleConfig_ValidateClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Class))
	})
	return _c
}

func (_c *MockModuleConfig_ValidateClass_Call) Return(_a0 error) *MockModuleConfig_ValidateClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModuleConfig_ValidateClass_Call) RunAndReturn(run func(context.Context, *models.Class) error) *MockModuleConfig_ValidateClass_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModuleConfig creates a new instance of MockModuleConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModuleConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModuleConfig {
	mock := &MockModuleConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
