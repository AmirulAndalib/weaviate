//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package schema

import (
	mock "github.com/stretchr/testify/mock"
	entitiesschema "github.com/weaviate/weaviate/entities/schema"
)

// MockVectorConfigParser is an autogenerated mock type for the VectorConfigParser type
type MockVectorConfigParser struct {
	mock.Mock
}

type MockVectorConfigParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVectorConfigParser) EXPECT() *MockVectorConfigParser_Expecter {
	return &MockVectorConfigParser_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: in, vectorIndexType
func (_m *MockVectorConfigParser) Execute(in interface{}, vectorIndexType string) (entitiesschema.VectorIndexConfig, error) {
	ret := _m.Called(in, vectorIndexType)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 entitiesschema.VectorIndexConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string) (entitiesschema.VectorIndexConfig, error)); ok {
		return rf(in, vectorIndexType)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string) entitiesschema.VectorIndexConfig); ok {
		r0 = rf(in, vectorIndexType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entitiesschema.VectorIndexConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string) error); ok {
		r1 = rf(in, vectorIndexType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorConfigParser_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockVectorConfigParser_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - in interface{}
//   - vectorIndexType string
func (_e *MockVectorConfigParser_Expecter) Execute(in interface{}, vectorIndexType interface{}) *MockVectorConfigParser_Execute_Call {
	return &MockVectorConfigParser_Execute_Call{Call: _e.mock.On("Execute", in, vectorIndexType)}
}

func (_c *MockVectorConfigParser_Execute_Call) Run(run func(in interface{}, vectorIndexType string)) *MockVectorConfigParser_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(string))
	})
	return _c
}

func (_c *MockVectorConfigParser_Execute_Call) Return(_a0 entitiesschema.VectorIndexConfig, _a1 error) *MockVectorConfigParser_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorConfigParser_Execute_Call) RunAndReturn(run func(interface{}, string) (entitiesschema.VectorIndexConfig, error)) *MockVectorConfigParser_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVectorConfigParser creates a new instance of MockVectorConfigParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVectorConfigParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVectorConfigParser {
	mock := &MockVectorConfigParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
