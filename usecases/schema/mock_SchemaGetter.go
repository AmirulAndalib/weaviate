//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package schema

import (
	mock "github.com/stretchr/testify/mock"
	entitiesschema "github.com/weaviate/weaviate/entities/schema"

	sharding "github.com/weaviate/weaviate/usecases/sharding"
)

// MockSchemaGetter is an autogenerated mock type for the SchemaGetter type
type MockSchemaGetter struct {
	mock.Mock
}

type MockSchemaGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSchemaGetter) EXPECT() *MockSchemaGetter_Expecter {
	return &MockSchemaGetter_Expecter{mock: &_m.Mock}
}

// ClusterHealthScore provides a mock function with given fields:
func (_m *MockSchemaGetter) ClusterHealthScore() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClusterHealthScore")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockSchemaGetter_ClusterHealthScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterHealthScore'
type MockSchemaGetter_ClusterHealthScore_Call struct {
	*mock.Call
}

// ClusterHealthScore is a helper method to define mock.On call
func (_e *MockSchemaGetter_Expecter) ClusterHealthScore() *MockSchemaGetter_ClusterHealthScore_Call {
	return &MockSchemaGetter_ClusterHealthScore_Call{Call: _e.mock.On("ClusterHealthScore")}
}

func (_c *MockSchemaGetter_ClusterHealthScore_Call) Run(run func()) *MockSchemaGetter_ClusterHealthScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchemaGetter_ClusterHealthScore_Call) Return(_a0 int) *MockSchemaGetter_ClusterHealthScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaGetter_ClusterHealthScore_Call) RunAndReturn(run func() int) *MockSchemaGetter_ClusterHealthScore_Call {
	_c.Call.Return(run)
	return _c
}

// CopyShardingState provides a mock function with given fields: class
func (_m *MockSchemaGetter) CopyShardingState(class string) *sharding.State {
	ret := _m.Called(class)

	if len(ret) == 0 {
		panic("no return value specified for CopyShardingState")
	}

	var r0 *sharding.State
	if rf, ok := ret.Get(0).(func(string) *sharding.State); ok {
		r0 = rf(class)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sharding.State)
		}
	}

	return r0
}

// MockSchemaGetter_CopyShardingState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyShardingState'
type MockSchemaGetter_CopyShardingState_Call struct {
	*mock.Call
}

// CopyShardingState is a helper method to define mock.On call
//   - class string
func (_e *MockSchemaGetter_Expecter) CopyShardingState(class interface{}) *MockSchemaGetter_CopyShardingState_Call {
	return &MockSchemaGetter_CopyShardingState_Call{Call: _e.mock.On("CopyShardingState", class)}
}

func (_c *MockSchemaGetter_CopyShardingState_Call) Run(run func(class string)) *MockSchemaGetter_CopyShardingState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSchemaGetter_CopyShardingState_Call) Return(_a0 *sharding.State) *MockSchemaGetter_CopyShardingState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaGetter_CopyShardingState_Call) RunAndReturn(run func(string) *sharding.State) *MockSchemaGetter_CopyShardingState_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchemaSkipAuth provides a mock function with given fields:
func (_m *MockSchemaGetter) GetSchemaSkipAuth() entitiesschema.Schema {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSchemaSkipAuth")
	}

	var r0 entitiesschema.Schema
	if rf, ok := ret.Get(0).(func() entitiesschema.Schema); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entitiesschema.Schema)
	}

	return r0
}

// MockSchemaGetter_GetSchemaSkipAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchemaSkipAuth'
type MockSchemaGetter_GetSchemaSkipAuth_Call struct {
	*mock.Call
}

// GetSchemaSkipAuth is a helper method to define mock.On call
func (_e *MockSchemaGetter_Expecter) GetSchemaSkipAuth() *MockSchemaGetter_GetSchemaSkipAuth_Call {
	return &MockSchemaGetter_GetSchemaSkipAuth_Call{Call: _e.mock.On("GetSchemaSkipAuth")}
}

func (_c *MockSchemaGetter_GetSchemaSkipAuth_Call) Run(run func()) *MockSchemaGetter_GetSchemaSkipAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchemaGetter_GetSchemaSkipAuth_Call) Return(_a0 entitiesschema.Schema) *MockSchemaGetter_GetSchemaSkipAuth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaGetter_GetSchemaSkipAuth_Call) RunAndReturn(run func() entitiesschema.Schema) *MockSchemaGetter_GetSchemaSkipAuth_Call {
	_c.Call.Return(run)
	return _c
}

// NodeName provides a mock function with given fields:
func (_m *MockSchemaGetter) NodeName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSchemaGetter_NodeName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeName'
type MockSchemaGetter_NodeName_Call struct {
	*mock.Call
}

// NodeName is a helper method to define mock.On call
func (_e *MockSchemaGetter_Expecter) NodeName() *MockSchemaGetter_NodeName_Call {
	return &MockSchemaGetter_NodeName_Call{Call: _e.mock.On("NodeName")}
}

func (_c *MockSchemaGetter_NodeName_Call) Run(run func()) *MockSchemaGetter_NodeName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchemaGetter_NodeName_Call) Return(_a0 string) *MockSchemaGetter_NodeName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaGetter_NodeName_Call) RunAndReturn(run func() string) *MockSchemaGetter_NodeName_Call {
	_c.Call.Return(run)
	return _c
}

// Nodes provides a mock function with given fields:
func (_m *MockSchemaGetter) Nodes() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Nodes")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockSchemaGetter_Nodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nodes'
type MockSchemaGetter_Nodes_Call struct {
	*mock.Call
}

// Nodes is a helper method to define mock.On call
func (_e *MockSchemaGetter_Expecter) Nodes() *MockSchemaGetter_Nodes_Call {
	return &MockSchemaGetter_Nodes_Call{Call: _e.mock.On("Nodes")}
}

func (_c *MockSchemaGetter_Nodes_Call) Run(run func()) *MockSchemaGetter_Nodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchemaGetter_Nodes_Call) Return(_a0 []string) *MockSchemaGetter_Nodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaGetter_Nodes_Call) RunAndReturn(run func() []string) *MockSchemaGetter_Nodes_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveParentNodes provides a mock function with given fields: _a0, _a1
func (_m *MockSchemaGetter) ResolveParentNodes(_a0 string, _a1 string) (map[string]string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ResolveParentNodes")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string]string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchemaGetter_ResolveParentNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveParentNodes'
type MockSchemaGetter_ResolveParentNodes_Call struct {
	*mock.Call
}

// ResolveParentNodes is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *MockSchemaGetter_Expecter) ResolveParentNodes(_a0 interface{}, _a1 interface{}) *MockSchemaGetter_ResolveParentNodes_Call {
	return &MockSchemaGetter_ResolveParentNodes_Call{Call: _e.mock.On("ResolveParentNodes", _a0, _a1)}
}

func (_c *MockSchemaGetter_ResolveParentNodes_Call) Run(run func(_a0 string, _a1 string)) *MockSchemaGetter_ResolveParentNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockSchemaGetter_ResolveParentNodes_Call) Return(_a0 map[string]string, _a1 error) *MockSchemaGetter_ResolveParentNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemaGetter_ResolveParentNodes_Call) RunAndReturn(run func(string, string) (map[string]string, error)) *MockSchemaGetter_ResolveParentNodes_Call {
	_c.Call.Return(run)
	return _c
}

// ShardFromUUID provides a mock function with given fields: class, uuid
func (_m *MockSchemaGetter) ShardFromUUID(class string, uuid []byte) string {
	ret := _m.Called(class, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ShardFromUUID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []byte) string); ok {
		r0 = rf(class, uuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSchemaGetter_ShardFromUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShardFromUUID'
type MockSchemaGetter_ShardFromUUID_Call struct {
	*mock.Call
}

// ShardFromUUID is a helper method to define mock.On call
//   - class string
//   - uuid []byte
func (_e *MockSchemaGetter_Expecter) ShardFromUUID(class interface{}, uuid interface{}) *MockSchemaGetter_ShardFromUUID_Call {
	return &MockSchemaGetter_ShardFromUUID_Call{Call: _e.mock.On("ShardFromUUID", class, uuid)}
}

func (_c *MockSchemaGetter_ShardFromUUID_Call) Run(run func(class string, uuid []byte)) *MockSchemaGetter_ShardFromUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockSchemaGetter_ShardFromUUID_Call) Return(_a0 string) *MockSchemaGetter_ShardFromUUID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchemaGetter_ShardFromUUID_Call) RunAndReturn(run func(string, []byte) string) *MockSchemaGetter_ShardFromUUID_Call {
	_c.Call.Return(run)
	return _c
}

// ShardOwner provides a mock function with given fields: class, shard
func (_m *MockSchemaGetter) ShardOwner(class string, shard string) (string, error) {
	ret := _m.Called(class, shard)

	if len(ret) == 0 {
		panic("no return value specified for ShardOwner")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(class, shard)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(class, shard)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(class, shard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchemaGetter_ShardOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShardOwner'
type MockSchemaGetter_ShardOwner_Call struct {
	*mock.Call
}

// ShardOwner is a helper method to define mock.On call
//   - class string
//   - shard string
func (_e *MockSchemaGetter_Expecter) ShardOwner(class interface{}, shard interface{}) *MockSchemaGetter_ShardOwner_Call {
	return &MockSchemaGetter_ShardOwner_Call{Call: _e.mock.On("ShardOwner", class, shard)}
}

func (_c *MockSchemaGetter_ShardOwner_Call) Run(run func(class string, shard string)) *MockSchemaGetter_ShardOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockSchemaGetter_ShardOwner_Call) Return(_a0 string, _a1 error) *MockSchemaGetter_ShardOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemaGetter_ShardOwner_Call) RunAndReturn(run func(string, string) (string, error)) *MockSchemaGetter_ShardOwner_Call {
	_c.Call.Return(run)
	return _c
}

// ShardReplicas provides a mock function with given fields: class, shard
func (_m *MockSchemaGetter) ShardReplicas(class string, shard string) ([]string, error) {
	ret := _m.Called(class, shard)

	if len(ret) == 0 {
		panic("no return value specified for ShardReplicas")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return rf(class, shard)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(class, shard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(class, shard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchemaGetter_ShardReplicas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShardReplicas'
type MockSchemaGetter_ShardReplicas_Call struct {
	*mock.Call
}

// ShardReplicas is a helper method to define mock.On call
//   - class string
//   - shard string
func (_e *MockSchemaGetter_Expecter) ShardReplicas(class interface{}, shard interface{}) *MockSchemaGetter_ShardReplicas_Call {
	return &MockSchemaGetter_ShardReplicas_Call{Call: _e.mock.On("ShardReplicas", class, shard)}
}

func (_c *MockSchemaGetter_ShardReplicas_Call) Run(run func(class string, shard string)) *MockSchemaGetter_ShardReplicas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockSchemaGetter_ShardReplicas_Call) Return(_a0 []string, _a1 error) *MockSchemaGetter_ShardReplicas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemaGetter_ShardReplicas_Call) RunAndReturn(run func(string, string) ([]string, error)) *MockSchemaGetter_ShardReplicas_Call {
	_c.Call.Return(run)
	return _c
}

// TenantShard provides a mock function with given fields: class, tenant
func (_m *MockSchemaGetter) TenantShard(class string, tenant string) (string, string) {
	ret := _m.Called(class, tenant)

	if len(ret) == 0 {
		panic("no return value specified for TenantShard")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func(string, string) (string, string)); ok {
		return rf(class, tenant)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(class, tenant)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(class, tenant)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// MockSchemaGetter_TenantShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TenantShard'
type MockSchemaGetter_TenantShard_Call struct {
	*mock.Call
}

// TenantShard is a helper method to define mock.On call
//   - class string
//   - tenant string
func (_e *MockSchemaGetter_Expecter) TenantShard(class interface{}, tenant interface{}) *MockSchemaGetter_TenantShard_Call {
	return &MockSchemaGetter_TenantShard_Call{Call: _e.mock.On("TenantShard", class, tenant)}
}

func (_c *MockSchemaGetter_TenantShard_Call) Run(run func(class string, tenant string)) *MockSchemaGetter_TenantShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockSchemaGetter_TenantShard_Call) Return(_a0 string, _a1 string) *MockSchemaGetter_TenantShard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchemaGetter_TenantShard_Call) RunAndReturn(run func(string, string) (string, string)) *MockSchemaGetter_TenantShard_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSchemaGetter creates a new instance of MockSchemaGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSchemaGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSchemaGetter {
	mock := &MockSchemaGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
