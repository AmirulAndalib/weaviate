//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package objects

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"

	models "github.com/weaviate/weaviate/entities/models"

	moduletools "github.com/weaviate/weaviate/entities/moduletools"

	search "github.com/weaviate/weaviate/entities/search"

	strfmt "github.com/go-openapi/strfmt"
)

// MockModulesProvider is an autogenerated mock type for the ModulesProvider type
type MockModulesProvider struct {
	mock.Mock
}

type MockModulesProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModulesProvider) EXPECT() *MockModulesProvider_Expecter {
	return &MockModulesProvider_Expecter{mock: &_m.Mock}
}

// GetObjectAdditionalExtend provides a mock function with given fields: ctx, in, moduleParams
func (_m *MockModulesProvider) GetObjectAdditionalExtend(ctx context.Context, in *search.Result, moduleParams map[string]interface{}) (*search.Result, error) {
	ret := _m.Called(ctx, in, moduleParams)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectAdditionalExtend")
	}

	var r0 *search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *search.Result, map[string]interface{}) (*search.Result, error)); ok {
		return rf(ctx, in, moduleParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *search.Result, map[string]interface{}) *search.Result); ok {
		r0 = rf(ctx, in, moduleParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *search.Result, map[string]interface{}) error); ok {
		r1 = rf(ctx, in, moduleParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModulesProvider_GetObjectAdditionalExtend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectAdditionalExtend'
type MockModulesProvider_GetObjectAdditionalExtend_Call struct {
	*mock.Call
}

// GetObjectAdditionalExtend is a helper method to define mock.On call
//   - ctx context.Context
//   - in *search.Result
//   - moduleParams map[string]interface{}
func (_e *MockModulesProvider_Expecter) GetObjectAdditionalExtend(ctx interface{}, in interface{}, moduleParams interface{}) *MockModulesProvider_GetObjectAdditionalExtend_Call {
	return &MockModulesProvider_GetObjectAdditionalExtend_Call{Call: _e.mock.On("GetObjectAdditionalExtend", ctx, in, moduleParams)}
}

func (_c *MockModulesProvider_GetObjectAdditionalExtend_Call) Run(run func(ctx context.Context, in *search.Result, moduleParams map[string]interface{})) *MockModulesProvider_GetObjectAdditionalExtend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*search.Result), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockModulesProvider_GetObjectAdditionalExtend_Call) Return(_a0 *search.Result, _a1 error) *MockModulesProvider_GetObjectAdditionalExtend_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModulesProvider_GetObjectAdditionalExtend_Call) RunAndReturn(run func(context.Context, *search.Result, map[string]interface{}) (*search.Result, error)) *MockModulesProvider_GetObjectAdditionalExtend_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjectsAdditionalExtend provides a mock function with given fields: ctx, in, moduleParams
func (_m *MockModulesProvider) ListObjectsAdditionalExtend(ctx context.Context, in search.Results, moduleParams map[string]interface{}) (search.Results, error) {
	ret := _m.Called(ctx, in, moduleParams)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectsAdditionalExtend")
	}

	var r0 search.Results
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, search.Results, map[string]interface{}) (search.Results, error)); ok {
		return rf(ctx, in, moduleParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, search.Results, map[string]interface{}) search.Results); ok {
		r0 = rf(ctx, in, moduleParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(search.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, search.Results, map[string]interface{}) error); ok {
		r1 = rf(ctx, in, moduleParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModulesProvider_ListObjectsAdditionalExtend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjectsAdditionalExtend'
type MockModulesProvider_ListObjectsAdditionalExtend_Call struct {
	*mock.Call
}

// ListObjectsAdditionalExtend is a helper method to define mock.On call
//   - ctx context.Context
//   - in search.Results
//   - moduleParams map[string]interface{}
func (_e *MockModulesProvider_Expecter) ListObjectsAdditionalExtend(ctx interface{}, in interface{}, moduleParams interface{}) *MockModulesProvider_ListObjectsAdditionalExtend_Call {
	return &MockModulesProvider_ListObjectsAdditionalExtend_Call{Call: _e.mock.On("ListObjectsAdditionalExtend", ctx, in, moduleParams)}
}

func (_c *MockModulesProvider_ListObjectsAdditionalExtend_Call) Run(run func(ctx context.Context, in search.Results, moduleParams map[string]interface{})) *MockModulesProvider_ListObjectsAdditionalExtend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(search.Results), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockModulesProvider_ListObjectsAdditionalExtend_Call) Return(_a0 search.Results, _a1 error) *MockModulesProvider_ListObjectsAdditionalExtend_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModulesProvider_ListObjectsAdditionalExtend_Call) RunAndReturn(run func(context.Context, search.Results, map[string]interface{}) (search.Results, error)) *MockModulesProvider_ListObjectsAdditionalExtend_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVector provides a mock function with given fields: ctx, object, class, compFactory, repo, logger
func (_m *MockModulesProvider) UpdateVector(ctx context.Context, object *models.Object, class *models.Class, compFactory moduletools.PropsComparatorFactory, repo func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, string) (*search.Result, error), logger logrus.FieldLogger) error {
	ret := _m.Called(ctx, object, class, compFactory, repo, logger)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVector")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Object, *models.Class, moduletools.PropsComparatorFactory, func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, string) (*search.Result, error), logrus.FieldLogger) error); ok {
		r0 = rf(ctx, object, class, compFactory, repo, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModulesProvider_UpdateVector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVector'
type MockModulesProvider_UpdateVector_Call struct {
	*mock.Call
}

// UpdateVector is a helper method to define mock.On call
//   - ctx context.Context
//   - object *models.Object
//   - class *models.Class
//   - compFactory moduletools.PropsComparatorFactory
//   - repo func(context.Context , string , strfmt.UUID , search.SelectProperties , additional.Properties , string)(*search.Result , error)
//   - logger logrus.FieldLogger
func (_e *MockModulesProvider_Expecter) UpdateVector(ctx interface{}, object interface{}, class interface{}, compFactory interface{}, repo interface{}, logger interface{}) *MockModulesProvider_UpdateVector_Call {
	return &MockModulesProvider_UpdateVector_Call{Call: _e.mock.On("UpdateVector", ctx, object, class, compFactory, repo, logger)}
}

func (_c *MockModulesProvider_UpdateVector_Call) Run(run func(ctx context.Context, object *models.Object, class *models.Class, compFactory moduletools.PropsComparatorFactory, repo func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, string) (*search.Result, error), logger logrus.FieldLogger)) *MockModulesProvider_UpdateVector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Object), args[2].(*models.Class), args[3].(moduletools.PropsComparatorFactory), args[4].(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, string) (*search.Result, error)), args[5].(logrus.FieldLogger))
	})
	return _c
}

func (_c *MockModulesProvider_UpdateVector_Call) Return(_a0 error) *MockModulesProvider_UpdateVector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_UpdateVector_Call) RunAndReturn(run func(context.Context, *models.Object, *models.Class, moduletools.PropsComparatorFactory, func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, string) (*search.Result, error), logrus.FieldLogger) error) *MockModulesProvider_UpdateVector_Call {
	_c.Call.Return(run)
	return _c
}

// UsingRef2Vec provides a mock function with given fields: className
func (_m *MockModulesProvider) UsingRef2Vec(className string) bool {
	ret := _m.Called(className)

	if len(ret) == 0 {
		panic("no return value specified for UsingRef2Vec")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(className)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockModulesProvider_UsingRef2Vec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UsingRef2Vec'
type MockModulesProvider_UsingRef2Vec_Call struct {
	*mock.Call
}

// UsingRef2Vec is a helper method to define mock.On call
//   - className string
func (_e *MockModulesProvider_Expecter) UsingRef2Vec(className interface{}) *MockModulesProvider_UsingRef2Vec_Call {
	return &MockModulesProvider_UsingRef2Vec_Call{Call: _e.mock.On("UsingRef2Vec", className)}
}

func (_c *MockModulesProvider_UsingRef2Vec_Call) Run(run func(className string)) *MockModulesProvider_UsingRef2Vec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockModulesProvider_UsingRef2Vec_Call) Return(_a0 bool) *MockModulesProvider_UsingRef2Vec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModulesProvider_UsingRef2Vec_Call) RunAndReturn(run func(string) bool) *MockModulesProvider_UsingRef2Vec_Call {
	_c.Call.Return(run)
	return _c
}

// VectorizerName provides a mock function with given fields: className
func (_m *MockModulesProvider) VectorizerName(className string) (string, error) {
	ret := _m.Called(className)

	if len(ret) == 0 {
		panic("no return value specified for VectorizerName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(className)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(className)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(className)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModulesProvider_VectorizerName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VectorizerName'
type MockModulesProvider_VectorizerName_Call struct {
	*mock.Call
}

// VectorizerName is a helper method to define mock.On call
//   - className string
func (_e *MockModulesProvider_Expecter) VectorizerName(className interface{}) *MockModulesProvider_VectorizerName_Call {
	return &MockModulesProvider_VectorizerName_Call{Call: _e.mock.On("VectorizerName", className)}
}

func (_c *MockModulesProvider_VectorizerName_Call) Run(run func(className string)) *MockModulesProvider_VectorizerName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockModulesProvider_VectorizerName_Call) Return(_a0 string, _a1 error) *MockModulesProvider_VectorizerName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModulesProvider_VectorizerName_Call) RunAndReturn(run func(string) (string, error)) *MockModulesProvider_VectorizerName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModulesProvider creates a new instance of MockModulesProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModulesProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModulesProvider {
	mock := &MockModulesProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
