//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package validation

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	mock "github.com/stretchr/testify/mock"

	strfmt "github.com/go-openapi/strfmt"
)

// Mockexists is an autogenerated mock type for the exists type
type Mockexists struct {
	mock.Mock
}

type Mockexists_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockexists) EXPECT() *Mockexists_Expecter {
	return &Mockexists_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, class, _a2, _a3, _a4
func (_m *Mockexists) Execute(_a0 context.Context, class string, _a2 strfmt.UUID, _a3 *additional.ReplicationProperties, _a4 string) (bool, error) {
	ret := _m.Called(_a0, class, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) (bool, error)); ok {
		return rf(_a0, class, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) bool); ok {
		r0 = rf(_a0, class, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) error); ok {
		r1 = rf(_a0, class, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockexists_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Mockexists_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - class string
//   - _a2 strfmt.UUID
//   - _a3 *additional.ReplicationProperties
//   - _a4 string
func (_e *Mockexists_Expecter) Execute(_a0 interface{}, class interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *Mockexists_Execute_Call {
	return &Mockexists_Execute_Call{Call: _e.mock.On("Execute", _a0, class, _a2, _a3, _a4)}
}

func (_c *Mockexists_Execute_Call) Run(run func(_a0 context.Context, class string, _a2 strfmt.UUID, _a3 *additional.ReplicationProperties, _a4 string)) *Mockexists_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID), args[3].(*additional.ReplicationProperties), args[4].(string))
	})
	return _c
}

func (_c *Mockexists_Execute_Call) Return(_a0 bool, _a1 error) *Mockexists_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockexists_Execute_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) (bool, error)) *Mockexists_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockexists creates a new instance of Mockexists. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockexists(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockexists {
	mock := &Mockexists{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
