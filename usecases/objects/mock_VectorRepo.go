//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package objects

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	crossref "github.com/weaviate/weaviate/entities/schema/crossref"

	filters "github.com/weaviate/weaviate/entities/filters"

	mock "github.com/stretchr/testify/mock"

	models "github.com/weaviate/weaviate/entities/models"

	search "github.com/weaviate/weaviate/entities/search"

	strfmt "github.com/go-openapi/strfmt"
)

// MockVectorRepo is an autogenerated mock type for the VectorRepo type
type MockVectorRepo struct {
	mock.Mock
}

type MockVectorRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVectorRepo) EXPECT() *MockVectorRepo_Expecter {
	return &MockVectorRepo_Expecter{mock: &_m.Mock}
}

// AddReference provides a mock function with given fields: ctx, source, target, repl, tenant
func (_m *MockVectorRepo) AddReference(ctx context.Context, source *crossref.RefSource, target *crossref.Ref, repl *additional.ReplicationProperties, tenant string) error {
	ret := _m.Called(ctx, source, target, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for AddReference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *crossref.RefSource, *crossref.Ref, *additional.ReplicationProperties, string) error); ok {
		r0 = rf(ctx, source, target, repl, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVectorRepo_AddReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReference'
type MockVectorRepo_AddReference_Call struct {
	*mock.Call
}

// AddReference is a helper method to define mock.On call
//   - ctx context.Context
//   - source *crossref.RefSource
//   - target *crossref.Ref
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockVectorRepo_Expecter) AddReference(ctx interface{}, source interface{}, target interface{}, repl interface{}, tenant interface{}) *MockVectorRepo_AddReference_Call {
	return &MockVectorRepo_AddReference_Call{Call: _e.mock.On("AddReference", ctx, source, target, repl, tenant)}
}

func (_c *MockVectorRepo_AddReference_Call) Run(run func(ctx context.Context, source *crossref.RefSource, target *crossref.Ref, repl *additional.ReplicationProperties, tenant string)) *MockVectorRepo_AddReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*crossref.RefSource), args[2].(*crossref.Ref), args[3].(*additional.ReplicationProperties), args[4].(string))
	})
	return _c
}

func (_c *MockVectorRepo_AddReference_Call) Return(_a0 error) *MockVectorRepo_AddReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorRepo_AddReference_Call) RunAndReturn(run func(context.Context, *crossref.RefSource, *crossref.Ref, *additional.ReplicationProperties, string) error) *MockVectorRepo_AddReference_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function with given fields: ctx, className, id, repl, tenant
func (_m *MockVectorRepo) DeleteObject(ctx context.Context, className string, id strfmt.UUID, repl *additional.ReplicationProperties, tenant string) error {
	ret := _m.Called(ctx, className, id, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) error); ok {
		r0 = rf(ctx, className, id, repl, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVectorRepo_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type MockVectorRepo_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - ctx context.Context
//   - className string
//   - id strfmt.UUID
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockVectorRepo_Expecter) DeleteObject(ctx interface{}, className interface{}, id interface{}, repl interface{}, tenant interface{}) *MockVectorRepo_DeleteObject_Call {
	return &MockVectorRepo_DeleteObject_Call{Call: _e.mock.On("DeleteObject", ctx, className, id, repl, tenant)}
}

func (_c *MockVectorRepo_DeleteObject_Call) Run(run func(ctx context.Context, className string, id strfmt.UUID, repl *additional.ReplicationProperties, tenant string)) *MockVectorRepo_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID), args[3].(*additional.ReplicationProperties), args[4].(string))
	})
	return _c
}

func (_c *MockVectorRepo_DeleteObject_Call) Return(_a0 error) *MockVectorRepo_DeleteObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorRepo_DeleteObject_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) error) *MockVectorRepo_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, class, id, repl, tenant
func (_m *MockVectorRepo) Exists(ctx context.Context, class string, id strfmt.UUID, repl *additional.ReplicationProperties, tenant string) (bool, error) {
	ret := _m.Called(ctx, class, id, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) (bool, error)); ok {
		return rf(ctx, class, id, repl, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) bool); ok {
		r0 = rf(ctx, class, id, repl, tenant)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) error); ok {
		r1 = rf(ctx, class, id, repl, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorRepo_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockVectorRepo_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
//   - id strfmt.UUID
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockVectorRepo_Expecter) Exists(ctx interface{}, class interface{}, id interface{}, repl interface{}, tenant interface{}) *MockVectorRepo_Exists_Call {
	return &MockVectorRepo_Exists_Call{Call: _e.mock.On("Exists", ctx, class, id, repl, tenant)}
}

func (_c *MockVectorRepo_Exists_Call) Run(run func(ctx context.Context, class string, id strfmt.UUID, repl *additional.ReplicationProperties, tenant string)) *MockVectorRepo_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID), args[3].(*additional.ReplicationProperties), args[4].(string))
	})
	return _c
}

func (_c *MockVectorRepo_Exists_Call) Return(_a0 bool, _a1 error) *MockVectorRepo_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorRepo_Exists_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID, *additional.ReplicationProperties, string) (bool, error)) *MockVectorRepo_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Merge provides a mock function with given fields: ctx, merge, repl, tenant
func (_m *MockVectorRepo) Merge(ctx context.Context, merge MergeDocument, repl *additional.ReplicationProperties, tenant string) error {
	ret := _m.Called(ctx, merge, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for Merge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, MergeDocument, *additional.ReplicationProperties, string) error); ok {
		r0 = rf(ctx, merge, repl, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVectorRepo_Merge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Merge'
type MockVectorRepo_Merge_Call struct {
	*mock.Call
}

// Merge is a helper method to define mock.On call
//   - ctx context.Context
//   - merge MergeDocument
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockVectorRepo_Expecter) Merge(ctx interface{}, merge interface{}, repl interface{}, tenant interface{}) *MockVectorRepo_Merge_Call {
	return &MockVectorRepo_Merge_Call{Call: _e.mock.On("Merge", ctx, merge, repl, tenant)}
}

func (_c *MockVectorRepo_Merge_Call) Run(run func(ctx context.Context, merge MergeDocument, repl *additional.ReplicationProperties, tenant string)) *MockVectorRepo_Merge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(MergeDocument), args[2].(*additional.ReplicationProperties), args[3].(string))
	})
	return _c
}

func (_c *MockVectorRepo_Merge_Call) Return(_a0 error) *MockVectorRepo_Merge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorRepo_Merge_Call) RunAndReturn(run func(context.Context, MergeDocument, *additional.ReplicationProperties, string) error) *MockVectorRepo_Merge_Call {
	_c.Call.Return(run)
	return _c
}

// Object provides a mock function with given fields: ctx, class, id, props, _a4, repl, tenant
func (_m *MockVectorRepo) Object(ctx context.Context, class string, id strfmt.UUID, props search.SelectProperties, _a4 additional.Properties, repl *additional.ReplicationProperties, tenant string) (*search.Result, error) {
	ret := _m.Called(ctx, class, id, props, _a4, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for Object")
	}

	var r0 *search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) (*search.Result, error)); ok {
		return rf(ctx, class, id, props, _a4, repl, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) *search.Result); ok {
		r0 = rf(ctx, class, id, props, _a4, repl, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) error); ok {
		r1 = rf(ctx, class, id, props, _a4, repl, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorRepo_Object_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Object'
type MockVectorRepo_Object_Call struct {
	*mock.Call
}

// Object is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a4 additional.Properties
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockVectorRepo_Expecter) Object(ctx interface{}, class interface{}, id interface{}, props interface{}, _a4 interface{}, repl interface{}, tenant interface{}) *MockVectorRepo_Object_Call {
	return &MockVectorRepo_Object_Call{Call: _e.mock.On("Object", ctx, class, id, props, _a4, repl, tenant)}
}

func (_c *MockVectorRepo_Object_Call) Run(run func(ctx context.Context, class string, id strfmt.UUID, props search.SelectProperties, _a4 additional.Properties, repl *additional.ReplicationProperties, tenant string)) *MockVectorRepo_Object_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(strfmt.UUID), args[3].(search.SelectProperties), args[4].(additional.Properties), args[5].(*additional.ReplicationProperties), args[6].(string))
	})
	return _c
}

func (_c *MockVectorRepo_Object_Call) Return(_a0 *search.Result, _a1 error) *MockVectorRepo_Object_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorRepo_Object_Call) RunAndReturn(run func(context.Context, string, strfmt.UUID, search.SelectProperties, additional.Properties, *additional.ReplicationProperties, string) (*search.Result, error)) *MockVectorRepo_Object_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectByID provides a mock function with given fields: ctx, id, props, _a3, tenant
func (_m *MockVectorRepo) ObjectByID(ctx context.Context, id strfmt.UUID, props search.SelectProperties, _a3 additional.Properties, tenant string) (*search.Result, error) {
	ret := _m.Called(ctx, id, props, _a3, tenant)

	if len(ret) == 0 {
		panic("no return value specified for ObjectByID")
	}

	var r0 *search.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) (*search.Result, error)); ok {
		return rf(ctx, id, props, _a3, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) *search.Result); ok {
		r0 = rf(ctx, id, props, _a3, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*search.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) error); ok {
		r1 = rf(ctx, id, props, _a3, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorRepo_ObjectByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectByID'
type MockVectorRepo_ObjectByID_Call struct {
	*mock.Call
}

// ObjectByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id strfmt.UUID
//   - props search.SelectProperties
//   - _a3 additional.Properties
//   - tenant string
func (_e *MockVectorRepo_Expecter) ObjectByID(ctx interface{}, id interface{}, props interface{}, _a3 interface{}, tenant interface{}) *MockVectorRepo_ObjectByID_Call {
	return &MockVectorRepo_ObjectByID_Call{Call: _e.mock.On("ObjectByID", ctx, id, props, _a3, tenant)}
}

func (_c *MockVectorRepo_ObjectByID_Call) Run(run func(ctx context.Context, id strfmt.UUID, props search.SelectProperties, _a3 additional.Properties, tenant string)) *MockVectorRepo_ObjectByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(strfmt.UUID), args[2].(search.SelectProperties), args[3].(additional.Properties), args[4].(string))
	})
	return _c
}

func (_c *MockVectorRepo_ObjectByID_Call) Return(_a0 *search.Result, _a1 error) *MockVectorRepo_ObjectByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorRepo_ObjectByID_Call) RunAndReturn(run func(context.Context, strfmt.UUID, search.SelectProperties, additional.Properties, string) (*search.Result, error)) *MockVectorRepo_ObjectByID_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectSearch provides a mock function with given fields: ctx, offset, limit, _a3, sort, _a5, tenant
func (_m *MockVectorRepo) ObjectSearch(ctx context.Context, offset int, limit int, _a3 *filters.LocalFilter, sort []filters.Sort, _a5 additional.Properties, tenant string) (search.Results, error) {
	ret := _m.Called(ctx, offset, limit, _a3, sort, _a5, tenant)

	if len(ret) == 0 {
		panic("no return value specified for ObjectSearch")
	}

	var r0 search.Results
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *filters.LocalFilter, []filters.Sort, additional.Properties, string) (search.Results, error)); ok {
		return rf(ctx, offset, limit, _a3, sort, _a5, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *filters.LocalFilter, []filters.Sort, additional.Properties, string) search.Results); ok {
		r0 = rf(ctx, offset, limit, _a3, sort, _a5, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(search.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *filters.LocalFilter, []filters.Sort, additional.Properties, string) error); ok {
		r1 = rf(ctx, offset, limit, _a3, sort, _a5, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVectorRepo_ObjectSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectSearch'
type MockVectorRepo_ObjectSearch_Call struct {
	*mock.Call
}

// ObjectSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int
//   - limit int
//   - _a3 *filters.LocalFilter
//   - sort []filters.Sort
//   - _a5 additional.Properties
//   - tenant string
func (_e *MockVectorRepo_Expecter) ObjectSearch(ctx interface{}, offset interface{}, limit interface{}, _a3 interface{}, sort interface{}, _a5 interface{}, tenant interface{}) *MockVectorRepo_ObjectSearch_Call {
	return &MockVectorRepo_ObjectSearch_Call{Call: _e.mock.On("ObjectSearch", ctx, offset, limit, _a3, sort, _a5, tenant)}
}

func (_c *MockVectorRepo_ObjectSearch_Call) Run(run func(ctx context.Context, offset int, limit int, _a3 *filters.LocalFilter, sort []filters.Sort, _a5 additional.Properties, tenant string)) *MockVectorRepo_ObjectSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*filters.LocalFilter), args[4].([]filters.Sort), args[5].(additional.Properties), args[6].(string))
	})
	return _c
}

func (_c *MockVectorRepo_ObjectSearch_Call) Return(_a0 search.Results, _a1 error) *MockVectorRepo_ObjectSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorRepo_ObjectSearch_Call) RunAndReturn(run func(context.Context, int, int, *filters.LocalFilter, []filters.Sort, additional.Properties, string) (search.Results, error)) *MockVectorRepo_ObjectSearch_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, concept, vector, vectors, repl
func (_m *MockVectorRepo) PutObject(ctx context.Context, concept *models.Object, vector []float32, vectors models.Vectors, repl *additional.ReplicationProperties) error {
	ret := _m.Called(ctx, concept, vector, vectors, repl)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Object, []float32, models.Vectors, *additional.ReplicationProperties) error); ok {
		r0 = rf(ctx, concept, vector, vectors, repl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVectorRepo_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type MockVectorRepo_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - concept *models.Object
//   - vector []float32
//   - vectors models.Vectors
//   - repl *additional.ReplicationProperties
func (_e *MockVectorRepo_Expecter) PutObject(ctx interface{}, concept interface{}, vector interface{}, vectors interface{}, repl interface{}) *MockVectorRepo_PutObject_Call {
	return &MockVectorRepo_PutObject_Call{Call: _e.mock.On("PutObject", ctx, concept, vector, vectors, repl)}
}

func (_c *MockVectorRepo_PutObject_Call) Run(run func(ctx context.Context, concept *models.Object, vector []float32, vectors models.Vectors, repl *additional.ReplicationProperties)) *MockVectorRepo_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Object), args[2].([]float32), args[3].(models.Vectors), args[4].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockVectorRepo_PutObject_Call) Return(_a0 error) *MockVectorRepo_PutObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVectorRepo_PutObject_Call) RunAndReturn(run func(context.Context, *models.Object, []float32, models.Vectors, *additional.ReplicationProperties) error) *MockVectorRepo_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *MockVectorRepo) Query(_a0 context.Context, _a1 *QueryInput) (search.Results, *Error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 search.Results
	var r1 *Error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryInput) (search.Results, *Error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryInput) search.Results); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(search.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryInput) *Error); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*Error)
		}
	}

	return r0, r1
}

// MockVectorRepo_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockVectorRepo_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *QueryInput
func (_e *MockVectorRepo_Expecter) Query(_a0 interface{}, _a1 interface{}) *MockVectorRepo_Query_Call {
	return &MockVectorRepo_Query_Call{Call: _e.mock.On("Query", _a0, _a1)}
}

func (_c *MockVectorRepo_Query_Call) Run(run func(_a0 context.Context, _a1 *QueryInput)) *MockVectorRepo_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*QueryInput))
	})
	return _c
}

func (_c *MockVectorRepo_Query_Call) Return(_a0 search.Results, _a1 *Error) *MockVectorRepo_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVectorRepo_Query_Call) RunAndReturn(run func(context.Context, *QueryInput) (search.Results, *Error)) *MockVectorRepo_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVectorRepo creates a new instance of MockVectorRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVectorRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVectorRepo {
	mock := &MockVectorRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
