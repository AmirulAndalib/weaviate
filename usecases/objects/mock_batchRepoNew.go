//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package objects

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	mock "github.com/stretchr/testify/mock"
)

// MockbatchRepoNew is an autogenerated mock type for the batchRepoNew type
type MockbatchRepoNew struct {
	mock.Mock
}

type MockbatchRepoNew_Expecter struct {
	mock *mock.Mock
}

func (_m *MockbatchRepoNew) EXPECT() *MockbatchRepoNew_Expecter {
	return &MockbatchRepoNew_Expecter{mock: &_m.Mock}
}

// AddBatchReferences provides a mock function with given fields: ctx, references, repl
func (_m *MockbatchRepoNew) AddBatchReferences(ctx context.Context, references BatchReferences, repl *additional.ReplicationProperties) (BatchReferences, error) {
	ret := _m.Called(ctx, references, repl)

	if len(ret) == 0 {
		panic("no return value specified for AddBatchReferences")
	}

	var r0 BatchReferences
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, BatchReferences, *additional.ReplicationProperties) (BatchReferences, error)); ok {
		return rf(ctx, references, repl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, BatchReferences, *additional.ReplicationProperties) BatchReferences); ok {
		r0 = rf(ctx, references, repl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BatchReferences)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, BatchReferences, *additional.ReplicationProperties) error); ok {
		r1 = rf(ctx, references, repl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbatchRepoNew_AddBatchReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBatchReferences'
type MockbatchRepoNew_AddBatchReferences_Call struct {
	*mock.Call
}

// AddBatchReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - references BatchReferences
//   - repl *additional.ReplicationProperties
func (_e *MockbatchRepoNew_Expecter) AddBatchReferences(ctx interface{}, references interface{}, repl interface{}) *MockbatchRepoNew_AddBatchReferences_Call {
	return &MockbatchRepoNew_AddBatchReferences_Call{Call: _e.mock.On("AddBatchReferences", ctx, references, repl)}
}

func (_c *MockbatchRepoNew_AddBatchReferences_Call) Run(run func(ctx context.Context, references BatchReferences, repl *additional.ReplicationProperties)) *MockbatchRepoNew_AddBatchReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(BatchReferences), args[2].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockbatchRepoNew_AddBatchReferences_Call) Return(_a0 BatchReferences, _a1 error) *MockbatchRepoNew_AddBatchReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbatchRepoNew_AddBatchReferences_Call) RunAndReturn(run func(context.Context, BatchReferences, *additional.ReplicationProperties) (BatchReferences, error)) *MockbatchRepoNew_AddBatchReferences_Call {
	_c.Call.Return(run)
	return _c
}

// BatchDeleteObjects provides a mock function with given fields: ctx, params, repl, tenant
func (_m *MockbatchRepoNew) BatchDeleteObjects(ctx context.Context, params BatchDeleteParams, repl *additional.ReplicationProperties, tenant string) (BatchDeleteResult, error) {
	ret := _m.Called(ctx, params, repl, tenant)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteObjects")
	}

	var r0 BatchDeleteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, BatchDeleteParams, *additional.ReplicationProperties, string) (BatchDeleteResult, error)); ok {
		return rf(ctx, params, repl, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, BatchDeleteParams, *additional.ReplicationProperties, string) BatchDeleteResult); ok {
		r0 = rf(ctx, params, repl, tenant)
	} else {
		r0 = ret.Get(0).(BatchDeleteResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, BatchDeleteParams, *additional.ReplicationProperties, string) error); ok {
		r1 = rf(ctx, params, repl, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbatchRepoNew_BatchDeleteObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchDeleteObjects'
type MockbatchRepoNew_BatchDeleteObjects_Call struct {
	*mock.Call
}

// BatchDeleteObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - params BatchDeleteParams
//   - repl *additional.ReplicationProperties
//   - tenant string
func (_e *MockbatchRepoNew_Expecter) BatchDeleteObjects(ctx interface{}, params interface{}, repl interface{}, tenant interface{}) *MockbatchRepoNew_BatchDeleteObjects_Call {
	return &MockbatchRepoNew_BatchDeleteObjects_Call{Call: _e.mock.On("BatchDeleteObjects", ctx, params, repl, tenant)}
}

func (_c *MockbatchRepoNew_BatchDeleteObjects_Call) Run(run func(ctx context.Context, params BatchDeleteParams, repl *additional.ReplicationProperties, tenant string)) *MockbatchRepoNew_BatchDeleteObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(BatchDeleteParams), args[2].(*additional.ReplicationProperties), args[3].(string))
	})
	return _c
}

func (_c *MockbatchRepoNew_BatchDeleteObjects_Call) Return(_a0 BatchDeleteResult, _a1 error) *MockbatchRepoNew_BatchDeleteObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbatchRepoNew_BatchDeleteObjects_Call) RunAndReturn(run func(context.Context, BatchDeleteParams, *additional.ReplicationProperties, string) (BatchDeleteResult, error)) *MockbatchRepoNew_BatchDeleteObjects_Call {
	_c.Call.Return(run)
	return _c
}

// BatchPutObjects provides a mock function with given fields: ctx, objects, repl
func (_m *MockbatchRepoNew) BatchPutObjects(ctx context.Context, objects BatchObjects, repl *additional.ReplicationProperties) (BatchObjects, error) {
	ret := _m.Called(ctx, objects, repl)

	if len(ret) == 0 {
		panic("no return value specified for BatchPutObjects")
	}

	var r0 BatchObjects
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, BatchObjects, *additional.ReplicationProperties) (BatchObjects, error)); ok {
		return rf(ctx, objects, repl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, BatchObjects, *additional.ReplicationProperties) BatchObjects); ok {
		r0 = rf(ctx, objects, repl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BatchObjects)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, BatchObjects, *additional.ReplicationProperties) error); ok {
		r1 = rf(ctx, objects, repl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbatchRepoNew_BatchPutObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchPutObjects'
type MockbatchRepoNew_BatchPutObjects_Call struct {
	*mock.Call
}

// BatchPutObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - objects BatchObjects
//   - repl *additional.ReplicationProperties
func (_e *MockbatchRepoNew_Expecter) BatchPutObjects(ctx interface{}, objects interface{}, repl interface{}) *MockbatchRepoNew_BatchPutObjects_Call {
	return &MockbatchRepoNew_BatchPutObjects_Call{Call: _e.mock.On("BatchPutObjects", ctx, objects, repl)}
}

func (_c *MockbatchRepoNew_BatchPutObjects_Call) Run(run func(ctx context.Context, objects BatchObjects, repl *additional.ReplicationProperties)) *MockbatchRepoNew_BatchPutObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(BatchObjects), args[2].(*additional.ReplicationProperties))
	})
	return _c
}

func (_c *MockbatchRepoNew_BatchPutObjects_Call) Return(_a0 BatchObjects, _a1 error) *MockbatchRepoNew_BatchPutObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbatchRepoNew_BatchPutObjects_Call) RunAndReturn(run func(context.Context, BatchObjects, *additional.ReplicationProperties) (BatchObjects, error)) *MockbatchRepoNew_BatchPutObjects_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbatchRepoNew creates a new instance of MockbatchRepoNew. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbatchRepoNew(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockbatchRepoNew {
	mock := &MockbatchRepoNew{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
